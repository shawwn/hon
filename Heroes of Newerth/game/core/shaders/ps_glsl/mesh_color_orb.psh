// (C)2009 S2 Games
// mesh_color_orb.psh
// 
// ...
//=============================================================================

//=============================================================================
// Uniform variables
//=============================================================================
uniform vec3	vSunPositionView;

uniform vec3	vAmbient;
uniform vec3	vSunColor;

#ifdef GROUND_AMBIENT
uniform vec3	vViewUp;
#endif

uniform vec2	vSpec;

uniform float	fFogStart;
uniform float	fFogEnd;
uniform float	fFogScale;
uniform vec3	vFogColor;
uniform float	fFogDensity;
uniform vec3	vFog;

#if (NUM_POINT_LIGHTS > 0)
uniform vec3	vPointLightPositionView[NUM_POINT_LIGHTS];
uniform vec3	vPointLightColor[NUM_POINT_LIGHTS];
uniform vec2	vPointLightFalloff[NUM_POINT_LIGHTS];
#endif

//=============================================================================
// Varying variables
//=============================================================================
varying vec4	v_vColor;

#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1)
varying vec3	v_vNormal;
varying vec3	v_vTangent;
varying vec3	v_vBinormal;
#elif (LIGHTING_QUALITY == 2)
varying vec3	v_vDiffLight;
varying vec4	v_vRefract;
#endif

varying vec4	v_vPositionScreen;

#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1 || FALLOFF_QUALITY == 0)
varying vec3	v_vPositionView;
#endif

#if (SHADOWS == 1)
varying vec4	v_vTexcoordLight;
#endif

#ifdef CLOUDS
varying vec2	v_vClouds;
#endif

#if ((FOG_QUALITY == 1 && FOG_TYPE != 0) || FALLOFF_QUALITY == 1 || FOG_OF_WAR == 1)
varying vec4	v_vData0;
#endif

//=============================================================================
// Samplers
//=============================================================================
uniform sampler2D	diffuse;

#ifndef RXGB_NORMALMAP
uniform sampler2D	normalmap1;
uniform sampler2D	normalmap2;
uniform sampler2D	normalmap3;
#else
uniform sampler2D	normalmap1_0;
uniform sampler2D	normalmap2_0;
uniform sampler2D	normalmap3_0;
#endif

#ifdef CLOUDS
uniform sampler2D 	clouds;
#endif

#if (FOG_OF_WAR == 1)
uniform sampler2D	fogofwar;
#endif

uniform sampler2D	scene;

//=============================================================================
// Pixel Shader
//=============================================================================
void main()
{
	vec4 cDiffuseColor = texture2D(diffuse, gl_TexCoord[1].xy);
	
#if (TEXKILL == 1)
	if (cDiffuseColor.a < 91.0 / 255.0)
		discard;
#endif

	cDiffuseColor *= v_vColor;
	
#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1)
	vec3 vCamDirection = -normalize(v_vPositionView);
#endif

#if (FOG_TYPE != 0)
	#if (FALLOFF_QUALITY == 1)
		float fCamDistance = v_vData0.z;
	#else
		float fCamDistance = length(v_vPositionView);
	#endif
#endif

	//
	// Lighting
	//

#if (LIGHTING != 0)

	#ifndef RXGB_NORMALMAP
	vec3 cNormalmapColor1 = texture2D(normalmap1, gl_TexCoord[0].xy).rgb;
	vec3 cNormalmapColor2 = texture2D(normalmap2, gl_TexCoord[0].zw).rgb;
	vec3 cNormalmapColor3 = texture2D(normalmap3, gl_TexCoord[1].xy).rgb;
	#else
	vec3 cNormalmapColor1 = texture2D(normalmap1_0, gl_TexCoord[0].xy).agb;
	vec3 cNormalmapColor2 = texture2D(normalmap2_0, gl_TexCoord[0].zw).agb;
	vec3 cNormalmapColor3 = texture2D(normalmap3_0, gl_TexCoord[1].xy).agb;
	#endif

	vec3 vTexNormal1 = vec3(cNormalmapColor1.xyz * 2.0 - 1.0);
	vec3 vTexNormal2 = vec3(cNormalmapColor2.xyz * 2.0 - 1.0);
	vec3 vTexNormal3 = vec3(cNormalmapColor3.xyz * 2.0 - 1.0);
	
	vec3 vTexNormal = vTexNormal1 + vTexNormal2 + vTexNormal3;
	
	vec3 vDiffuse = vAmbient;
	vec3 vSpecular = vec3(0.0, 0.0, 0.0);
	float fSpecular = vSpec.x;
	
	#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1)
	mat3 mRotation = mat3(v_vTangent, v_vBinormal, v_vNormal);
	vec3 vNormal = normalize(mRotation * vTexNormal);
	#endif
	
	#if (LIGHTING_QUALITY == 2)
	
	vDiffuse += v_vDiffLight;
	
	#else 
	// 0 or 1

	vec3 vLight = vSunPositionView;
	vec3 vHalfAngle = normalize(vLight + vCamDirection);
		
		#ifdef SMOOTH_SELF_OCCLUDE
	float fSelfOcclude = clamp(dot(v_vNormal, vLight) * 5.0, 0.0, 1.0);
		#else
	float fSelfOcclude = 1.0;
		#endif
		
	vec2 vLit;
	vLit.x = clamp(dot(vNormal, vLight), 0.0, 1.0);
	vLit.y = pow(clamp(dot(vNormal, vHalfAngle), 0.0, 1.0), vSpec.y) * fSpecular;
	vLit *= fSelfOcclude;

		#ifdef CLOUDS
	vec3 cCloudColor = texture2D(clouds, v_vClouds).rgb;

	vDiffuse += vSunColor * vLit.x * cCloudColor;
	vSpecular += vSunColor * vLit.y * cCloudColor;
		#else
	vDiffuse += vSunColor * vLit.x;
	vSpecular += vSunColor * vLit.y;
		#endif
		
		#if (NUM_POINT_LIGHTS > 0 && LIGHTING_QUALITY == 0)
	// Point Lights
	for (int i = 0; i < NUM_POINT_LIGHTS; ++i)
	{
		vec3 vDeltaPosition = vPointLightPositionView[i] - v_vPositionView;
		float fDistance = length(vDeltaPosition);
	
		vec3 vLight = normalize(vDeltaPosition);
		vec3 vHalfAngle = normalize(vLight + vCamDirection);

		float fAttenuation = 1.0 - clamp(fDistance * vPointLightFalloff[i].x + vPointLightFalloff[i].y, 0.0, 1.0);
				
		vec2 vLit; // x = diffuse, y = specular
		vLit.x = clamp(dot(vNormal, vLight), 0.0, 1.0);
		vLit.y = pow(clamp(dot(vNormal, vHalfAngle), 0.0, 1.0), vSpec.y) * fSpecular;
		vLit *= fAttenuation;
		
		vDiffuse += vPointLightColor[i] * vLit.x;
		vSpecular += vPointLightColor[i] * vLit.y;
	}
		#endif

	#endif 
	// LIGHTING_QUALITY

#else 
// LIGHTING == 0
	vec3 vDiffuse = vec3(1.0, 1.0, 1.0);
	vec3 vSpecular = vec3(0.0, 0.0, 0.0);
#endif

	//
	// Fog
	//

#if (FOG_TYPE != 0) 
// FOG_NONE
	#if (FOG_QUALITY == 1)
	float fFog = v_vData0.w;
	#else
		#if (FOG_TYPE == 0) 
		// FOG_NONE
	float fFog = 0.0;
		#elif (FOG_TYPE == 1) 
		// FOG_LINEAR
	float fFog = clamp(fCamDistance * vFog.x + vFog.y, 0.0, 1.0) * vFog.z;
		#elif (FOG_TYPE == 2) 
		// FOG_EXP2
	float fFog = 1.0 - exp2(-fCamDistance * fFogDensity);
		#elif (FOG_TYPE == 3) 
		// FOG_EXP
	float fFog = 1.0 - exp(-fCamDistance * fFogDensity);
		#elif (FOG_TYPE == 4) 
		// FOG_HERMITE
	float fFog = smoothstep(fFogStart, fFogEnd, fCamDistance) * fFogScale;
		#endif
	#endif
#else
	float fFog = 0.0;
#endif

	//
	// Refraction
	//
	
	#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1)
	vec3 vRefraction = vNormal;
	#else
	vec3 vRefraction = v_vRefract.xyz;
	#endif
	
	vec2 vSceneTexcoord = v_vPositionScreen.xy / v_vPositionScreen.w;
		
	#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1 || FALLOFF_QUALITY == 0)
	vSceneTexcoord += (vRefraction.xy * vec2(-1.0, -1.0)) / vRefraction.z / ((-v_vPositionView.z + 200.0) / 80.0) * 0.25;
	#else
	vSceneTexcoord += (vRefraction.xy * vec2(-1.0, -1.0)) / vRefraction.z / ((-v_vPositionScreen.z + 200.0) / 80.0) * 0.25;
	#endif
	
	vec3 cRefractionColor = texture2D(scene, vSceneTexcoord).rgb * v_vColor.rgb;
	
	//
	// Fresnel
	//
	
	#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1)
	float fFresnelBias = 0.2;
	float fFresnelScale = 0.8;
	float fFresnelPower = 7.0;
	float fFresnel = 1.0 - clamp(fFresnelBias + fFresnelScale * pow(1.0 + dot(-vCamDirection, normalize(v_vNormal)), fFresnelPower), 0.0, 1.0);
	#else
	float fFresnel = v_vRefract.w;
	#endif
	
	//
	// Final
	//
	
	vec3 vFinalColor = mix(cDiffuseColor.rgb * vDiffuse, cRefractionColor, fFresnel) + vSpecular;
	
#if (FOG_OF_WAR == 1)
	vFinalColor *= texture2D(fogofwar, v_vData0.xy).a;
#endif

	gl_FragColor.rgb = mix(vFinalColor, vFogColor, fFog);
	gl_FragColor.a = cDiffuseColor.a;
}
