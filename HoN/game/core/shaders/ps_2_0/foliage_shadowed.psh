// (C)2006 S2 Games
// foliage_shadowed.psh
// 
// Default foliage pixel shader with shadowmap support
//=============================================================================

//=============================================================================
// Headers
//=============================================================================
#include "../common/common.h"
#include "../common/fog.h"
#if (SHADOWS == 1)
  #include "shadowed.h"
#endif

//=============================================================================
// Global variables
//=============================================================================
float3		vSunPositionView;

float3		vAmbient;
float3		vSunColor;
float3		vSunColorSpec;

float		fGlossiness;

#if (NUM_POINT_LIGHTS > 0)
	float3		vPointLightPositionView[NUM_POINT_LIGHTS];
	float3		vPointLightColor[NUM_POINT_LIGHTS];
	float3		vPointLightColorSpec[NUM_POINT_LIGHTS];
	float2		vPointLightFalloff[NUM_POINT_LIGHTS];
#endif

//=============================================================================
// Vertex shader output structure
//=============================================================================
struct VS_OUTPUT
{
	float4 Color0        : COLOR0;
	float2 Texcoord0     : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#if (LIGHTING_QUALITY == 0 || FALLOFF_QUALITY == 0)
	float3 PositionView : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
#if (LIGHTING_QUALITY == 0 || LIGHTING_QUALITY == 1)
	float3 Normal        : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#elif (LIGHTING_QUALITY == 2 || LIGHTING_QUALITY == 3)
	float3 DiffLight  : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
#if (SHADOWS == 1)
	#ifdef SHADOW_SPLIT_PROJECTION
		float4 TexcoordLight0 : TEXCOORDX;
			#include "../common/inc_texcoord.h"
		float4 TexcoordLight1 : TEXCOORDX;
			#include "../common/inc_texcoord.h"
		float4 TexcoordLight2 : TEXCOORDX;
			#include "../common/inc_texcoord.h"
		float4 TexcoordLight3 : TEXCOORDX;
			#include "../common/inc_texcoord.h"
	#else
		float4 TexcoordLight : TEXCOORDX; // Texcoord in light texture space
			#include "../common/inc_texcoord.h"
	#endif
#endif
#ifdef CLOUDS
	float2 TexcoordClouds : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
#if ((FOG_QUALITY == 1 && FOG_TYPE != 0) || (FALLOFF_QUALITY == 1 && (FOG_TYPE != 0 || SHADOWS == 1)) || FOG_OF_WAR == 1)
	float4 Last : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
};

//=============================================================================
// Pixel shader input structure
//=============================================================================
struct PS_OUTPUT
{
	float4 Color : COLOR;
};

sampler diffuse;

#ifdef CLOUDS
	sampler clouds;
#endif

#if (FOG_OF_WAR == 1)
	sampler fogofwar;
#endif

//=============================================================================
// Pixel Shader
//=============================================================================
PS_OUTPUT PS( VS_OUTPUT In )
{
	PS_OUTPUT Out;
	
	float4 cDiffuseColor = tex2D(diffuse, In.Texcoord0) * In.Color0;
	
#if (LIGHTING_QUALITY == 0)
	float3 vCamDirection = -normalize(In.PositionView);
#endif

#if (FOG_TYPE != 0 || SHADOWS == 1)
	#if (FALLOFF_QUALITY == 1)
		float fCamDistance = In.Last.z;
	#else
		float fCamDistance = length(In.PositionView);
	#endif
#endif
		
	//
	// Shadowing
	//
	
#if (SHADOWS == 1)
	#ifdef SHADOW_SPLIT_PROJECTION
		float4 vTexcoordLight = GetSplitLightTexcoord(In.TexcoordLight0, In.TexcoordLight1, In.TexcoordLight2, In.TexcoordLight3);
	#else
		float4 vTexcoordLight = In.TexcoordLight;
	#endif

	float fShadow = ShadowedD(vTexcoordLight, fCamDistance);
	
#else // SHADOWS == 0
	float fShadow = 1.0f;
#endif
		
	//
	// Lighting
	//	
	
#if (LIGHTING != 0)

	float3 vDiffuse = vAmbient;
	
#if (LIGHTING_QUALITY == 2 || LIGHTING_QUALITY == 3)

	vDiffuse += In.DiffLight * fShadow;

#else // 0 or 1

	// Sun
	{
		float3 vLight = vSunPositionView.xyz;		
		
		float fDiffuse = saturate(dot(In.Normal, vLight)) * fShadow;

#ifdef CLOUDS
		float4 cCloudColor = tex2D(clouds, In.TexcoordClouds);

		vDiffuse += vSunColor * fDiffuse * cCloudColor;
#else
		vDiffuse += vSunColor * fDiffuse;
#endif
	}
	
#if (NUM_POINT_LIGHTS > 0 && LIGHTING_QUALITY == 0)
	// Point Lights
	for (int i = 0; i < NUM_POINT_LIGHTS; ++i)
	{
		float3 vDeltaPosition = vPointLightPositionView[i] - In.PositionView;
		float  fDistance = length(vDeltaPosition);
	
		float3 vLight = normalize(vDeltaPosition);
		
		float fAttenuation = 1.0f - saturate(fDistance * vPointLightFalloff[i].x + vPointLightFalloff[i].y);
		
		float fDiffuse = saturate(dot(In.Normal, vLight)) * fAttenuation;
		
		vDiffuse += vPointLightColor[i] * fDiffuse;
	}
#endif

#endif // LIGHTING_QUALITY

#else // LIGHTING == 0

	float3 vDiffuse = float3(1.0f, 1.0f, 1.0f);

#endif
	
	//
	// Fog
	//

#if (FOG_TYPE != 0) // FOG_NONE
	#if (FOG_QUALITY == 1)
		float fFog = In.Last.w;
	#else
		float fFog = FogD(fCamDistance);
	#endif
#else
	float fFog = 0.0f;
#endif
	
	//
	// Final
	//
	
#if (FOG_OF_WAR == 1)
	Out.Color.rgb = lerp((cDiffuseColor.rgb * vDiffuse) * (tex2D(fogofwar, In.Last.xy).a * -0.667f + 1.000f), vFogColor, fFog);
#else
	Out.Color.rgb = lerp(cDiffuseColor.rgb * vDiffuse, vFogColor, fFog);
#endif

	Out.Color.a = cDiffuseColor.a;

	return Out;
}
