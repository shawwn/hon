// (C)2006 S2 Games
// mesh_etheral.psh
// 
// Default mesh pixel shader with shadowmap support
//=============================================================================

//=============================================================================
// Headers
//=============================================================================
#include "../common/common.h"
#include "../common/fog.h"

//=============================================================================
// Global variables
//=============================================================================
float3		vSunPositionView;

float3		vAmbient;
float3		vSunColor;
float3		vSunColorSpec;

float		fGlossiness;

#if (NUM_POINT_LIGHTS > 0)
	float3		vPointLightPositionView[NUM_POINT_LIGHTS];
	float3		vPointLightColor[NUM_POINT_LIGHTS];
	float3		vPointLightColorSpec[NUM_POINT_LIGHTS];
	float2		vPointLightFalloff[NUM_POINT_LIGHTS];
#endif

//=============================================================================
// Vertex shader output structure
//=============================================================================
struct VS_OUTPUT
{
	float4 Position      : POSITION;
	float4 Color0        : COLOR0;
	float2 Texcoord0     : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 PositionView : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Normal        : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Tangent       : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Binormal      : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#ifdef CLOUDS
	float2 TexcoordClouds : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
#if ((FOG_QUALITY == 1 && FOG_TYPE != 0) || (FALLOFF_QUALITY == 1 && (FOG_TYPE != 0 || SHADOWS == 1)) || FOG_OF_WAR == 1)
	float4 Last : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
};

//=============================================================================
// Pixel shader input structure
//=============================================================================
struct PS_OUTPUT
{
	float4 Color : COLOR;
};

sampler diffuse;
sampler normalmap;

#ifdef SPECULAR_LOOKUP
	sampler specularLookup;
#endif

#ifdef CLOUDS
	sampler clouds;
#endif

#if (FOG_OF_WAR == 1)
	sampler fogofwar;
#endif

//=============================================================================
// Pixel Shader
//=============================================================================
PS_OUTPUT PS( VS_OUTPUT In )
{
	PS_OUTPUT Out;
	
	float4 cDiffuseColor = tex2D(diffuse, In.Texcoord0) * In.Color0;
	
	float3 vCamDirection = -normalize(In.PositionView);

#if (FOG_TYPE != 0 || SHADOWS == 1)
	#if (FALLOFF_QUALITY == 1)
		float fCamDistance = In.Last.z;
	#else
		float fCamDistance = length(In.PositionView);
	#endif
#endif
		
	//
	// Lighting
	//	

	float3x3 mRotation = float3x3(In.Tangent, In.Binormal, In.Normal);
	
	float4 cNormalmapColor = tex2D(normalmap, In.Texcoord0);
	float3 vTexNormal = float3(cNormalmapColor.xy * 2.0f - 1.0f, cNormalmapColor.z);
	float3 vNormal = normalize(mul(vTexNormal, mRotation));

	float3 vDiffuse = float3(0.33f, 0.33f, 0.33f);
	float3 vSpecular = float3(0.0f, 0.0f, 0.0f);
	
#ifdef ANTIALIAS_NORMALMAPS
	float fNa = saturate(length(vTexNormal));

	float fToksvig = fNa / (fNa + fGlossiness * (1.0f - fNa));
	
	float fSpecScale = (1.0f + fGlossiness * fToksvig) / (1.0f + fGlossiness);
	float fSpecPower = fGlossiness * fToksvig;
#else
	float fSpecScale = 1.0f;
	float fSpecPower = fGlossiness;
#endif

	//
	// Fog
	//

#if (FOG_TYPE != 0) // FOG_NONE
	#if (FOG_QUALITY == 1)
		float fFog = In.Last.w;
	#else
		float fFog = FogD(fCamDistance);
	#endif
#else
	float fFog = 0.0f;
#endif

	//
	// Fresnel
	//
	
	float fFresnelBias = 0.25f;
	float fFresnelScale = 2.0f;
	float fFresnelPower = 1.0f;
	float fFresnel = 1.0f - saturate(fFresnelBias + fFresnelScale * pow(1.0f + dot(-vCamDirection, vNormal), fFresnelPower));
	
	//
	// Final
	//

#if (FOG_OF_WAR == 1)
	Out.Color.rgb = lerp((cDiffuseColor.rgb * vDiffuse + vSpecular) * (tex2D(fogofwar, In.Last.xy).a * -0.667f + 1.000f), vFogColor, fFog);
#else
	Out.Color.rgb = lerp(cDiffuseColor.rgb * vDiffuse + vSpecular, vFogColor, fFog);
#endif

	Out.Color.a = fFresnel;

	return Out;
}
