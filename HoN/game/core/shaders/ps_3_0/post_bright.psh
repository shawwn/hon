// (C)2008 S2 Games
// post_bright.psh
// 
// ...
//=============================================================================

//=============================================================================
// Global variables
//=============================================================================
float4	vTexelSize;

//=============================================================================
// Vertex shader output structure
//=============================================================================
struct VS_OUTPUT
{
	float2 Texcoord0 : TEXCOORD0;
};

//=============================================================================
// Pixel shader input structure
//=============================================================================
struct PS_OUTPUT
{
	float4 Color : COLOR;
};

sampler image;

//=============================================================================
// Pixel Shader
//=============================================================================
PS_OUTPUT PS( VS_OUTPUT In )
{
	PS_OUTPUT Out;
	
	float4 vColor = tex2D(image, In.Texcoord0);
	
	Out.Color.rgb = vColor.rgb;
	
	static const float fMin = 1.00f;
	static const float fMax = 2.00f;
	static const float fLerp = 0.0f;

#if 0
	float fBrightness = max(Out.Color.r, max(Out.Color.g, Out.Color.b)) + dot(Out.Color.rgb, float3(1.0f, 1.0f, 1.0f));
	float fScale = lerp(smoothstep(fMin, fMax, fBrightness), 1.0f, fLerp);
#else
	float fBrightness = max(Out.Color.r, max(Out.Color.g, Out.Color.b)) + dot(Out.Color.rgb, float3(1.0f, 1.0f, 1.0f));
	float fScale = saturate(fBrightness - 1.0f);
#endif

	Out.Color.rgb *= fScale;

	Out.Color.a = vColor.a;

	return Out;
}

