// (C)2006 S2 Games
// water.psh
// 
// Water
//=============================================================================

//=============================================================================
// Headers
//=============================================================================
#include "../common/common.h"
#include "../common/fog.h"
#if (SHADOWS == 1)
  #include "shadowed.h"
#endif

//=============================================================================
// Global variables
//=============================================================================
float3		vSunPositionView;

float3		vAmbient;
float3		vSunColor;
float3		vSunColorSpec;

float		fGlossiness;

#if (NUM_POINT_LIGHTS > 0)
	float3		vPointLightPositionView[NUM_POINT_LIGHTS];
	float3		vPointLightColor[NUM_POINT_LIGHTS];
	float3		vPointLightColorSpec[NUM_POINT_LIGHTS];
	float2		vPointLightFalloff[NUM_POINT_LIGHTS];
#endif

//=============================================================================
// Vertex shader output structure
//=============================================================================
struct VS_OUTPUT
{
	float4 Color0        : COLOR0;
	float2 Texcoord0     : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float2 Texcoord1     : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 PositionView : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#if (LIGHTING_QUALITY == 0)
	float3 Normal        : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Tangent       : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 Binormal      : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#elif (LIGHTING_QUALITY == 1)
	float3 HalfAngle     : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 SunLight      : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#elif (LIGHTING_QUALITY == 2)
	float3 DiffLight  : TEXCOORDX;
		#include "../common/inc_texcoord.h"
	float3 SpecLight  : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#elif (LIGHTING_QUALITY == 3)
	float3 DiffLight  : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
#if (SHADOWS == 1)
	#ifdef SHADOW_SPLIT_PROJECTION
		float4 TexcoordLight0 : TEXCOORDX;
			#include "../common/inc_texcoord.h"
		float4 TexcoordLight1 : TEXCOORDX;
			#include "../common/inc_texcoord.h"
		float4 TexcoordLight2 : TEXCOORDX;
			#include "../common/inc_texcoord.h"
		float4 TexcoordLight3 : TEXCOORDX;
			#include "../common/inc_texcoord.h"
	#else
		float4 TexcoordLight : TEXCOORDX; // Texcoord in light texture space
			#include "../common/inc_texcoord.h"
	#endif
#endif
#if ((FOG_QUALITY == 1 && FOG_TYPE != 0) || (FALLOFF_QUALITY == 1 && (FOG_TYPE != 0 || SHADOWS == 1)) || FOG_OF_WAR == 1)
	float4 Last : TEXCOORDX;
		#include "../common/inc_texcoord.h"
#endif
};

//=============================================================================
// Pixel shader input structure
//=============================================================================
struct PS_OUTPUT
{
	float4 Color : COLOR;
};

sampler diffuse;
sampler normalmap1;
sampler normalmap2;
samplerCUBE cube;

#ifdef SPECULAR_LOOKUP
	sampler specularLookup;
#endif

#ifdef CLOUDS
	sampler clouds;
#endif

//=============================================================================
// Pixel Shader
//=============================================================================
PS_OUTPUT PS( VS_OUTPUT In )
{
	PS_OUTPUT Out;
	
	float4 cDiffuseColor = tex2D(diffuse, In.Texcoord0);
	
#if (TEXKILL == 1)
	clip(cDiffuseColor.a - 91.0f / 255.0f);
#endif

	cDiffuseColor *= In.Color0;
	
	float3 vCamDirection = -normalize(In.PositionView);

#if (FOG_TYPE != 0 || SHADOWS == 1)
	#if (FALLOFF_QUALITY == 1)
		float fCamDistance = In.Last.z;
	#else
		float fCamDistance = length(In.PositionView);
	#endif
#endif
		
	//
	// Shadowing
	//
	
#if (SHADOWS == 1)
	#ifdef SHADOW_SPLIT_PROJECTION
		float4 vTexcoordLight = GetSplitLightTexcoord(In.TexcoordLight0, In.TexcoordLight1, In.TexcoordLight2, In.TexcoordLight3);
	#else
		float4 vTexcoordLight = In.TexcoordLight;
	#endif

	float fShadow = ShadowedD(vTexcoordLight, fCamDistance);
	
#else // SHADOWS == 0
	float fShadow = 1.0f;
#endif
		
	//
	// Lighting
	//	
	
#if (LIGHTING != 0)
	
	float4 cNormalmapColor1 = tex2D(normalmap1, In.Texcoord0);
	float4 cNormalmapColor2 = tex2D(normalmap2, In.Texcoord1);
	
	float3 vTexNormal1 = float3(cNormalmapColor1.xy * 2.0f - 1.0f, cNormalmapColor1.z);
	float3 vTexNormal2 = float3(cNormalmapColor2.xy * 2.0f - 1.0f, cNormalmapColor2.z);
	
	float3 vTexNormal = normalize(vTexNormal1 + vTexNormal2);
	
#if (LIGHTING_QUALITY == 1)
	float3 vNormal = vTexNormal;
#elif (LIGHTING_QUALITY == 0)
	float3x3 mRotation = float3x3(In.Tangent, In.Binormal, In.Normal);
	float3 vNormal = normalize(mul(vTexNormal, mRotation));
#else
	float3 vNormal = float3(0.0f, 0.0f, 1.0f);
#endif
	
	float3 vDiffuse = vAmbient;
	float3 vSpecular = float3(0.0f, 0.0f, 0.0f);
	float fSpecular = 1.0f;
	
#if (LIGHTING_QUALITY == 2)

	vDiffuse += In.DiffLight * fShadow;
	vSpecular += In.SpecLight * fSpecular * fShadow;

#elif (LIGHTING_QUALITY == 3)

	vDiffuse += In.DiffLight * fShadow;

#else // 0 or 1

	// Sun
	{
#if (LIGHTING_QUALITY == 1)
		float3 vLight = normalize(In.SunLight);
		float3 vHalfAngle = normalize(In.HalfAngle);
		
	#ifdef SMOOTH_SELF_OCCLUDE
		float fSelfOcclude = saturate(vLight.z * 5.0f);
	#else
		float fSelfOcclude = 1.0f;
	#endif

#else
		float3 vLight = vSunPositionView.xyz;		
		float3 vHalfAngle = normalize(vLight + vCamDirection);
		
	#ifdef SMOOTH_SELF_OCCLUDE
		float fSelfOcclude = saturate(dot(In.Normal, vLight) * 5.0f);
	#else
		float fSelfOcclude = 1.0f;
	#endif
#endif
		
		float2 vLit; // x = diffuse, y = specular
		
		vLit.x = saturate(dot(vNormal, vLight));
		
#ifdef SPECULAR_LOOKUP
		vLit.y = saturate(step(0.0f, vLit.x) * (tex2D(specularLookup, float2(dot(vNormal, vHalfAngle), fGlossiness / 256.0f)).r));
#else
		vLit.y = saturate(step(0.0f, vLit.x) * (pow(dot(vNormal, vHalfAngle), fGlossiness))) * fSpecular;
#endif

		vLit *= fShadow * fSelfOcclude;

#ifdef CLOUDS
		float4 cCloudColor = tex2D(clouds, In.TexcoordClouds);

		vDiffuse += vSunColor * vLit.x * cCloudColor;
		vSpecular += vSunColorSpec * vLit.y * cCloudColor;
#else
		vDiffuse += vSunColor * vLit.x;
		vSpecular += vSunColorSpec * vLit.y;
#endif
	}
	
#if (NUM_POINT_LIGHTS > 0 && LIGHTING_QUALITY == 0)
	// Point Lights
	[unroll(NUM_POINT_LIGHTS)] for (int i = 0; i < NUM_POINT_LIGHTS; ++i)
	{
		float3 vDeltaPosition = vPointLightPositionView[i] - In.PositionView;
		float  fDistance = length(vDeltaPosition);
	
		float3 vLight = normalize(vDeltaPosition);
		float3 vHalfAngle = normalize(vLight + vCamDirection);
		
		float fAttenuation = 1.0f - saturate(fDistance * vPointLightFalloff[i].x + vPointLightFalloff[i].y);
		
		float2 vLit; // x = diffuse, y = specular
		
		vLit.x = saturate(dot(vNormal, vLight));
		vLit.y = saturate(step(0.0f, vLit.x) * pow(dot(vNormal, vHalfAngle), fGlossiness)) * fSpecular;
		
		vLit *= fAttenuation;
		
		vDiffuse += vPointLightColor[i] * vLit.x;
		vSpecular += vPointLightColorSpec[i] * vLit.y;
	}
#endif

#endif // LIGHTING_QUALITY

#else // LIGHTING == 0

	float3 vDiffuse = float3(1.0f, 1.0f, 1.0f);
	float3 vSpecular = float3(0.0f, 0.0f, 0.0f);
	float3 vNormal = float3(0.0f, 0.0f, 1.0f);

#endif
	
	//
	// Fog
	//

#if (FOG_TYPE != 0) // FOG_NONE
	#if (FOG_QUALITY == 1)
		float fFog = In.Last.w;
	#else
		float fFog = FogD(fCamDistance);
	#endif
#else
	float fFog = 0.0f;
#endif
	
	//
	// Reflection
	//
	
	float3 cReflectionColor = texCUBE(cube, reflect(-vCamDirection, vNormal));

	//
	// Final
	//
	
	Out.Color.rgb = lerp(lerp(cDiffuseColor.rgb * vDiffuse + vSpecular, cReflectionColor, 0.35f), vFogColor, fFog);
	Out.Color.a = cDiffuseColor.a;

	return Out;
}
