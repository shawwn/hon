// (C)2008 S2 Games
// effect_blur.psh
// 
// Particle blur pixel shader using growable poisson disc
//=============================================================================

//=============================================================================
// Global variables
//=============================================================================
static const int KERNEL_SIZE = 13;

static const float2 BLUR_OFFSETS[KERNEL_SIZE] =
{
	float2(0.0f, 0.0f),
	float2(-0.326212f, -0.40581f),
	float2(-0.840144f, -0.07358f),
	float2(-0.695914f, 0.457137f),
	float2(-0.203345f, 0.620716f),
	float2(0.96234f, -0.194983f),
	float2(0.473434f, -0.480026f),
	float2(0.519456f, 0.767022f),
	float2(0.185461f, -0.893124f),
	float2(0.507431f, 0.064425f),
	float2(0.89642f, 0.412458f),
	float2(-0.32194f, -0.932615f),
	float2(-0.791559f, -0.59771f)
};

float4		vTexelSize;

//=============================================================================
// Vertex shader output structure
//=============================================================================
struct VS_OUTPUT
{
	float4 Color0         : COLOR0;
	float4 Texcoord0      : TEXCOORD0;
	float4 PositionScreen : TEXCOORD1;
};

//=============================================================================
// Pixel shader input structure
//=============================================================================
struct PS_OUTPUT
{
	float4 Color : COLOR;
};

sampler blur;
sampler scene;

//=============================================================================
// Pixel Shader
//=============================================================================
PS_OUTPUT PS( VS_OUTPUT In )
{
	PS_OUTPUT Out;
	
	float4 cBlur = tex2D(blur, In.Texcoord0.xy);
	
	float2 vSceneTexcoord = In.PositionScreen.xy / In.PositionScreen.w;
	
	float fRadius = cBlur.r * In.Texcoord0.w;
	
	float4 cAccum = 0.0f;
	
	[unroll(KERNEL_SIZE)] for (int i = 0; i < KERNEL_SIZE; i++)
	{
		float2 vTapTexcoord = vSceneTexcoord + vTexelSize.xy * BLUR_OFFSETS[i] * fRadius;
		cAccum += tex2D(scene, vTapTexcoord);
	}
	
	cAccum /= KERNEL_SIZE;
	
	Out.Color.rgb = cAccum.rgb;
	Out.Color.a = cBlur.a;
	Out.Color *= In.Color0;
	
	return Out;
}

