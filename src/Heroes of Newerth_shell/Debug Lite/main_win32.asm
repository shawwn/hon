; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\code\hon\src\shell\main_win32.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_hInstance@@3PAUHINSTANCE__@@A		; g_hInstance
PUBLIC	?hConWindow@@3PAUHWND__@@A			; hConWindow
_BSS	SEGMENT
?g_hInstance@@3PAUHINSTANCE__@@A DD 01H DUP (?)		; g_hInstance
?hConWindow@@3PAUHWND__@@A DD 01H DUP (?)		; hConWindow
_BSS	ENDS
PUBLIC	??_C@_1BK@NKLNEEAL@?$AAW?$AAM?$AA_?$AAS?$AAY?$AAS?$AAC?$AAH?$AAA?$AAR?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@EGFLIGMM@?$AAC?$AAH?$AAA?$AAR?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_13MCLHKIEA@?$AA?$FL?$AA?$AA@		; `string'
PUBLIC	??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@		; `string'
PUBLIC	??6CConsoleStream@@QAEAAV0@D@Z			; CConsoleStream::operator<<
PUBLIC	??6CConsoleStream@@QAEAAV0@PBD@Z		; CConsoleStream::operator<<
PUBLIC	??_C@_1BA@MOBKFND@?$AAK?$AAE?$AAY?$AAU?$AAP?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z ; XtoW
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??6CConsoleStream@@QAEAAV0@_W@Z			; CConsoleStream::operator<<
PUBLIC	??_C@_1BE@MEBLBOFB@?$AAK?$AAE?$AAY?$AAD?$AAO?$AAW?$AAN?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??1?$CRect@H@@QAE@XZ				; CRect<int>::~CRect<int>
PUBLIC	??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z	; CConsoleStream::operator<<
PUBLIC	??_C@_1CA@NNBPKMNG@?$AAW?$AAM?$AA_?$AAM?$AAO?$AAU?$AAS?$AAE?$AAW?$AAH?$AAE?$AAE?$AAL?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@OCDJJFJA@?$AAX?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@CJHFOOKK@?$AAM?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@LFCMDFKO@?$AAR?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
PUBLIC	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
PUBLIC	??6CConsoleStream@@QAEAAV0@H@Z			; CConsoleStream::operator<<
PUBLIC	??6CConsoleStream@@QAEAAV0@I@Z			; CConsoleStream::operator<<
PUBLIC	??6CConsoleStream@@QAEAAV0@PB_W@Z		; CConsoleStream::operator<<
PUBLIC	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
PUBLIC	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z	; CConsole::operator<<
PUBLIC	??_C@_1BE@EMBCNFOM@?$AAL?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
PUBLIC	??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_15CMBHNMLL@?$AA?5?$AA?$CI?$AA?$AA@	; `string'
PUBLIC	??_C@_13DEFPDAGF@?$AA?0?$AA?$AA@		; `string'
PUBLIC	??_C@_13DIBMAFH@?$AA?$CJ?$AA?$AA@		; `string'
PUBLIC	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
PUBLIC	??B?$CCvar@_N_N@@QBE_NXZ			; CCvar<bool,bool>::operator bool
PUBLIC	??_C@_19CKOIIPIC@?$AAq?$AAu?$AAi?$AAt?$AA?$AA@	; `string'
PUBLIC	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::push_back
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z	; System_MainWndProc
EXTRN	__imp_?ShowCursor@CVid@@QAEX_N@Z:PROC
EXTRN	__imp_?AddEvent@CInput@@QAEX_W@Z:PROC
EXTRN	__imp_?GetButton@CSystem@@QAE?AW4EButton@@II@Z:PROC
EXTRN	__imp_?GetCursorPos@CInput@@QAE?AV?$CVec2@M@@XZ:PROC
EXTRN	__imp_?GetWindowArea@CSystem@@QAE?AV?$CRect@H@@XZ:PROC
EXTRN	__imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z:PROC
EXTRN	__imp_??0?$CVec2@M@@QAE@MM@Z:PROC
EXTRN	__imp_?Milliseconds@CSystem@@QAEIXZ:PROC
EXTRN	__imp_?Execute@CConsole@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
EXTRN	__imp_?g_pConsole@@3PAVCConsole@@A:DWORD
EXTRN	__imp_?FileDropNotify@CHost@@QAEXABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:PROC
EXTRN	__imp_?g_pHost@@3PAVCHost@@A:DWORD
EXTRN	__imp__DragFinish@4:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__DragQueryFileW@16:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__DefWindowProcW@16:PROC
EXTRN	__imp_?UnsetMouseClipping@CSystem@@QAEXXZ:PROC
EXTRN	__imp_?SetCursor@CVid@@QAEXI@Z:PROC
EXTRN	__imp_?pVid@@3PAVCVid@@A:DWORD
EXTRN	__imp_?GetCursor@CInput@@QAEIXZ:PROC
EXTRN	__imp_?g_pInput@@3PAVCInput@@A:DWORD
EXTRN	__imp_?SetupKeystates@CSystem@@QAEXXZ:PROC
EXTRN	__imp_?SetFocus@CSystem@@QAEX_N@Z:PROC
EXTRN	__imp_?K2System@@3AAVCSystem@@A:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?ps@?1??System_MainWndProc@@YGJPAUHWND__@@IIJ@Z@4UtagPAINTSTRUCT@@A DB 040H DUP (?) ; `System_MainWndProc'::`2'::ps
_BSS	ENDS
;	COMDAT ??_C@_1BK@NKLNEEAL@?$AAW?$AAM?$AA_?$AAS?$AAY?$AAS?$AAC?$AAH?$AAA?$AAR?$AA?3?$AA?5?$AA?$AA@
; File c:\code\hon\src\shell\main_win32.cpp
CONST	SEGMENT
??_C@_1BK@NKLNEEAL@?$AAW?$AAM?$AA_?$AAS?$AAY?$AAS?$AAC?$AAH?$AAA?$AAR?$AA?3?$AA?5?$AA?$AA@ DB 'W'
	DB	00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H, 'C', 00H
	DB	'H', 00H, 'A', 00H, 'R', 00H, ':', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@EGFLIGMM@?$AAC?$AAH?$AAA?$AAR?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1O@EGFLIGMM@?$AAC?$AAH?$AAA?$AAR?$AA?3?$AA?5?$AA?$AA@ DB 'C', 00H, 'H'
	DB	00H, 'A', 00H, 'R', 00H, ':', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13MCLHKIEA@?$AA?$FL?$AA?$AA@
CONST	SEGMENT
??_C@_13MCLHKIEA@?$AA?$FL?$AA?$AA@ DB '[', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@
CONST	SEGMENT
??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@ DB ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@MOBKFND@?$AAK?$AAE?$AAY?$AAU?$AAP?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@MOBKFND@?$AAK?$AAE?$AAY?$AAU?$AAP?$AA?3?$AA?5?$AA?$AA@ DB 'K', 00H
	DB	'E', 00H, 'Y', 00H, 'U', 00H, 'P', 00H, ':', 00H, ' ', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@MEBLBOFB@?$AAK?$AAE?$AAY?$AAD?$AAO?$AAW?$AAN?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@MEBLBOFB@?$AAK?$AAE?$AAY?$AAD?$AAO?$AAW?$AAN?$AA?3?$AA?5?$AA?$AA@ DB 'K'
	DB	00H, 'E', 00H, 'Y', 00H, 'D', 00H, 'O', 00H, 'W', 00H, 'N', 00H
	DB	':', 00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@NNBPKMNG@?$AAW?$AAM?$AA_?$AAM?$AAO?$AAU?$AAS?$AAE?$AAW?$AAH?$AAE?$AAE?$AAL?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@NNBPKMNG@?$AAW?$AAM?$AA_?$AAM?$AAO?$AAU?$AAS?$AAE?$AAW?$AAH?$AAE?$AAE?$AAL?$AA?3?$AA?5?$AA?$AA@ DB 'W'
	DB	00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H, 'S', 00H
	DB	'E', 00H, 'W', 00H, 'H', 00H, 'E', 00H, 'E', 00H, 'L', 00H, ':'
	DB	00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@OCDJJFJA@?$AAX?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@OCDJJFJA@?$AAX?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@ DB 'X'
	DB	00H, 'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H
	DB	':', 00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@CJHFOOKK@?$AAM?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@CJHFOOKK@?$AAM?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@ DB 'M'
	DB	00H, 'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H
	DB	':', 00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@LFCMDFKO@?$AAR?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@LFCMDFKO@?$AAR?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@ DB 'R'
	DB	00H, 'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H
	DB	':', 00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@EMBCNFOM@?$AAL?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@EMBCNFOM@?$AAL?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@ DB 'L'
	DB	00H, 'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H
	DB	':', 00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_15CMBHNMLL@?$AA?5?$AA?$CI?$AA?$AA@
CONST	SEGMENT
??_C@_15CMBHNMLL@?$AA?5?$AA?$CI?$AA?$AA@ DB ' ', 00H, '(', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13DEFPDAGF@?$AA?0?$AA?$AA@
CONST	SEGMENT
??_C@_13DEFPDAGF@?$AA?0?$AA?$AA@ DB ',', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13DIBMAFH@?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_13DIBMAFH@?$AA?$CJ?$AA?$AA@ DB ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19CKOIIPIC@?$AAq?$AAu?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_19CKOIIPIC@?$AAq?$AAu?$AAi?$AAt?$AA?$AA@ DB 'q', 00H, 'u', 00H, 'i', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z DD 019930522H
	DD	010H
	DD	FLAT:__unwindtable$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$15
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv765 = -688						; size = 4
tv761 = -688						; size = 4
tv757 = -688						; size = 4
tv753 = -688						; size = 4
tv779 = -684						; size = 4
tv777 = -684						; size = 4
tv775 = -684						; size = 4
tv150 = -684						; size = 4
tv774 = -680						; size = 4
tv772 = -680						; size = 4
tv770 = -680						; size = 4
tv768 = -680						; size = 4
tv763 = -680						; size = 4
tv759 = -680						; size = 4
tv755 = -680						; size = 4
tv751 = -680						; size = 4
tv782 = -676						; size = 4
tv781 = -676						; size = 4
tv780 = -676						; size = 4
tv778 = -676						; size = 4
tv776 = -676						; size = 4
tv466 = -676						; size = 4
tv160 = -676						; size = 4
tv95 = -676						; size = 4
tv64 = -676						; size = 4
$T121576 = -672						; size = 4
$T121577 = -668						; size = 32
$T121578 = -636						; size = 4
$T121579 = -632						; size = 32
$T121580 = -600						; size = 32
$T121581 = -568						; size = 32
$T121582 = -536						; size = 8
$T121583 = -528						; size = 32
$T121584 = -496						; size = 32
$T121585 = -464						; size = 8
$T121586 = -456						; size = 32
$T121587 = -424						; size = 32
$T121588 = -392						; size = 8
$T121589 = -384						; size = 32
$T121590 = -352						; size = 32
$T121591 = -320						; size = 8
$T121592 = -312						; size = 8
$T121593 = -304						; size = 32
$T121594 = -272						; size = 8
$T121595 = -264						; size = 32
$T121596 = -232						; size = 8
$T121597 = -224						; size = 32
$T121598 = -192						; size = 32
_i$114947 = -96						; size = 4
_i$114930 = -92						; size = 4
_i$114921 = -88						; size = 4
_i$114915 = -84						; size = 4
_v2Pos$114911 = -80					; size = 8
_recWindow$114902 = -72					; size = 16
_iValue$114900 = -56					; size = 4
_uiLen$114827 = -52					; size = 4
_szFile$114826 = -48					; size = 4
_i$114822 = -44						; size = 4
_vsFiles$114821 = -40					; size = 20
_iCount$114820 = -20					; size = 4
_hDrop$114819 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z PROC		; System_MainWndProc, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 676				; 000002a4H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 50   : 	static PAINTSTRUCT ps;
; 51   : 
; 52   : 	switch (uMsg)

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 256		; 00000100H
	ja	SHORT $LN53@System_Mai
	cmp	DWORD PTR tv64[ebp], 256		; 00000100H
	je	$LN17@System_Mai
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 31			; 0000001fH
	ja	$LN1@System_Mai
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN72@System_Mai[edx]
	jmp	DWORD PTR $LN74@System_Mai[eax*4]
$LN53@System_Mai:
	cmp	DWORD PTR tv64[ebp], 514		; 00000202H
	ja	SHORT $LN54@System_Mai
	cmp	DWORD PTR tv64[ebp], 513		; 00000201H
	jae	$LN38@System_Mai
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 257				; 00000101H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 5
	ja	$LN1@System_Mai
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN75@System_Mai[edx*4]
$LN54@System_Mai:
	cmp	DWORD PTR tv64[ebp], 524		; 0000020cH
	ja	SHORT $LN55@System_Mai
	cmp	DWORD PTR tv64[ebp], 523		; 0000020bH
	jae	$LN32@System_Mai
	mov	eax, DWORD PTR tv64[ebp]
	sub	eax, 516				; 00000204H
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 6
	ja	$LN1@System_Mai
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN76@System_Mai[ecx*4]
$LN55@System_Mai:
	cmp	DWORD PTR tv64[ebp], 563		; 00000233H
	je	$LN43@System_Mai
	cmp	DWORD PTR tv64[ebp], 786		; 00000312H
	je	$LN3@System_Mai
	jmp	$LN1@System_Mai
$LN48@System_Mai:

; 53   : 	{
; 54   : 		case WM_ACTIVATE:
; 55   : 			if (LOWORD(wParam))

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	test	ecx, ecx
	je	SHORT $LN47@System_Mai

; 56   : 			{
; 57   : 				K2System.SetFocus(true);

	push	1
	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?SetFocus@CSystem@@QAEX_N@Z

; 58   : 				K2System.SetupKeystates();

	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?SetupKeystates@CSystem@@QAEXXZ

; 59   : 				Vid.SetCursor(Input.GetCursor());

	mov	eax, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?GetCursor@CInput@@QAEIXZ
	push	eax
	mov	ecx, DWORD PTR __imp_?pVid@@3PAVCVid@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?SetCursor@CVid@@QAEXI@Z

; 60   : 			}
; 61   : 			else

	jmp	SHORT $LN46@System_Mai
$LN47@System_Mai:

; 62   : 			{
; 63   : 				K2System.SetFocus(false);

	push	0
	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?SetFocus@CSystem@@QAEX_N@Z

; 64   : 				K2System.SetupKeystates();

	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?SetupKeystates@CSystem@@QAEXXZ

; 65   : 				K2System.UnsetMouseClipping();

	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?UnsetMouseClipping@CSystem@@QAEXXZ
$LN46@System_Mai:

; 66   : 			}
; 67   : 			return DefWindowProc(hWnd, uMsg, wParam, lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DefWindowProcW@16
	jmp	$LN49@System_Mai
$LN45@System_Mai:

; 68   : 
; 69   : 		case WM_CREATE:
; 70   : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN44@System_Mai:

; 71   : 
; 72   : 		case WM_PAINT:
; 73   : 			BeginPaint(hWnd, &ps);

	push	OFFSET ?ps@?1??System_MainWndProc@@YGJPAUHWND__@@IIJ@Z@4UtagPAINTSTRUCT@@A
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__BeginPaint@8

; 74   : 			EndPaint(hWnd, &ps);

	push	OFFSET ?ps@?1??System_MainWndProc@@YGJPAUHWND__@@IIJ@Z@4UtagPAINTSTRUCT@@A
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__EndPaint@8

; 75   : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN43@System_Mai:

; 76   : 
; 77   : 		case WM_DROPFILES:
; 78   : 			{
; 79   : 				HDROP	hDrop = HDROP(wParam);

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR _hDrop$114819[ebp], eax

; 80   : 				int iCount(DragQueryFile(hDrop, 0xFFFFFFFF, 0, 0));

	push	0
	push	0
	push	-1
	mov	eax, DWORD PTR _hDrop$114819[ebp]
	push	eax
	call	DWORD PTR __imp__DragQueryFileW@16
	mov	DWORD PTR _iCount$114820[ebp], eax

; 81   : 				tsvector vsFiles;

	lea	ecx, DWORD PTR _vsFiles$114821[ebp]
	call	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 82   : 				for (int i(0); i < iCount; ++i)

	mov	DWORD PTR _i$114822[ebp], 0
	jmp	SHORT $LN42@System_Mai
$LN41@System_Mai:
	mov	eax, DWORD PTR _i$114822[ebp]
	add	eax, 1
	mov	DWORD PTR _i$114822[ebp], eax
$LN42@System_Mai:
	mov	eax, DWORD PTR _i$114822[ebp]
	cmp	eax, DWORD PTR _iCount$114820[ebp]
	jge	$LN40@System_Mai

; 83   : 				{
; 84   : 					TCHAR *szFile(NULL);

	mov	DWORD PTR _szFile$114826[ebp], 0

; 85   : 					uint uiLen(DragQueryFile(hDrop, i, NULL, 0) + 1);

	push	0
	push	0
	mov	eax, DWORD PTR _i$114822[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDrop$114819[ebp]
	push	ecx
	call	DWORD PTR __imp__DragQueryFileW@16
	add	eax, 1
	mov	DWORD PTR _uiLen$114827[ebp], eax

; 86   : 					szFile = new TCHAR[uiLen];

	xor	ecx, ecx
	mov	eax, DWORD PTR _uiLen$114827[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T121576[ebp], eax
	mov	eax, DWORD PTR $T121576[ebp]
	mov	DWORD PTR _szFile$114826[ebp], eax

; 87   : 					DragQueryFile(hDrop, i, szFile, uiLen);

	mov	eax, DWORD PTR _uiLen$114827[ebp]
	push	eax
	mov	ecx, DWORD PTR _szFile$114826[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$114822[ebp]
	push	edx
	mov	eax, DWORD PTR _hDrop$114819[ebp]
	push	eax
	call	DWORD PTR __imp__DragQueryFileW@16

; 88   : 					vsFiles.push_back(szFile);

	mov	eax, DWORD PTR _szFile$114826[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121577[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T121577[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vsFiles$114821[ebp]
	call	?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T121577[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 89   : 					delete[] szFile;

	mov	eax, DWORD PTR _szFile$114826[ebp]
	mov	DWORD PTR $T121578[ebp], eax
	mov	ecx, DWORD PTR $T121578[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 90   : 				}

	jmp	$LN41@System_Mai
$LN40@System_Mai:

; 91   : 				DragFinish(hDrop);

	mov	eax, DWORD PTR _hDrop$114819[ebp]
	push	eax
	call	DWORD PTR __imp__DragFinish@4

; 92   : 				Host.FileDropNotify(vsFiles);

	lea	eax, DWORD PTR _vsFiles$114821[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?g_pHost@@3PAVCHost@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?FileDropNotify@CHost@@QAEXABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z

; 93   : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _vsFiles$114821[ebp]
	call	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ

; 94   : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN39@System_Mai:

; 95   : 
; 96   : 		case WM_CLOSE:
; 97   : 			Console.Execute(_T("quit"));

	push	OFFSET ??_C@_19CKOIIPIC@?$AAq?$AAu?$AAi?$AAt?$AA?$AA@
	lea	ecx, DWORD PTR $T121579[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	lea	eax, DWORD PTR $T121579[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?Execute@CConsole@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T121579[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 98   : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN38@System_Mai:

; 99   : 
; 100  : 		case WM_LBUTTONUP:
; 101  : 		case WM_LBUTTONDOWN:
; 102  : 			if (key_debugEvents)

	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??B?$CCvar@_N_N@@QBE_NXZ		; CCvar<bool,bool>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN37@System_Mai

; 103  : 				Console << _T("LBUTTON: ") << INT_HEX_STR(wParam) << _T(" ") << INT_HEX_STR(uMsg) << _T(" ") << K2System.Milliseconds() << _T(" (") << GET_X_LPARAM(lParam) << _T(",") << GET_Y_LPARAM(lParam) << _T(")") << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	push	OFFSET ??_C@_13DIBMAFH@?$AA?$CJ?$AA?$AA@
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	movsx	edx, cx
	push	edx
	push	OFFSET ??_C@_13DEFPDAGF@?$AA?0?$AA?$AA@
	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	push	ecx
	push	OFFSET ??_C@_15CMBHNMLL@?$AA?5?$AA?$CI?$AA?$AA@
	mov	edx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?Milliseconds@CSystem@@QAEIXZ
	push	eax
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	eax, DWORD PTR _uMsg$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121581[ebp]
	push	ecx
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv160[ebp], eax
	mov	edx, DWORD PTR tv160[ebp]
	mov	DWORD PTR tv751[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv751[ebp]
	push	eax
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T121580[ebp]
	push	edx
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv753[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR tv753[ebp]
	push	ecx
	push	OFFSET ??_C@_1BE@EMBCNFOM@?$AAL?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@
	mov	edx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [edx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@I@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@H@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@H@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T121580[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T121581[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
$LN37@System_Mai:

; 104  : 			Input.AddEvent(BUTTON_MOUSEL, uMsg == WM_LBUTTONDOWN, CVec2f(float(LOWORD(lParam)), float(HIWORD(lParam))));

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T121582[ebp]
	call	DWORD PTR __imp_??0?$CVec2@M@@QAE@MM@Z
	push	eax
	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	sete	cl
	push	ecx
	push	311					; 00000137H
	mov	edx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z

; 105  : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN36@System_Mai:

; 106  : 
; 107  : 		case WM_RBUTTONUP:
; 108  : 		case WM_RBUTTONDOWN:
; 109  : 			if (key_debugEvents)

	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??B?$CCvar@_N_N@@QBE_NXZ		; CCvar<bool,bool>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN35@System_Mai

; 110  : 				Console << _T("RBUTTON: ") << INT_HEX_STR(wParam) << _T(" ") << INT_HEX_STR(uMsg) << _T(" ") << K2System.Milliseconds() << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	mov	ecx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?Milliseconds@CSystem@@QAEIXZ
	push	eax
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	lea	eax, DWORD PTR $T121584[ebp]
	push	eax
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv95[ebp], eax
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv755[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR tv755[ebp]
	push	edx
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121583[ebp]
	push	ecx
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv775[ebp], eax
	mov	edx, DWORD PTR tv775[ebp]
	mov	DWORD PTR tv757[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR tv757[ebp]
	push	eax
	push	OFFSET ??_C@_1BE@LFCMDFKO@?$AAR?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@I@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T121583[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T121584[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
$LN35@System_Mai:

; 111  : 			Input.AddEvent(BUTTON_MOUSER, uMsg == WM_RBUTTONDOWN, CVec2f(float(LOWORD(lParam)), float(HIWORD(lParam))));

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T121585[ebp]
	call	DWORD PTR __imp_??0?$CVec2@M@@QAE@MM@Z
	push	eax
	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	sete	cl
	push	ecx
	push	312					; 00000138H
	mov	edx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z

; 112  : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN34@System_Mai:

; 113  : 
; 114  : 		case WM_MBUTTONUP:
; 115  : 		case WM_MBUTTONDOWN:
; 116  : 			if (key_debugEvents)

	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??B?$CCvar@_N_N@@QBE_NXZ		; CCvar<bool,bool>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN33@System_Mai

; 117  : 				Console << _T("MBUTTON: ") << INT_HEX_STR(wParam) << _T(" ") << INT_HEX_STR(uMsg) << _T(" ") << K2System.Milliseconds() << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	mov	ecx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?Milliseconds@CSystem@@QAEIXZ
	push	eax
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	lea	eax, DWORD PTR $T121587[ebp]
	push	eax
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv776[ebp], eax
	mov	ecx, DWORD PTR tv776[ebp]
	mov	DWORD PTR tv759[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR tv759[ebp]
	push	edx
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121586[ebp]
	push	ecx
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv777[ebp], eax
	mov	edx, DWORD PTR tv777[ebp]
	mov	DWORD PTR tv761[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR tv761[ebp]
	push	eax
	push	OFFSET ??_C@_1BE@CJHFOOKK@?$AAM?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@I@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T121586[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T121587[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
$LN33@System_Mai:

; 118  : 			Input.AddEvent(BUTTON_MOUSEM, uMsg == WM_MBUTTONDOWN, CVec2f(float(LOWORD(lParam)), float(HIWORD(lParam))));

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T121588[ebp]
	call	DWORD PTR __imp_??0?$CVec2@M@@QAE@MM@Z
	push	eax
	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	sete	cl
	push	ecx
	push	313					; 00000139H
	mov	edx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z

; 119  : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN32@System_Mai:

; 120  : 
; 121  : 		case WM_XBUTTONUP:
; 122  : 		case WM_XBUTTONDOWN:
; 123  : 			if (key_debugEvents)

	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??B?$CCvar@_N_N@@QBE_NXZ		; CCvar<bool,bool>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN31@System_Mai

; 124  : 				Console << _T("XBUTTON: ") << INT_HEX_STR(wParam) << _T(" ") << INT_HEX_STR(uMsg) << _T(" ") << K2System.Milliseconds() << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	mov	ecx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?Milliseconds@CSystem@@QAEIXZ
	push	eax
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	lea	eax, DWORD PTR $T121590[ebp]
	push	eax
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv778[ebp], eax
	mov	ecx, DWORD PTR tv778[ebp]
	mov	DWORD PTR tv763[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR tv763[ebp]
	push	edx
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121589[ebp]
	push	ecx
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv779[ebp], eax
	mov	edx, DWORD PTR tv779[ebp]
	mov	DWORD PTR tv765[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR tv765[ebp]
	push	eax
	push	OFFSET ??_C@_1BE@OCDJJFJA@?$AAX?$AAB?$AAU?$AAT?$AAT?$AAO?$AAN?$AA?3?$AA?5?$AA?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@I@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T121589[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T121590[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
$LN31@System_Mai:

; 125  : 			if (HIWORD(wParam) & XBUTTON1)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	and	ecx, 1
	je	SHORT $LN30@System_Mai

; 126  : 				Input.AddEvent(BUTTON_MOUSEX1, uMsg == WM_XBUTTONDOWN, CVec2f(float(LOWORD(lParam)), float(HIWORD(lParam))));

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T121591[ebp]
	call	DWORD PTR __imp_??0?$CVec2@M@@QAE@MM@Z
	push	eax
	cmp	DWORD PTR _uMsg$[ebp], 523		; 0000020bH
	sete	cl
	push	ecx
	push	318					; 0000013eH
	mov	edx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z
$LN30@System_Mai:

; 127  : 			if (HIWORD(wParam) & XBUTTON2)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	and	ecx, 2
	je	SHORT $LN29@System_Mai

; 128  : 				Input.AddEvent(BUTTON_MOUSEX2, uMsg == WM_XBUTTONDOWN, CVec2f(float(LOWORD(lParam)), float(HIWORD(lParam))));

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T121592[ebp]
	call	DWORD PTR __imp_??0?$CVec2@M@@QAE@MM@Z
	push	eax
	cmp	DWORD PTR _uMsg$[ebp], 523		; 0000020bH
	sete	cl
	push	ecx
	push	319					; 0000013fH
	mov	edx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z
$LN29@System_Mai:

; 129  : 			return TRUE;

	mov	eax, 1
	jmp	$LN49@System_Mai
$LN28@System_Mai:

; 130  : 
; 131  : 		case WM_MOUSEWHEEL:
; 132  : 			{
; 133  : 				int iValue(GET_WHEEL_DELTA_WPARAM(wParam) / WHEEL_DELTA);

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movsx	eax, ax
	cdq
	mov	ecx, 120				; 00000078H
	idiv	ecx
	mov	DWORD PTR _iValue$114900[ebp], eax

; 134  : 				CRecti recWindow(K2System.GetWindowArea());

	lea	eax, DWORD PTR _recWindow$114902[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetWindowArea@CSystem@@QAE?AV?$CRect@H@@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH

; 135  : 				CVec2f v2Pos(float(GET_X_LPARAM(lParam) - recWindow.left), float(GET_Y_LPARAM(lParam) - recWindow.top));

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	movsx	ecx, ax
	sub	ecx, DWORD PTR _recWindow$114902[ebp+4]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	sub	eax, DWORD PTR _recWindow$114902[ebp]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _v2Pos$114911[ebp]
	call	DWORD PTR __imp_??0?$CVec2@M@@QAE@MM@Z

; 136  : 
; 137  : 				if (key_debugEvents)

	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??B?$CCvar@_N_N@@QBE_NXZ		; CCvar<bool,bool>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@System_Mai

; 138  : 					Console << _T("WM_MOUSEWHEEL: ") << iValue << _T(" ") << v2Pos << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	lea	ecx, DWORD PTR _v2Pos$114911[ebp]
	push	ecx
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	mov	edx, DWORD PTR _iValue$114900[ebp]
	push	edx
	push	OFFSET ??_C@_1CA@NNBPKMNG@?$AAW?$AAM?$AA_?$AAM?$AAO?$AAU?$AAS?$AAE?$AAW?$AAH?$AAE?$AAE?$AAL?$AA?3?$AA?5?$AA?$AA@
	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@H@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
$LN27@System_Mai:

; 139  : 
; 140  : 				if (iValue > 0)

	cmp	DWORD PTR _iValue$114900[ebp], 0
	jle	SHORT $LN26@System_Mai

; 141  : 				{
; 142  : 					for (int i(0); i < iValue; ++i)

	mov	DWORD PTR _i$114915[ebp], 0
	jmp	SHORT $LN25@System_Mai
$LN24@System_Mai:
	mov	eax, DWORD PTR _i$114915[ebp]
	add	eax, 1
	mov	DWORD PTR _i$114915[ebp], eax
$LN25@System_Mai:
	mov	eax, DWORD PTR _i$114915[ebp]
	cmp	eax, DWORD PTR _iValue$114900[ebp]
	jge	SHORT $LN23@System_Mai

; 143  : 					{
; 144  : 						Input.AddEvent(BUTTON_WHEELUP, true, v2Pos);

	lea	eax, DWORD PTR _v2Pos$114911[ebp]
	push	eax
	push	1
	push	314					; 0000013aH
	mov	ecx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z

; 145  : 						Input.AddEvent(BUTTON_WHEELUP, false, v2Pos);

	lea	eax, DWORD PTR _v2Pos$114911[ebp]
	push	eax
	push	0
	push	314					; 0000013aH
	mov	ecx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z

; 146  : 					}

	jmp	SHORT $LN24@System_Mai
$LN23@System_Mai:

; 147  : 				}
; 148  : 				else if (iValue < 0)

	jmp	SHORT $LN18@System_Mai
$LN26@System_Mai:
	cmp	DWORD PTR _iValue$114900[ebp], 0
	jge	SHORT $LN18@System_Mai

; 149  : 				{
; 150  : 					for (int i(0); i < -iValue; ++i)

	mov	DWORD PTR _i$114921[ebp], 0
	jmp	SHORT $LN20@System_Mai
$LN19@System_Mai:
	mov	eax, DWORD PTR _i$114921[ebp]
	add	eax, 1
	mov	DWORD PTR _i$114921[ebp], eax
$LN20@System_Mai:
	mov	eax, DWORD PTR _iValue$114900[ebp]
	neg	eax
	cmp	DWORD PTR _i$114921[ebp], eax
	jge	SHORT $LN18@System_Mai

; 151  : 					{
; 152  : 						Input.AddEvent(BUTTON_WHEELDOWN, true, v2Pos);

	lea	eax, DWORD PTR _v2Pos$114911[ebp]
	push	eax
	push	1
	push	315					; 0000013bH
	mov	ecx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z

; 153  : 						Input.AddEvent(BUTTON_WHEELDOWN, false, v2Pos);

	lea	eax, DWORD PTR _v2Pos$114911[ebp]
	push	eax
	push	0
	push	315					; 0000013bH
	mov	ecx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z

; 154  : 					}

	jmp	SHORT $LN19@System_Mai
$LN18@System_Mai:

; 155  : 				}
; 156  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _recWindow$114902[ebp]
	call	??1?$CRect@H@@QAE@XZ			; CRect<int>::~CRect<int>

; 157  : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN17@System_Mai:

; 158  : 
; 159  : 		case WM_KEYDOWN:
; 160  : 		case WM_SYSKEYDOWN:
; 161  : 			if (key_debugEvents)

	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??B?$CCvar@_N_N@@QBE_NXZ		; CCvar<bool,bool>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN16@System_Mai

; 162  : 				Console << _T("KEYDOWN: ") << INT_HEX_STR(wParam) << _T(" ") << (TCHAR)wParam << _T(" ") << K2System.Milliseconds() << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	mov	ecx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?Milliseconds@CSystem@@QAEIXZ
	push	eax
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	mov	dx, WORD PTR _wParam$[ebp]
	push	edx
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121593[ebp]
	push	ecx
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv466[ebp], eax
	mov	edx, DWORD PTR tv466[ebp]
	mov	DWORD PTR tv768[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	eax, DWORD PTR tv768[ebp]
	push	eax
	push	OFFSET ??_C@_1BE@MEBLBOFB@?$AAK?$AAE?$AAY?$AAD?$AAO?$AAW?$AAN?$AA?3?$AA?5?$AA?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@_W@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@I@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T121593[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
$LN16@System_Mai:

; 163  : 			for (int i(0); i < (lParam & 0xffff); ++i) Input.AddEvent(K2System.GetButton(wParam, lParam), true, Input.GetCursorPos());

	mov	DWORD PTR _i$114930[ebp], 0
	jmp	SHORT $LN15@System_Mai
$LN14@System_Mai:
	mov	eax, DWORD PTR _i$114930[ebp]
	add	eax, 1
	mov	DWORD PTR _i$114930[ebp], eax
$LN15@System_Mai:
	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	cmp	DWORD PTR _i$114930[ebp], eax
	jge	SHORT $LN13@System_Mai
	lea	eax, DWORD PTR $T121594[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetCursorPos@CInput@@QAE?AV?$CVec2@M@@XZ
	push	eax
	push	1
	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetButton@CSystem@@QAE?AW4EButton@@II@Z
	push	eax
	mov	edx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z
	jmp	SHORT $LN14@System_Mai
$LN13@System_Mai:

; 164  : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN12@System_Mai:

; 165  : 
; 166  : 		case WM_KEYUP:
; 167  : 		case WM_SYSKEYUP:
; 168  : 			if (key_debugEvents)

	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??B?$CCvar@_N_N@@QBE_NXZ		; CCvar<bool,bool>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN11@System_Mai

; 169  : 				Console << _T("KEYUP: ") << XtoA(wParam, FMT_PADZERO, 10, 16) << " " << (char)wParam << _T(" ") << K2System.Milliseconds() << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	mov	ecx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?Milliseconds@CSystem@@QAEIXZ
	push	eax
	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	mov	dl, BYTE PTR _wParam$[ebp]
	push	edx
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121595[ebp]
	push	ecx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z ; XtoW
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv780[ebp], eax
	mov	edx, DWORD PTR tv780[ebp]
	mov	DWORD PTR tv770[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	eax, DWORD PTR tv770[ebp]
	push	eax
	push	OFFSET ??_C@_1BA@MOBKFND@?$AAK?$AAE?$AAY?$AAU?$AAP?$AA?3?$AA?5?$AA?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PBD@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@D@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@I@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T121595[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN11@System_Mai:

; 170  : 			Input.AddEvent(K2System.GetButton(wParam, lParam), false, Input.GetCursorPos());

	lea	eax, DWORD PTR $T121596[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetCursorPos@CInput@@QAE?AV?$CVec2@M@@XZ
	push	eax
	push	0
	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetButton@CSystem@@QAE?AW4EButton@@II@Z
	push	eax
	mov	edx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEXW4EButton@@_NABV?$CVec2@M@@@Z

; 171  : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN10@System_Mai:

; 172  : 
; 173  : 		case WM_CHAR:
; 174  : 			if (key_debugEvents)

	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??B?$CCvar@_N_N@@QBE_NXZ		; CCvar<bool,bool>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN9@System_Mai

; 175  : 				Console << _T("CHAR: ") << TCHAR(wParam) << _T("[") << INT_HEX_STR(wParam) << _T("]") << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	push	OFFSET ??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T121597[ebp]
	push	edx
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv781[ebp], eax
	mov	eax, DWORD PTR tv781[ebp]
	mov	DWORD PTR tv772[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR tv772[ebp]
	push	ecx
	push	OFFSET ??_C@_13MCLHKIEA@?$AA?$FL?$AA?$AA@
	mov	dx, WORD PTR _wParam$[ebp]
	push	edx
	push	OFFSET ??_C@_1O@EGFLIGMM@?$AAC?$AAH?$AAA?$AAR?$AA?3?$AA?5?$AA?$AA@
	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@_W@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T121597[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
$LN9@System_Mai:

; 176  : 			for (int i(0); i < (lParam & 0xffff); ++i) Input.AddEvent(TCHAR(wParam));

	mov	DWORD PTR _i$114947[ebp], 0
	jmp	SHORT $LN8@System_Mai
$LN7@System_Mai:
	mov	eax, DWORD PTR _i$114947[ebp]
	add	eax, 1
	mov	DWORD PTR _i$114947[ebp], eax
$LN8@System_Mai:
	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	cmp	DWORD PTR _i$114947[ebp], eax
	jge	SHORT $LN6@System_Mai
	mov	ax, WORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?g_pInput@@3PAVCInput@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?AddEvent@CInput@@QAEX_W@Z
	jmp	SHORT $LN7@System_Mai
$LN6@System_Mai:

; 177  : 			return 0;

	xor	eax, eax
	jmp	$LN49@System_Mai
$LN5@System_Mai:

; 178  : 
; 179  : 		case WM_SYSCHAR:
; 180  : 			if (key_debugEvents)

	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??B?$CCvar@_N_N@@QBE_NXZ		; CCvar<bool,bool>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN4@System_Mai

; 181  : 				Console << _T("WM_SYSCHAR: ") << TCHAR(wParam) << _T("[") << INT_HEX_STR(wParam) << _T("]") << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	push	OFFSET ??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@
	push	16					; 00000010H
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T121598[ebp]
	push	edx
	call	?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; XtoS
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv782[ebp], eax
	mov	eax, DWORD PTR tv782[ebp]
	mov	DWORD PTR tv774[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR tv774[ebp]
	push	ecx
	push	OFFSET ??_C@_13MCLHKIEA@?$AA?$FL?$AA?$AA@
	mov	dx, WORD PTR _wParam$[ebp]
	push	edx
	push	OFFSET ??_C@_1BK@NKLNEEAL@?$AAW?$AAM?$AA_?$AAS?$AAY?$AAS?$AAC?$AAH?$AAA?$AAR?$AA?3?$AA?5?$AA?$AA@
	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@_W@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T121598[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
$LN4@System_Mai:

; 182  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN49@System_Mai
$LN3@System_Mai:

; 183  : 
; 184  : 		case WM_HOTKEY:
; 185  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN49@System_Mai
$LN2@System_Mai:

; 186  : 
; 187  : 		case WM_SETCURSOR:
; 188  : 			Vid.ShowCursor(true);

	push	1
	mov	eax, DWORD PTR __imp_?pVid@@3PAVCVid@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?ShowCursor@CVid@@QAEX_N@Z

; 189  : 			return DefWindowProc(hWnd, uMsg, wParam, lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DefWindowProcW@16
	jmp	SHORT $LN49@System_Mai
$LN1@System_Mai:

; 190  : 
; 191  : 		default:
; 192  :             return DefWindowProc(hWnd, uMsg, wParam, lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DefWindowProcW@16
$LN49@System_Mai:

; 193  : 	}
; 194  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN74@System_Mai:
	DD	$LN45@System_Mai
	DD	$LN48@System_Mai
	DD	$LN44@System_Mai
	DD	$LN39@System_Mai
	DD	$LN2@System_Mai
	DD	$LN1@System_Mai
$LN72@System_Mai:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
$LN75@System_Mai:
	DD	$LN12@System_Mai
	DD	$LN10@System_Mai
	DD	$LN1@System_Mai
	DD	$LN17@System_Mai
	DD	$LN12@System_Mai
	DD	$LN5@System_Mai
$LN76@System_Mai:
	DD	$LN36@System_Mai
	DD	$LN36@System_Mai
	DD	$LN1@System_Mai
	DD	$LN34@System_Mai
	DD	$LN34@System_Mai
	DD	$LN1@System_Mai
	DD	$LN28@System_Mai
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$0:
	lea	ecx, DWORD PTR _vsFiles$114821[ebp]
	jmp	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$1:
	lea	ecx, DWORD PTR $T121577[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$2:
	lea	ecx, DWORD PTR $T121579[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$3:
	lea	ecx, DWORD PTR $T121581[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$4:
	lea	ecx, DWORD PTR $T121580[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$5:
	lea	ecx, DWORD PTR $T121584[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$6:
	lea	ecx, DWORD PTR $T121583[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$7:
	lea	ecx, DWORD PTR $T121587[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$8:
	lea	ecx, DWORD PTR $T121586[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$9:
	lea	ecx, DWORD PTR $T121590[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$10:
	lea	ecx, DWORD PTR $T121589[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$11:
	lea	ecx, DWORD PTR _recWindow$114902[ebp]
	jmp	??1?$CRect@H@@QAE@XZ			; CRect<int>::~CRect<int>
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$12:
	lea	ecx, DWORD PTR $T121593[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$13:
	lea	ecx, DWORD PTR $T121595[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$14:
	lea	ecx, DWORD PTR $T121597[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z$15:
	lea	ecx, DWORD PTR $T121598[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__ehhandler$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-692]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z ENDP		; System_MainWndProc
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??_C@_1BI@HHMDBMPD@?$AAS?$AAe?$AAr?$AAv?$AAe?$AAr?$AAC?$AAh?$AAa?$AAt?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z ; QuoteStr<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??_C@_15NAHPJHLP@?$AA?$DO?$AA?5?$AA?$AA@	; `string'
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
PUBLIC	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::substr
PUBLIC	??A?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator[]
PUBLIC	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::length
PUBLIC	__$ArrayPad$
PUBLIC	?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z	; System_ConsoleWndProc
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp__GetWindowTextW@12:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp_?Exit@CSystem@@QAEXH@Z:PROC
EXTRN	__imp_?RestartOnExit@CSystem@@QAEX_N@Z:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@HHMDBMPD@?$AAS?$AAe?$AAr?$AAv?$AAe?$AAr?$AAC?$AAh?$AAa?$AAt?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@HHMDBMPD@?$AAS?$AAe?$AAr?$AAv?$AAe?$AAr?$AAC?$AAh?$AAa?$AAt?$AA?5?$AA?$AA@ DB 'S'
	DB	00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'C', 00H
	DB	'h', 00H, 'a', 00H, 't', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15NAHPJHLP@?$AA?$DO?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_15NAHPJHLP@?$AA?$DO?$AA?5?$AA?$AA@ DB '>', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z$4
__ehfuncinfo$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv226 = -4328						; size = 4
tv227 = -4324						; size = 4
tv224 = -4320						; size = 4
tv222 = -4316						; size = 4
tv219 = -4316						; size = 4
tv221 = -4312						; size = 4
tv87 = -4312						; size = 4
tv68 = -4312						; size = 4
tv64 = -4312						; size = 4
$T121637 = -4308					; size = 32
$T121638 = -4276					; size = 4
$T121639 = -4272					; size = 32
$T121640 = -4240					; size = 32
_sCmd$114984 = -4144					; size = 32
_szCmd$114981 = -4112					; size = 4096
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z PROC	; System_ConsoleWndProc, COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, 4316				; 000010dcH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 198  : 	switch (uMsg)

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 16			; 00000010H
	je	$LN2@System_Con
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN17@System_Con
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	SHORT $LN16@System_Con
	jmp	$LN1@System_Con
$LN17@System_Con:

; 199  : 	{
; 200  : 		case WM_INITDIALOG:			
; 201  : 			return TRUE;

	mov	eax, 1
	jmp	$LN20@System_Con
$LN16@System_Con:

; 202  : 
; 203  : 		case WM_COMMAND:
; 204  : 			//control messages
; 205  : 			switch (LOWORD(wParam))

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	sub	edx, 1000				; 000003e8H
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 8
	ja	$LN14@System_Con
	mov	eax, DWORD PTR tv68[ebp]
	movzx	ecx, BYTE PTR $LN27@System_Con[eax]
	jmp	DWORD PTR $LN29@System_Con[ecx*4]
$LN13@System_Con:

; 206  : 			{
; 207  : 				case IDC_QUIT:
; 208  : 					K2System.RestartOnExit(false);

	push	0
	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?RestartOnExit@CSystem@@QAEX_N@Z

; 209  : 					K2System.Exit(0);

	push	0
	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?Exit@CSystem@@QAEXH@Z

; 210  : 					break;

	jmp	$LN14@System_Con
$LN12@System_Con:

; 211  : 
; 212  : 				case IDC_COMMAND:
; 213  : 				case IDC_CHAT:
; 214  : 					if (HIWORD(wParam) == EN_CHANGE)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cmp	ecx, 768				; 00000300H
	jne	$LN11@System_Con

; 215  : 					{
; 216  : 						TCHAR szCmd[2048];
; 217  : 						GetWindowText(GetDlgItem(hWnd, LOWORD(wParam)), szCmd, 2047);

	push	2047					; 000007ffH
	lea	eax, DWORD PTR _szCmd$114981[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__GetWindowTextW@12

; 218  : 						tstring sCmd(szCmd);

	lea	eax, DWORD PTR _szCmd$114981[ebp]
	push	eax
	lea	ecx, DWORD PTR _sCmd$114984[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 219  : 
; 220  : 						if (sCmd.length() > 2)

	lea	ecx, DWORD PTR _sCmd$114984[ebp]
	call	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::length
	cmp	eax, 2
	jbe	$LN10@System_Con

; 221  : 						{
; 222  : 							if (sCmd[sCmd.length() - 2] == _T('\r'))

	lea	ecx, DWORD PTR _sCmd$114984[ebp]
	call	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::length
	sub	eax, 2
	push	eax
	lea	ecx, DWORD PTR _sCmd$114984[ebp]
	call	??A?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator[]
	movzx	eax, WORD PTR [eax]
	cmp	eax, 13					; 0000000dH
	jne	$LN10@System_Con

; 223  : 							{
; 224  : 								sCmd = sCmd.substr(0, sCmd.length() - 2);

	lea	ecx, DWORD PTR _sCmd$114984[ebp]
	call	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::length
	sub	eax, 2
	push	eax
	push	0
	lea	eax, DWORD PTR $T121637[ebp]
	push	eax
	lea	ecx, DWORD PTR _sCmd$114984[ebp]
	call	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::substr
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv219[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv219[ebp]
	push	edx
	lea	ecx, DWORD PTR _sCmd$114984[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T121637[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 225  : 
; 226  : 								if (LOWORD(wParam) == IDC_COMMAND)

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 1001				; 000003e9H
	jne	SHORT $LN8@System_Con

; 227  : 								{
; 228  : 									Console.Std << _T("> ") << sCmd << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	lea	ecx, DWORD PTR _sCmd$114984[ebp]
	push	ecx
	push	OFFSET ??_C@_15NAHPJHLP@?$AA?$DO?$AA?5?$AA?$AA@
	mov	edx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [edx]
	add	ecx, 280				; 00000118H
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<

; 229  : 									Console.Execute(sCmd);

	lea	eax, DWORD PTR _sCmd$114984[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?Execute@CConsole@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z

; 230  : 								}
; 231  : 								else // Chatting

	jmp	$LN7@System_Con
$LN8@System_Con:

; 232  : 								{
; 233  : 									Console.Execute(_T("ServerChat ") + QuoteStr(sCmd));

	sub	esp, 32					; 00000020H
	mov	ecx, esp
	mov	DWORD PTR $T121638[ebp], esp
	lea	eax, DWORD PTR _sCmd$114984[ebp]
	push	eax
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv221[ebp], eax
	lea	ecx, DWORD PTR $T121639[ebp]
	push	ecx
	call	??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z ; QuoteStr<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 36					; 00000024H
	mov	DWORD PTR tv222[ebp], eax
	mov	edx, DWORD PTR tv222[ebp]
	mov	DWORD PTR tv224[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv224[ebp]
	push	eax
	push	OFFSET ??_C@_1BI@HHMDBMPD@?$AAS?$AAe?$AAr?$AAv?$AAe?$AAr?$AAC?$AAh?$AAa?$AAt?$AA?5?$AA?$AA@
	lea	ecx, DWORD PTR $T121640[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv227[ebp], eax
	mov	edx, DWORD PTR tv227[ebp]
	mov	DWORD PTR tv226[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv226[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?Execute@CConsole@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T121640[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T121639[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN7@System_Con:

; 234  : 								}
; 235  : 
; 236  : 								SetWindowText(GetDlgItem(hWnd, LOWORD(wParam)), _T(""));

	push	OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
$LN10@System_Con:

; 237  : 							}
; 238  : 						}
; 239  : 					}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sCmd$114984[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN11@System_Con:

; 240  : 					break;

	jmp	SHORT $LN14@System_Con

; 241  : 
; 242  : 				case IDC_DEVELOPER:
; 243  : 					//TODO: Add functionality to "Print Debug Messages" toggle.
; 244  : 					break;

	jmp	SHORT $LN14@System_Con
$LN5@System_Con:

; 245  : 
; 246  : 				case IDC_OUTPUT:				
; 247  : 					if (HIWORD(wParam) == EN_MAXTEXT)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cmp	ecx, 1281				; 00000501H
	jne	SHORT $LN14@System_Con

; 248  : 						SetWindowText(GetDlgItem(hWnd, LOWORD(wParam)), _T(""));

	push	OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
$LN14@System_Con:

; 249  : 					break;
; 250  : 
; 251  : 				default:
; 252  : 					break;
; 253  : 			}
; 254  : 
; 255  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN20@System_Con
$LN2@System_Con:

; 256  : 
; 257  : 		case WM_CLOSE:
; 258  : 			K2System.RestartOnExit(false);

	push	0
	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?RestartOnExit@CSystem@@QAEX_N@Z

; 259  : 			K2System.Exit(0);

	push	0
	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?Exit@CSystem@@QAEXH@Z

; 260  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN20@System_Con
$LN1@System_Con:

; 261  : 
; 262  : 		default:
; 263  : 			return FALSE;

	xor	eax, eax
$LN20@System_Con:

; 264  : 	}
; 265  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN29@System_Con:
	DD	$LN5@System_Con
	DD	$LN12@System_Con
	DD	$LN13@System_Con
	DD	$LN14@System_Con
$LN27@System_Con:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z$0:
	lea	ecx, DWORD PTR _sCmd$114984[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z$1:
	lea	ecx, DWORD PTR $T121637[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z$3:
	lea	ecx, DWORD PTR $T121639[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z$4:
	lea	ecx, DWORD PTR $T121640[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4332]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z ENDP	; System_ConsoleWndProc
PUBLIC	?cmdCrashFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdCrashFn
; Function compile flags: /Odtp /ZI
;	COMDAT ?cmdCrashFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
_p$ = -4						; size = 4
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdCrashFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdCrashFn, COMDAT

; 273  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 274  : 	int *p(0);

	mov	DWORD PTR _p$[ebp], 0

; 275  : 	*p = 0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0

; 276  : 	return false;

	xor	al, al

; 277  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cmdCrashFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdCrashFn
_TEXT	ENDS
PUBLIC	??1?$vector@HV?$K2VectorAllocator@H@@@@QAE@XZ	; vector<int,K2VectorAllocator<int> >::~vector<int,K2VectorAllocator<int> >
PUBLIC	??1?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ ; std::_Vector_iterator<int,K2VectorAllocator<int> >::~_Vector_iterator<int,K2VectorAllocator<int> >
PUBLIC	??D?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QBEAAHXZ ; std::_Vector_iterator<int,K2VectorAllocator<int> >::operator*
PUBLIC	?end@?$vector@HV?$K2VectorAllocator@H@@@std@@QAE?AV?$_Vector_iterator@HV?$K2VectorAllocator@H@@@2@XZ ; std::vector<int,K2VectorAllocator<int> >::end
PUBLIC	??0?$vector@HV?$K2VectorAllocator@H@@@@QAE@I@Z	; vector<int,K2VectorAllocator<int> >::vector<int,K2VectorAllocator<int> >
PUBLIC	?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdCrashSTLFn
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$1
__ehfuncinfo$?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
tv77 = -120						; size = 4
tv65 = -116						; size = 4
$T121659 = -112						; size = 12
$T121660 = -97						; size = 1
_v$ = -32						; size = 20
__$EHRec$ = -12						; size = 12
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdCrashSTLFn, COMDAT

; 284  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 285  : 	vector<int> v(0);

	push	0
	lea	ecx, DWORD PTR _v$[ebp]
	call	??0?$vector@HV?$K2VectorAllocator@H@@@@QAE@I@Z ; vector<int,K2VectorAllocator<int> >::vector<int,K2VectorAllocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 286  : 	*v.end() = 0;

	lea	eax, DWORD PTR $T121659[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	call	?end@?$vector@HV?$K2VectorAllocator@H@@@std@@QAE?AV?$_Vector_iterator@HV?$K2VectorAllocator@H@@@2@XZ ; std::vector<int,K2VectorAllocator<int> >::end
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv77[ebp]
	call	??D?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QBEAAHXZ ; std::_Vector_iterator<int,K2VectorAllocator<int> >::operator*
	mov	DWORD PTR [eax], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T121659[ebp]
	call	??1?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ

; 287  : 	return false;

	mov	BYTE PTR $T121660[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _v$[ebp]
	call	??1?$vector@HV?$K2VectorAllocator@H@@@@QAE@XZ
	mov	al, BYTE PTR $T121660[ebp]

; 288  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$0:
	lea	ecx, DWORD PTR _v$[ebp]
	jmp	??1?$vector@HV?$K2VectorAllocator@H@@@@QAE@XZ
__unwindfunclet$?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$1:
	lea	ecx, DWORD PTR $T121659[ebp]
	jmp	??1?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
__ehhandler$?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdCrashSTLFn
PUBLIC	??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ ; std::vector<int,K2VectorAllocator<int> >::~vector<int,K2VectorAllocator<int> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$vector@HV?$K2VectorAllocator@H@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@HV?$K2VectorAllocator@H@@@@QAE@XZ PROC	; vector<int,K2VectorAllocator<int> >::~vector<int,K2VectorAllocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ ; std::vector<int,K2VectorAllocator<int> >::~vector<int,K2VectorAllocator<int> >
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@HV?$K2VectorAllocator@H@@@@QAE@XZ ENDP	; vector<int,K2VectorAllocator<int> >::~vector<int,K2VectorAllocator<int> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::~_Vector_const_iterator<int,K2VectorAllocator<int> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ PROC ; std::_Vector_iterator<int,K2VectorAllocator<int> >::~_Vector_iterator<int,K2VectorAllocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<int,K2VectorAllocator<int> >::~_Vector_iterator<int,K2VectorAllocator<int> >
_TEXT	ENDS
PUBLIC	??1?$_Ranit@HHPBHABH@std@@QAE@XZ		; std::_Ranit<int,int,int const *,int const &>::~_Ranit<int,int,int const *,int const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::~_Vector_const_iterator<int,K2VectorAllocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Ranit@HHPBHABH@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::~_Vector_const_iterator<int,K2VectorAllocator<int> >
_TEXT	ENDS
PUBLIC	??1_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::~_Iterator_base
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Ranit@HHPBHABH@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Ranit@HHPBHABH@std@@QAE@XZ PROC			; std::_Ranit<int,int,int const *,int const &>::~_Ranit<int,int,int const *,int const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::~_Iterator_base
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Ranit@HHPBHABH@std@@QAE@XZ ENDP			; std::_Ranit<int,int,int const *,int const &>::~_Ranit<int,int,int const *,int const &>
_TEXT	ENDS
PUBLIC	?cmdInfiniteLoopFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdInfiniteLoopFn
; Function compile flags: /Odtp /ZI
;	COMDAT ?cmdInfiniteLoopFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdInfiniteLoopFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdInfiniteLoopFn, COMDAT

; 295  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$LN2@cmdInfinit:

; 296  : 	while (true);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN1@cmdInfinit
	jmp	SHORT $LN2@cmdInfinit
$LN1@cmdInfinit:

; 297  : 	return false;

	xor	al, al

; 298  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cmdInfiniteLoopFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdInfiniteLoopFn
_TEXT	ENDS
PUBLIC	?cmdAbortFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdAbortFn
EXTRN	__imp__abort:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?cmdAbortFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdAbortFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdAbortFn, COMDAT

; 305  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 306  : 	abort();

	call	DWORD PTR __imp__abort

; 307  : 	return false;

	xor	al, al

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cmdAbortFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdAbortFn
_TEXT	ENDS
PUBLIC	??_C@_1CO@FDBPJGMO@?$AAU?$AAn?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?9?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_19ILJNDDBA@?$AAg?$AAa?$AAm?$AAe?$AA?$AA@	; `string'
PUBLIC	??_C@_1CE@JLKJELPN@?$AAH?$AAe?$AAr?$AAo?$AAe?$AAs?$AA?5?$AAo?$AAf?$AA?5?$AAN?$AAe?$AAw?$AAe?$AAr?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@GHGNCIGF@?$AA0?$AA?4?$AA0?$AA?4?$AA6?$AA1?$AA?4?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EA@LELDNEGL@?$AA?5?$AA?$FL?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?$FN?$AA?5?$AA?$FL?$AAU?$AAN?$AAI?$AAC?$AAO?$AAD?$AAE?$AA?$FN?$AA?5?$AA?$FL?$AAS?$AAE?$AAC?$AAU?$AAR?$AAE?$AA?5?$AAC?$AAR?$AAT?$AA?$FN?$AA?$AA@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_17LHHHPLCE@?$AAw?$AAa?$AA1?$AA?$AA@	; `string'
PUBLIC	??_C@_19EPEMMAHE@?$AAi?$AA6?$AA8?$AA6?$AA?$AA@	; `string'
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
PUBLIC	??_C@_0BN@FNKEAOOD@masterserver?4hon?4s2games?4com?$AA@ ; `string'
PUBLIC	_WinMain@16
PUBLIC	??_R0?AVCException@@@8				; CException `RTTI Type Descriptor'
EXTRN	__imp_?Shutdown@CHost@@QAEXXZ:PROC
EXTRN	__imp_?Error@CSystem@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
EXTRN	__imp_?GetMsg@CException@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ:PROC
EXTRN	__imp_?Process@CException@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_N@Z:PROC
EXTRN	__imp_?Execute@CHost@@QAEXXZ:PROC
EXTRN	__imp_?Init@CHost@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
EXTRN	__imp_?InitKeyboardMap@CSystem@@QAEXXZ:PROC
EXTRN	__imp_?SetConsoleWndProc@CSystem@@QAEXPAX@Z:PROC
EXTRN	__imp_?SetMainWndProc@CSystem@@QAEXPAX@Z:PROC
EXTRN	__imp_?SetInstanceHandle@CSystem@@QAEXPAX@Z:PROC
EXTRN	__imp_?Init@CSystem@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@000000ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@3@@Z:PROC
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
;	COMDAT ??_R0?AVCException@@@8
_DATA	SEGMENT
??_R0?AVCException@@@8 DD FLAT:??_7type_info@@6B@	; CException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCException@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_1CO@FDBPJGMO@?$AAU?$AAn?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?9?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@FDBPJGMO@?$AAU?$AAn?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?9?$AA?5?$AA?$AA@ DB 'U'
	DB	00H, 'n', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'c', 00H, 'e'
	DB	00H, 'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H
	DB	'-', 00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_19ILJNDDBA@?$AAg?$AAa?$AAm?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19ILJNDDBA@?$AAg?$AAa?$AAm?$AAe?$AA?$AA@ DB 'g', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@JLKJELPN@?$AAH?$AAe?$AAr?$AAo?$AAe?$AAs?$AA?5?$AAo?$AAf?$AA?5?$AAN?$AAe?$AAw?$AAe?$AAr?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@JLKJELPN@?$AAH?$AAe?$AAr?$AAo?$AAe?$AAs?$AA?5?$AAo?$AAf?$AA?5?$AAN?$AAe?$AAw?$AAe?$AAr?$AAt?$AAh?$AA?$AA@ DB 'H'
	DB	00H, 'e', 00H, 'r', 00H, 'o', 00H, 'e', 00H, 's', 00H, ' ', 00H
	DB	'o', 00H, 'f', 00H, ' ', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 'e'
	DB	00H, 'r', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@GHGNCIGF@?$AA0?$AA?4?$AA0?$AA?4?$AA6?$AA1?$AA?4?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@GHGNCIGF@?$AA0?$AA?4?$AA0?$AA?4?$AA6?$AA1?$AA?4?$AA0?$AA?$AA@ DB '0'
	DB	00H, '.', 00H, '0', 00H, '.', 00H, '6', 00H, '1', 00H, '.', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LELDNEGL@?$AA?5?$AA?$FL?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?$FN?$AA?5?$AA?$FL?$AAU?$AAN?$AAI?$AAC?$AAO?$AAD?$AAE?$AA?$FN?$AA?5?$AA?$FL?$AAS?$AAE?$AAC?$AAU?$AAR?$AAE?$AA?5?$AAC?$AAR?$AAT?$AA?$FN?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@LELDNEGL@?$AA?5?$AA?$FL?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?$FN?$AA?5?$AA?$FL?$AAU?$AAN?$AAI?$AAC?$AAO?$AAD?$AAE?$AA?$FN?$AA?5?$AA?$FL?$AAS?$AAE?$AAC?$AAU?$AAR?$AAE?$AA?5?$AAC?$AAR?$AAT?$AA?$FN?$AA?$AA@ DB ' '
	DB	00H, '[', 00H, 'D', 00H, 'E', 00H, 'B', 00H, 'U', 00H, 'G', 00H
	DB	']', 00H, ' ', 00H, '[', 00H, 'U', 00H, 'N', 00H, 'I', 00H, 'C'
	DB	00H, 'O', 00H, 'D', 00H, 'E', 00H, ']', 00H, ' ', 00H, '[', 00H
	DB	'S', 00H, 'E', 00H, 'C', 00H, 'U', 00H, 'R', 00H, 'E', 00H, ' '
	DB	00H, 'C', 00H, 'R', 00H, 'T', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_17LHHHPLCE@?$AAw?$AAa?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_17LHHHPLCE@?$AAw?$AAa?$AA1?$AA?$AA@ DB 'w', 00H, 'a', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_19EPEMMAHE@?$AAi?$AA6?$AA8?$AA6?$AA?$AA@
CONST	SEGMENT
??_C@_19EPEMMAHE@?$AAi?$AA6?$AA8?$AA6?$AA?$AA@ DB 'i', 00H, '6', 00H, '8', 00H
	DB	'6', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FNKEAOOD@masterserver?4hon?4s2games?4com?$AA@
CONST	SEGMENT
??_C@_0BN@FNKEAOOD@masterserver?4hon?4s2games?4com?$AA@ DB 'masterserver.'
	DB	'hon.s2games.com', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WinMain@16$13 DD 08H
	DD	FLAT:??_R0?AVCException@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_WinMain@16$0
__tryblocktable$_WinMain@16 DD 08H
	DD	09H
	DD	0cH
	DD	01H
	DD	FLAT:__catchsym$_WinMain@16$13
__ehfuncinfo$_WinMain@16 DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$_WinMain@16
	DD	01H
	DD	FLAT:__tryblocktable$_WinMain@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_WinMain@16 DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_WinMain@16$2
	DD	00H
	DD	FLAT:__unwindfunclet$_WinMain@16$3
	DD	01H
	DD	FLAT:__unwindfunclet$_WinMain@16$4
	DD	02H
	DD	FLAT:__unwindfunclet$_WinMain@16$5
	DD	03H
	DD	FLAT:__unwindfunclet$_WinMain@16$6
	DD	04H
	DD	FLAT:__unwindfunclet$_WinMain@16$7
	DD	05H
	DD	FLAT:__unwindfunclet$_WinMain@16$8
	DD	06H
	DD	FLAT:__unwindfunclet$_WinMain@16$9
	DD	0ffffffffH
	DD	00H
	DD	08H
	DD	FLAT:__unwindfunclet$_WinMain@16$10
	DD	0ffffffffH
	DD	00H
	DD	0aH
	DD	FLAT:__unwindfunclet$_WinMain@16$11
	DD	0aH
	DD	FLAT:__unwindfunclet$_WinMain@16$12
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT _WinMain@16
_TEXT	SEGMENT
tv178 = -444						; size = 4
tv155 = -440						; size = 4
tv133 = -440						; size = 4
$T121687 = -436						; size = 32
$T121688 = -404						; size = 32
$T121689 = -372						; size = 32
$T121690 = -340						; size = 32
$T121691 = -308						; size = 32
$T121692 = -276						; size = 32
$T121693 = -244						; size = 32
$T121694 = -212						; size = 32
$T121695 = -180						; size = 32
$T121696 = -148						; size = 32
$T121697 = -116						; size = 32
_ex$115251 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 317  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$_WinMain@16
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 318  : 	g_hInstance = hInstance;

	mov	eax, DWORD PTR _hInstance$[ebp]
	mov	DWORD PTR ?g_hInstance@@3PAUHINSTANCE__@@A, eax ; g_hInstance

; 319  : 
; 320  : #ifdef BUILD_OS_CODE
; 321  : 	K2System.Init(GAME_NAME, VERSION_STRING, BUILD_INFO_STRING, BUILDNUMBER, BUILD_OS, BUILD_OS_CODE, BUILD_ARCH, MASTER_SERVER_ADDRESS);
; 322  : #else
; 323  : 	K2System.Init(GAME_NAME, VERSION_STRING, BUILD_INFO_STRING, BUILDNUMBER, BUILD_OS, BUILD_OS, BUILD_ARCH, MASTER_SERVER_ADDRESS);

	push	OFFSET ??_C@_0BN@FNKEAOOD@masterserver?4hon?4s2games?4com?$AA@
	lea	ecx, DWORD PTR $T121687[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	push	OFFSET ??_C@_19EPEMMAHE@?$AAi?$AA6?$AA8?$AA6?$AA?$AA@
	lea	ecx, DWORD PTR $T121688[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	push	OFFSET ??_C@_17LHHHPLCE@?$AAw?$AAa?$AA1?$AA?$AA@
	lea	ecx, DWORD PTR $T121689[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	push	OFFSET ??_C@_17LHHHPLCE@?$AAw?$AAa?$AA1?$AA?$AA@
	lea	ecx, DWORD PTR $T121690[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	lea	ecx, DWORD PTR $T121691[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	push	OFFSET ??_C@_1EA@LELDNEGL@?$AA?5?$AA?$FL?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?$FN?$AA?5?$AA?$FL?$AAU?$AAN?$AAI?$AAC?$AAO?$AAD?$AAE?$AA?$FN?$AA?5?$AA?$FL?$AAS?$AAE?$AAC?$AAU?$AAR?$AAE?$AA?5?$AAC?$AAR?$AAT?$AA?$FN?$AA?$AA@
	lea	ecx, DWORD PTR $T121692[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	push	OFFSET ??_C@_1BC@GHGNCIGF@?$AA0?$AA?4?$AA0?$AA?4?$AA6?$AA1?$AA?4?$AA0?$AA?$AA@
	lea	ecx, DWORD PTR $T121693[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	push	OFFSET ??_C@_1CE@JLKJELPN@?$AAH?$AAe?$AAr?$AAo?$AAe?$AAs?$AA?5?$AAo?$AAf?$AA?5?$AAN?$AAe?$AAw?$AAe?$AAr?$AAt?$AAh?$AA?$AA@
	lea	ecx, DWORD PTR $T121694[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	eax, DWORD PTR $T121687[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121688[ebp]
	push	ecx
	lea	edx, DWORD PTR $T121689[ebp]
	push	edx
	lea	eax, DWORD PTR $T121690[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121691[ebp]
	push	ecx
	lea	edx, DWORD PTR $T121692[ebp]
	push	edx
	lea	eax, DWORD PTR $T121693[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121694[ebp]
	push	ecx
	mov	edx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?Init@CSystem@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@000000ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@3@@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR $T121694[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR $T121693[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR $T121692[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR $T121691[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR $T121690[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR $T121689[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR $T121688[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR $T121687[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >

; 324  : #endif
; 325  : 
; 326  : 	K2System.SetInstanceHandle(hInstance);

	mov	eax, DWORD PTR _hInstance$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?SetInstanceHandle@CSystem@@QAEXPAX@Z

; 327  : 	K2System.SetMainWndProc(System_MainWndProc);

	push	OFFSET ?System_MainWndProc@@YGJPAUHWND__@@IIJ@Z ; System_MainWndProc
	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?SetMainWndProc@CSystem@@QAEXPAX@Z

; 328  : 	K2System.SetConsoleWndProc(System_ConsoleWndProc);

	push	OFFSET ?System_ConsoleWndProc@@YGJPAUHWND__@@IIJ@Z ; System_ConsoleWndProc
	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?SetConsoleWndProc@CSystem@@QAEXPAX@Z

; 329  : 	K2System.InitKeyboardMap();

	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?InitKeyboardMap@CSystem@@QAEXXZ

; 330  : 	K2System.SetupKeystates();

	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?SetupKeystates@CSystem@@QAEXXZ

; 331  : 
; 332  : 	try
; 333  : 	{

	mov	DWORD PTR __$EHRec$[ebp+12], 8

; 334  : 		Host.Init(DEFAULT_GAME);

	push	OFFSET ??_C@_19ILJNDDBA@?$AAg?$AAa?$AAm?$AAe?$AA?$AA@
	lea	ecx, DWORD PTR $T121695[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv133[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	eax, DWORD PTR $T121695[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?g_pHost@@3PAVCHost@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?Init@CHost@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR $T121695[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 335  : 		Host.Execute();

	mov	eax, DWORD PTR __imp_?g_pHost@@3PAVCHost@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?Execute@CHost@@QAEXXZ
	jmp	$LN4@WinMain
__catch$_WinMain@16$0:

; 336  : 	}
; 337  : 	catch (CException &ex)
; 338  : 	{
; 339  : 		ex.Process(_T("Unhandled exception - "), NO_THROW);

	push	OFFSET ??_C@_1CO@FDBPJGMO@?$AAU?$AAn?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?9?$AA?5?$AA?$AA@
	lea	ecx, DWORD PTR $T121696[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	push	0
	lea	eax, DWORD PTR $T121696[ebp]
	push	eax
	mov	ecx, DWORD PTR _ex$115251[ebp]
	call	DWORD PTR __imp_?Process@CException@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_N@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
	lea	ecx, DWORD PTR $T121696[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 340  : 		K2System.Error(ex.GetMsg());

	lea	eax, DWORD PTR $T121697[ebp]
	push	eax
	mov	ecx, DWORD PTR _ex$115251[ebp]
	call	DWORD PTR __imp_?GetMsg@CException@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
	mov	DWORD PTR tv155[ebp], eax
	mov	ecx, DWORD PTR tv155[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	mov	edx, DWORD PTR tv178[ebp]
	push	edx
	mov	eax, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?Error@CSystem@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
	lea	ecx, DWORD PTR $T121697[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 341  : 	}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$_WinMain@16$1
	ret	0
$LN4@WinMain:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$_WinMain@16$1:

; 342  : 	/*catch (...)
; 343  : 	{
; 344  : 		Console << (_T("Unhandled exception"), NO_THROW);
; 345  : 		K2System.Error(_T("Unhandled exception"));
; 346  : 		throw;
; 347  : 	}*/
; 348  : 
; 349  : 	Host.Shutdown();

	mov	eax, DWORD PTR __imp_?g_pHost@@3PAVCHost@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?Shutdown@CHost@@QAEXXZ

; 350  : 	return 0;

	xor	eax, eax

; 351  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_WinMain@16$2:
	lea	ecx, DWORD PTR $T121687[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$_WinMain@16$3:
	lea	ecx, DWORD PTR $T121688[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$_WinMain@16$4:
	lea	ecx, DWORD PTR $T121689[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$_WinMain@16$5:
	lea	ecx, DWORD PTR $T121690[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$_WinMain@16$6:
	lea	ecx, DWORD PTR $T121691[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$_WinMain@16$7:
	lea	ecx, DWORD PTR $T121692[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$_WinMain@16$8:
	lea	ecx, DWORD PTR $T121693[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$_WinMain@16$9:
	lea	ecx, DWORD PTR $T121694[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$_WinMain@16$10:
	lea	ecx, DWORD PTR $T121695[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$_WinMain@16$11:
	lea	ecx, DWORD PTR $T121696[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$_WinMain@16$12:
	lea	ecx, DWORD PTR $T121697[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$_WinMain@16:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-448]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_WinMain@16
	jmp	___CxxFrameHandler3
text$x	ENDS
_WinMain@16 ENDP
PUBLIC	??_C@_1BE@KIBOMOAF@?$AAP?$AAl?$AAa?$AAy?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEI_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find_last_of
PUBLIC	?find@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEI_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find
PUBLIC	?Set@CMemManager@@SAPAXPAXEI@Z			; CMemManager::Set
PUBLIC	??_C@_1DA@COMNCCFO@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@FAGFMEF@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAv?$AA1?$AA?4?$AAx?$AA?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdWAStartFn
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__FindWindowW@8:PROC
;	COMDAT ??_C@_1BE@KIBOMOAF@?$AAP?$AAl?$AAa?$AAy?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@KIBOMOAF@?$AAP?$AAl?$AAa?$AAy?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA?$AA@ DB 'P'
	DB	00H, 'l', 00H, 'a', 00H, 'y', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	':', 00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@COMNCCFO@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@COMNCCFO@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@ DB 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'p', 00H, ' ', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@FAGFMEF@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAv?$AA1?$AA?4?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@FAGFMEF@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAv?$AA1?$AA?4?$AAx?$AA?$AA@ DB 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'p', 00H, ' ', 00H
	DB	'v', 00H, '1', 00H, '.', 00H, 'x', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$4
__ehfuncinfo$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
tv199 = -752						; size = 4
tv197 = -748						; size = 4
tv193 = -748						; size = 4
tv191 = -748						; size = 4
tv201 = -744						; size = 4
tv196 = -744						; size = 4
tv128 = -744						; size = 4
$T121725 = -740						; size = 32
$T121726 = -708						; size = 32
$T121727 = -676						; size = 4
$T121728 = -672						; size = 32
$T121729 = -637						; size = 1
_z$ = -572						; size = 4
_sTitle$ = -568						; size = 32
_szTitle$ = -536					; size = 510
_lState$ = -24						; size = 4
_hWndWinamp$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdWAStartFn, COMDAT

; 378  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 740				; 000002e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 379  : 	HWND hWndWinamp(FindWindow(_T("Winamp v1.x"), NULL));

	push	0
	push	OFFSET ??_C@_1BI@FAGFMEF@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAv?$AA1?$AA?4?$AAx?$AA?$AA@
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hWndWinamp$[ebp], eax

; 380  : 	if (hWndWinamp == NULL)

	cmp	DWORD PTR _hWndWinamp$[ebp], 0
	jne	SHORT $LN5@cmdWAStart

; 381  : 	{
; 382  : 		Console << _T("Winamp window not found") << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	push	OFFSET ??_C@_1DA@COMNCCFO@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<

; 383  : 		return false;

	xor	al, al
	jmp	$LN6@cmdWAStart
$LN5@cmdWAStart:

; 384  : 	}
; 385  : 
; 386  : 	LRESULT lState(SendMessage(hWndWinamp, WM_USER, 0, 104));

	push	104					; 00000068H
	push	0
	push	1024					; 00000400H
	mov	eax, DWORD PTR _hWndWinamp$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _lState$[ebp], eax

; 387  : 	if (lState == 0)

	cmp	DWORD PTR _lState$[ebp], 0
	jne	SHORT $LN4@cmdWAStart

; 388  : 		SendMessage(hWndWinamp, WM_COMMAND, 40045, 0);

	push	0
	push	40045					; 00009c6dH
	push	273					; 00000111H
	mov	eax, DWORD PTR _hWndWinamp$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 389  : 	else

	jmp	SHORT $LN3@cmdWAStart
$LN4@cmdWAStart:

; 390  : 		SendMessage(hWndWinamp, WM_COMMAND, 40046, 0);

	push	0
	push	40046					; 00009c6eH
	push	273					; 00000111H
	mov	eax, DWORD PTR _hWndWinamp$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN3@cmdWAStart:

; 391  : 
; 392  : 	TCHAR szTitle[255];
; 393  : 	MemManager.Set(szTitle, 0, 255);

	push	255					; 000000ffH
	push	0
	lea	eax, DWORD PTR _szTitle$[ebp]
	push	eax
	call	?Set@CMemManager@@SAPAXPAXEI@Z		; CMemManager::Set
	add	esp, 12					; 0000000cH

; 394  : 	GetWindowText(hWndWinamp, szTitle, 254);

	push	254					; 000000feH
	lea	eax, DWORD PTR _szTitle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWndWinamp$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowTextW@12

; 395  : 	tstring sTitle(szTitle);

	lea	eax, DWORD PTR _szTitle$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sTitle$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 396  : 	size_t z(sTitle.find(_T('.')));

	push	0
	push	46					; 0000002eH
	lea	ecx, DWORD PTR _sTitle$[ebp]
	call	?find@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEI_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find
	mov	DWORD PTR _z$[ebp], eax

; 397  : 	if (z != tstring::npos)

	cmp	DWORD PTR _z$[ebp], -1
	je	SHORT $LN2@cmdWAStart

; 398  : 		sTitle = sTitle.substr(z + 2);

	push	-1
	mov	eax, DWORD PTR _z$[ebp]
	add	eax, 2
	push	eax
	lea	ecx, DWORD PTR $T121725[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sTitle$[ebp]
	call	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::substr
	mov	DWORD PTR tv128[ebp], eax
	mov	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR tv191[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv191[ebp]
	push	eax
	lea	ecx, DWORD PTR _sTitle$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T121725[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN2@cmdWAStart:

; 399  : 	z = sTitle.find_last_of(_T('-'));

	push	-1
	push	45					; 0000002dH
	lea	ecx, DWORD PTR _sTitle$[ebp]
	call	?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEI_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find_last_of
	mov	DWORD PTR _z$[ebp], eax

; 400  : 	if (z != tstring::npos)

	cmp	DWORD PTR _z$[ebp], -1
	je	SHORT $LN1@cmdWAStart

; 401  : 		sTitle = sTitle.substr(0, z - 1);

	mov	eax, DWORD PTR _z$[ebp]
	sub	eax, 1
	push	eax
	push	0
	lea	ecx, DWORD PTR $T121726[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sTitle$[ebp]
	call	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::substr
	mov	DWORD PTR tv201[ebp], eax
	mov	edx, DWORD PTR tv201[ebp]
	mov	DWORD PTR tv193[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv193[ebp]
	push	eax
	lea	ecx, DWORD PTR _sTitle$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T121726[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN1@cmdWAStart:

; 402  : 	Console << _T("Playing: ") << QuoteStr(sTitle) << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	sub	esp, 32					; 00000020H
	mov	ecx, esp
	mov	DWORD PTR $T121727[ebp], esp
	lea	edx, DWORD PTR _sTitle$[ebp]
	push	edx
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv196[ebp], eax
	lea	eax, DWORD PTR $T121728[ebp]
	push	eax
	call	??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z ; QuoteStr<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 36					; 00000024H
	mov	DWORD PTR tv197[ebp], eax
	mov	ecx, DWORD PTR tv197[ebp]
	mov	DWORD PTR tv199[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR tv199[ebp]
	push	edx
	push	OFFSET ??_C@_1BE@KIBOMOAF@?$AAP?$AAl?$AAa?$AAy?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA?$AA@
	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T121728[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 403  : 	return true;

	mov	BYTE PTR $T121729[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sTitle$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	al, BYTE PTR $T121729[ebp]
$LN6@cmdWAStart:

; 404  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$0:
	lea	ecx, DWORD PTR _sTitle$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$1:
	lea	ecx, DWORD PTR $T121725[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$2:
	lea	ecx, DWORD PTR $T121726[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$4:
	lea	ecx, DWORD PTR $T121728[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-756]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdWAStartFn
PUBLIC	?cmdWAStopFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdWAStopFn
; Function compile flags: /Odtp /ZI
;	COMDAT ?cmdWAStopFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
_hWndWinamp$ = -4					; size = 4
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdWAStopFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdWAStopFn, COMDAT

; 407  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 408  : 	HWND hWndWinamp(FindWindow(_T("Winamp v1.x"), NULL));

	push	0
	push	OFFSET ??_C@_1BI@FAGFMEF@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAv?$AA1?$AA?4?$AAx?$AA?$AA@
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hWndWinamp$[ebp], eax

; 409  : 	if (hWndWinamp == NULL)

	cmp	DWORD PTR _hWndWinamp$[ebp], 0
	jne	SHORT $LN1@cmdWAStopF

; 410  : 	{
; 411  : 		Console << _T("Winamp window not found") << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	push	OFFSET ??_C@_1DA@COMNCCFO@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<

; 412  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@cmdWAStopF
$LN1@cmdWAStopF:

; 413  : 	}
; 414  : 
; 415  : 	SendMessage(hWndWinamp, WM_COMMAND, 40047, 0);

	push	0
	push	40047					; 00009c6fH
	push	273					; 00000111H
	mov	eax, DWORD PTR _hWndWinamp$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 416  : 	return true;

	mov	al, 1
$LN2@cmdWAStopF:

; 417  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cmdWAStopFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdWAStopFn
_TEXT	ENDS
PUBLIC	?cmdWAPrevFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdWAPrevFn
; Function compile flags: /Odtp /ZI
;	COMDAT ?cmdWAPrevFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
_hWndWinamp$ = -4					; size = 4
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdWAPrevFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdWAPrevFn, COMDAT

; 420  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 421  : 	HWND hWndWinamp(FindWindow(_T("Winamp v1.x"), NULL));

	push	0
	push	OFFSET ??_C@_1BI@FAGFMEF@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAv?$AA1?$AA?4?$AAx?$AA?$AA@
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hWndWinamp$[ebp], eax

; 422  : 	if (hWndWinamp == NULL)

	cmp	DWORD PTR _hWndWinamp$[ebp], 0
	jne	SHORT $LN1@cmdWAPrevF

; 423  : 	{
; 424  : 		Console << _T("Winamp window not found") << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	push	OFFSET ??_C@_1DA@COMNCCFO@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<

; 425  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@cmdWAPrevF
$LN1@cmdWAPrevF:

; 426  : 	}
; 427  : 
; 428  : 	SendMessage(hWndWinamp, WM_COMMAND, 40044, 0);

	push	0
	push	40044					; 00009c6cH
	push	273					; 00000111H
	mov	eax, DWORD PTR _hWndWinamp$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 429  : 	return true;

	mov	al, 1
$LN2@cmdWAPrevF:

; 430  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cmdWAPrevFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdWAPrevFn
_TEXT	ENDS
PUBLIC	?cmdWANextFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdWANextFn
; Function compile flags: /Odtp /ZI
;	COMDAT ?cmdWANextFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
_hWndWinamp$ = -4					; size = 4
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdWANextFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdWANextFn, COMDAT

; 433  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 434  : 	HWND hWndWinamp(FindWindow(_T("Winamp v1.x"), NULL));

	push	0
	push	OFFSET ??_C@_1BI@FAGFMEF@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAv?$AA1?$AA?4?$AAx?$AA?$AA@
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hWndWinamp$[ebp], eax

; 435  : 	if (hWndWinamp == NULL)

	cmp	DWORD PTR _hWndWinamp$[ebp], 0
	jne	SHORT $LN1@cmdWANextF

; 436  : 	{
; 437  : 		Console << _T("Winamp window not found") << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	push	OFFSET ??_C@_1DA@COMNCCFO@?$AAW?$AAi?$AAn?$AAa?$AAm?$AAp?$AA?5?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<

; 438  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@cmdWANextF
$LN1@cmdWANextF:

; 439  : 	}
; 440  : 
; 441  : 	SendMessage(hWndWinamp, WM_COMMAND, 40048, 0);

	push	0
	push	40048					; 00009c70H
	push	273					; 00000111H
	mov	eax, DWORD PTR _hWndWinamp$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 442  : 	return true;

	mov	al, 1
$LN2@cmdWANextF:

; 443  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cmdWANextFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdWANextFn
_TEXT	ENDS
PUBLIC	??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z ; std::vector<int,K2VectorAllocator<int> >::vector<int,K2VectorAllocator<int> >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl.h
;	COMDAT ??0?$vector@HV?$K2VectorAllocator@H@@@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
??0?$vector@HV?$K2VectorAllocator@H@@@@QAE@I@Z PROC	; vector<int,K2VectorAllocator<int> >::vector<int,K2VectorAllocator<int> >, COMDAT
; _this$ = ecx

; 104  : 	{	

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z ; std::vector<int,K2VectorAllocator<int> >::vector<int,K2VectorAllocator<int> >

; 105  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$vector@HV?$K2VectorAllocator@H@@@@QAE@I@Z ENDP	; vector<int,K2VectorAllocator<int> >::vector<int,K2VectorAllocator<int> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ ; std::_Vector_val<int,K2VectorAllocator<int> >::~_Vector_val<int,K2VectorAllocator<int> >
PUBLIC	?_Tidy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXXZ ; std::vector<int,K2VectorAllocator<int> >::_Tidy
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ PROC	; std::vector<int,K2VectorAllocator<int> >::~vector<int,K2VectorAllocator<int> >, COMDAT
; _this$ = ecx

; 545  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 546  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXXZ ; std::vector<int,K2VectorAllocator<int> >::_Tidy

; 547  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
__ehhandler$??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@XZ ENDP	; std::vector<int,K2VectorAllocator<int> >::~vector<int,K2VectorAllocator<int> >
PUBLIC	??0?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z ; std::_Vector_iterator<int,K2VectorAllocator<int> >::_Vector_iterator<int,K2VectorAllocator<int> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?end@?$vector@HV?$K2VectorAllocator@H@@@std@@QAE?AV?$_Vector_iterator@HV?$K2VectorAllocator@H@@@2@XZ
_TEXT	SEGMENT
$T121762 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$K2VectorAllocator@H@@@std@@QAE?AV?$_Vector_iterator@HV?$K2VectorAllocator@H@@@2@XZ PROC ; std::vector<int,K2VectorAllocator<int> >::end, COMDAT
; _this$ = ecx

; 637  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T121762[ebp], 0

; 638  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z ; std::_Vector_iterator<int,K2VectorAllocator<int> >::_Vector_iterator<int,K2VectorAllocator<int> >
	mov	eax, DWORD PTR $T121762[ebp]
	or	eax, 1
	mov	DWORD PTR $T121762[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 639  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@HV?$K2VectorAllocator@H@@@std@@QAE?AV?$_Vector_iterator@HV?$K2VectorAllocator@H@@@2@XZ ENDP ; std::vector<int,K2VectorAllocator<int> >::end
_TEXT	ENDS
PUBLIC	?find@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEI_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 2
__Off$ = 12						; size = 4
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEI_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find, COMDAT
; _this$ = ecx

; 1755 : 		{	// look for _Ch at or after _Off

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1756 : 		return (find((const _Elem *)&_Ch, _Off, 1));

	push	1
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ch$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?find@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find

; 1757 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEI_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::rfind
; Function compile flags: /Odtp /ZI
;	COMDAT ?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEI_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 2
__Off$ = 12						; size = 4
?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEI_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find_last_of, COMDAT
; _this$ = ecx

; 1854 : 		{	// look for _Ch before _Off

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1855 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));

	push	1
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ch$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::rfind

; 1856 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEI_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find_last_of
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T121771 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::substr, COMDAT
; _this$ = ecx

; 1922 : 		{	// return [_Off, _Off + _Count) as new string

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T121771[ebp], 0

; 1923 : 		return (_Myt(*this, _Off, _Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T121771[ebp]
	or	eax, 1
	mov	DWORD PTR $T121771[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1924 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::substr
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\c_rect.h
_TEXT	ENDS
;	COMDAT ??1?$CRect@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CRect@H@@QAE@XZ PROC				; CRect<int>::~CRect<int>, COMDAT
; _this$ = ecx

; 41   : 	~CRect() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRect@H@@QAE@XZ ENDP				; CRect<int>::~CRect<int>
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\c_cvar.h
_TEXT	ENDS
;	COMDAT ??B?$CCvar@_N_N@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CCvar@_N_N@@QBE_NXZ PROC				; CCvar<bool,bool>::operator bool, COMDAT
; _this$ = ecx

; 354  : 					operator T() const							{ return m_Value; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+269]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CCvar@_N_N@@QBE_NXZ ENDP				; CCvar<bool,bool>::operator bool
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QBEABHXZ ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::operator*
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QBEAAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QBEAAHXZ PROC ; std::_Vector_iterator<int,K2VectorAllocator<int> >::operator*, COMDAT
; _this$ = ecx

; 325  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 326  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QBEABHXZ ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::operator*

; 327  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QBEAAHXZ ENDP ; std::_Vector_iterator<int,K2VectorAllocator<int> >::operator*
_TEXT	ENDS
PUBLIC	??1?$K2VectorAllocator@H@@QAE@XZ		; K2VectorAllocator<int>::~K2VectorAllocator<int>
EXTRN	__imp_??1_Container_base@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ PROC ; std::_Vector_val<int,K2VectorAllocator<int> >::~_Vector_val<int,K2VectorAllocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$K2VectorAllocator@H@@QAE@XZ	; K2VectorAllocator<int>::~K2VectorAllocator<int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_Container_base@std@@QAE@XZ
__ehhandler$??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ ENDP ; std::_Vector_val<int,K2VectorAllocator<int> >::~_Vector_val<int,K2VectorAllocator<int> >
PUBLIC	?_Orphan_me@_Iterator_base@std@@QAEXXZ		; std::_Iterator_base::_Orphan_me
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::~_Iterator_base, COMDAT
; _this$ = ecx

; 148  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 150  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 151  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$??1_Iterator_base@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::~_Iterator_base
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '8', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e'
	DB	00H, '\', 00H, 'x', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'l', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Orphan_me@_Iterator_base@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$8754 = -8					; size = 4
_this$ = -4						; size = 4
?_Orphan_me@_Iterator_base@std@@QAEXXZ PROC		; std::_Iterator_base::_Orphan_me, COMDAT
; _this$ = ecx

; 169  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		if (_Mycont != 0 && _Mycont->_Myfirstiter != _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], -3			; fffffffdH
	je	SHORT $LN5@Orphan_me

; 171  : 			{	// adopted, remove self from list
; 172  : 			_Iterator_base **_Pnext =
; 173  : 				(_Iterator_base **)&_Mycont->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$8754[ebp], ecx
$LN3@Orphan_me:

; 174  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$8754[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Orphan_me
	mov	eax, DWORD PTR __Pnext$8754[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me

; 175  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$8754[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$8754[ebp], ecx
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:

; 176  : 
; 177  : 			if (*_Pnext == 0)

	mov	eax, DWORD PTR __Pnext$8754[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@Orphan_me

; 178  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	push	178					; 000000b2H
	push	OFFSET ??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN1@Orphan_me:

; 179  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$8754[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 180  : 			_Mycont = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Orphan_me:

; 181  : 			}
; 182  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base@std@@QAEXXZ ENDP		; std::_Iterator_base::_Orphan_me
_TEXT	ENDS
PUBLIC	?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z ; std::vector<int,K2VectorAllocator<int> >::_Construct_n
PUBLIC	??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z ; std::_Vector_val<int,K2VectorAllocator<int> >::_Vector_val<int,K2VectorAllocator<int> >
PUBLIC	??0?$K2VectorAllocator@H@@QAE@XZ		; K2VectorAllocator<int>::K2VectorAllocator<int>
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z$1
__ehfuncinfo$??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z
_TEXT	SEGMENT
tv85 = -96						; size = 4
tv84 = -92						; size = 4
$T121802 = -88						; size = 4
$T121803 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z PROC	; std::vector<int,K2VectorAllocator<int> >::vector<int,K2VectorAllocator<int> >, COMDAT
; _this$ = ecx

; 469  : 		{	// construct from _Count * _Ty()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T121802[ebp], esp
	call	??0?$K2VectorAllocator@H@@QAE@XZ	; K2VectorAllocator<int>::K2VectorAllocator<int>
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z ; std::_Vector_val<int,K2VectorAllocator<int> >::_Vector_val<int,K2VectorAllocator<int> >
	mov	DWORD PTR tv85[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 470  : 		_Construct_n(_Count, _Ty());

	mov	DWORD PTR $T121803[ebp], 0
	lea	eax, DWORD PTR $T121803[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z ; std::vector<int,K2VectorAllocator<int> >::_Construct_n

; 471  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@QAE@XZ
__ehhandler$??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$K2VectorAllocator@H@@@std@@QAE@I@Z ENDP	; std::vector<int,K2VectorAllocator<int> >::vector<int,K2VectorAllocator<int> >
PUBLIC	?deallocate@?$K2VectorAllocator@H@@QAEXPAHI@Z	; K2VectorAllocator<int>::deallocate
PUBLIC	?_Destroy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXPAH0@Z ; std::vector<int,K2VectorAllocator<int> >::_Destroy
EXTRN	__imp_?_Orphan_all@_Container_base@std@@QBEXXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXXZ PROC ; std::vector<int,K2VectorAllocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1087 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1088 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Tidy

; 1089 : 			{	// something to free, destroy and deallocate it
; 1090 : 
; 1091 :  #if _HAS_ITERATOR_DEBUGGING
; 1092 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base@std@@QBEXXZ

; 1093 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1094 : 
; 1095 : 			_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXPAH0@Z ; std::vector<int,K2VectorAllocator<int> >::_Destroy

; 1096 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2VectorAllocator@H@@QAEXPAHI@Z ; K2VectorAllocator<int>::deallocate
$LN1@Tidy:

; 1097 : 			}
; 1098 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1099 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXXZ ENDP ; std::vector<int,K2VectorAllocator<int> >::_Tidy
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
_TEXT	ENDS
;	COMDAT ??1?$K2VectorAllocator@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$K2VectorAllocator@H@@QAE@XZ PROC			; K2VectorAllocator<int>::~K2VectorAllocator<int>, COMDAT
; _this$ = ecx

; 128  : 	~K2VectorAllocator() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$K2VectorAllocator@H@@QAE@XZ ENDP			; K2VectorAllocator<int>::~K2VectorAllocator<int>
_TEXT	ENDS
PUBLIC	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::~_String_val<wchar_t,K2StringAllocator<wchar_t> >
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy
PUBLIC	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
PUBLIC	??0?$K2StringAllocator@_W@@QAE@XZ		; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z$1
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z
_TEXT	SEGMENT
tv90 = -92						; size = 4
tv89 = -88						; size = 4
$T121818 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 609  : 		{	// construct from _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T121818[ebp], esp
	call	??0?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
	mov	DWORD PTR tv89[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv90[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 610  : #if _HAS_ITERATOR_DEBUGGING
; 611  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	jne	SHORT $LN1@basic_stri

; 612  : 			{
; 613  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -3			; fffffffdH
$LN1@basic_stri:

; 614  : 			}
; 615  : #endif
; 616  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 617  : 		assign(_Right, _Roff, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 618  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
PUBLIC	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z		; std::_Debug_pointer<wchar_t>
PUBLIC	??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
EXTRN	__imp_?compare@?$char_traits@_W@std@@SAHPB_W0I@Z:PROC
EXTRN	__imp_?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z:PROC
;	COMDAT ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '8', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e'
	DB	00H, '\', 00H, 'x', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIPB_WII@Z
_TEXT	SEGMENT
__Vptr$115640 = -16					; size = 4
__Uptr$115639 = -12					; size = 4
__Nm$ = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIPB_WII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find, COMDAT
; _this$ = ecx

; 1730 : 		{	// look for [_Ptr, _Ptr + _Count) beginnng at or after _Off

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1731 : 		_DEBUG_POINTER(_Ptr);

	push	1731					; 000006c3H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH

; 1732 : 		if (_Count == 0 && _Off <= _Mysize)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN6@find
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	ja	SHORT $LN6@find

; 1733 : 			return (_Off);	// null string always matches (if inside string)

	mov	eax, DWORD PTR __Off$[ebp]
	jmp	$LN7@find
$LN6@find:

; 1734 : 
; 1735 : 		size_type _Nm;
; 1736 : 		if (_Off < _Mysize && _Count <= (_Nm = _Mysize - _Off))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	$LN5@find
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Nm$[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	cmp	edx, DWORD PTR __Nm$[ebp]
	ja	$LN5@find

; 1737 : 			{	// room for match, look for it
; 1738 : 			const _Elem *_Uptr, *_Vptr;
; 1739 : 			for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;

	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Nm$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Nm$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	mov	DWORD PTR __Vptr$115640[ebp], eax
	jmp	SHORT $LN4@find
$LN3@find:

; 1740 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1741 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

	mov	eax, DWORD PTR __Uptr$115639[ebp]
	sub	eax, DWORD PTR __Vptr$115640[ebp]
	sar	eax, 1
	add	eax, 1
	mov	ecx, DWORD PTR __Nm$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Nm$[ebp], ecx
	mov	edx, DWORD PTR __Uptr$115639[ebp]
	add	edx, 2
	mov	DWORD PTR __Vptr$115640[ebp], edx
$LN4@find:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Nm$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Vptr$115640[ebp]
	push	edx
	call	DWORD PTR __imp_?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Uptr$115639[ebp], eax
	cmp	DWORD PTR __Uptr$115639[ebp], 0
	je	SHORT $LN5@find

; 1742 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Uptr$115639[ebp]
	push	edx
	call	DWORD PTR __imp_?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@find

; 1743 : 					return (_Uptr - _Myptr());	// found a match

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Uptr$115639[ebp]
	sub	ecx, eax
	sar	ecx, 1
	mov	eax, ecx
	jmp	SHORT $LN7@find
$LN1@find:

; 1744 : 			}

	jmp	SHORT $LN3@find
$LN5@find:

; 1745 : 
; 1746 : 		return (npos);	// no match

	or	eax, -1
$LN7@find:

; 1747 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIPB_WII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::find
_TEXT	ENDS
EXTRN	__imp_?eq@?$char_traits@_W@std@@SA_NAB_W0@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIPB_WII@Z
_TEXT	SEGMENT
tv81 = -76						; size = 4
tv71 = -76						; size = 4
__Uptr$115649 = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIPB_WII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::rfind, COMDAT
; _this$ = ecx

; 1766 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1767 : 		_DEBUG_POINTER(_Ptr);

	push	1767					; 000006e7H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH

; 1768 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN8@rfind

; 1769 : 			return (_Off < _Mysize ? _Off : _Mysize);	// null always matches

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN11@rfind
	mov	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN12@rfind
$LN11@rfind:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv71[ebp], ecx
$LN12@rfind:
	mov	eax, DWORD PTR tv71[ebp]
	jmp	$LN9@rfind
$LN8@rfind:

; 1770 : 		if (_Count <= _Mysize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	ja	$LN7@rfind

; 1771 : 			{	// room for match, look for it
; 1772 : 			const _Elem *_Uptr = _Myptr() +
; 1773 : 				(_Off < _Mysize - _Count ? _Off : _Mysize - _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Off$[ebp], ecx
	jae	SHORT $LN13@rfind
	mov	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR tv81[ebp], edx
	jmp	SHORT $LN14@rfind
$LN13@rfind:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv81[ebp], ecx
$LN14@rfind:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	edx, DWORD PTR tv81[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	mov	DWORD PTR __Uptr$115649[ebp], eax
	jmp	SHORT $LN6@rfind
$LN5@rfind:

; 1774 : 			for (; ; --_Uptr)

	mov	eax, DWORD PTR __Uptr$115649[ebp]
	sub	eax, 2
	mov	DWORD PTR __Uptr$115649[ebp], eax
$LN6@rfind:

; 1775 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1776 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Uptr$115649[ebp]
	push	ecx
	call	DWORD PTR __imp_?eq@?$char_traits@_W@std@@SA_NAB_W0@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@rfind
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Uptr$115649[ebp]
	push	edx
	call	DWORD PTR __imp_?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@rfind

; 1777 : 					return (_Uptr - _Myptr());	// found a match

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Uptr$115649[ebp]
	sub	ecx, eax
	sar	ecx, 1
	mov	eax, ecx
	jmp	SHORT $LN9@rfind
	jmp	SHORT $LN2@rfind
$LN3@rfind:

; 1778 : 				else if (_Uptr == _Myptr())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	cmp	DWORD PTR __Uptr$115649[ebp], eax
	jne	SHORT $LN2@rfind

; 1779 : 					break;	// at beginning, no more chance for match

	jmp	SHORT $LN7@rfind
$LN2@rfind:

; 1780 : 			}

	jmp	SHORT $LN5@rfind
$LN7@rfind:

; 1781 : 
; 1782 : 		return (npos);	// no match

	or	eax, -1
$LN9@rfind:

; 1783 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIPB_WII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::rfind
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::_Vector_const_iterator<int,K2VectorAllocator<int> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z PROC ; std::_Vector_iterator<int,K2VectorAllocator<int> >::_Vector_iterator<int,K2VectorAllocator<int> >, COMDAT
; _this$ = ecx

; 308  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::_Vector_const_iterator<int,K2VectorAllocator<int> >

; 309  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z ENDP ; std::_Vector_iterator<int,K2VectorAllocator<int> >::_Vector_iterator<int,K2VectorAllocator<int> >
_TEXT	ENDS
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JG@COPCNMEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ ; `string'
PUBLIC	??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ ; `string'
PUBLIC	??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReportW:PROC
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JG@COPCNMEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1JG@COPCNMEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '*', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
CONST	SEGMENT
??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ DB '('
	DB	00H, '"', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, ' ', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H
	DB	'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u'
	DB	00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ',', 00H, ' '
	DB	00H, '0', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '8', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e'
	DB	00H, '\', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??D?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QBEABHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QBEABHXZ PROC ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::operator*, COMDAT
; _this$ = ecx

; 92   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 
; 94   :  #if _HAS_ITERATOR_DEBUGGING
; 95   : 		if (this->_Mycont == 0
; 96   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 97   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR [ecx+8]
	jb	SHORT $LN1@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN2@operator
$LN1@operator:

; 98   : 			{
; 99   : 			_DEBUG_ERROR("vector iterator not dereferencable");

	push	99					; 00000063H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH

; 100  : 			_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	100					; 00000064H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	100					; 00000064H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JG@COPCNMEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 101  : 			}
; 102  :  #else
; 103  :  		_SCL_SECURE_VALIDATE(this->_Mycont != NULL);
; 104  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Mycont))->_Mylast);
; 105  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 106  : 
; 107  : 		return (*_Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 108  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QBEABHXZ ENDP ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::operator*
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,K2VectorAllocator<int> >::_Ufill
PUBLIC	?_Buy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAE_NI@Z ; std::vector<int,K2VectorAllocator<int> >::_Buy
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z$0
__unwindtable$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z$2
__ehfuncinfo$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z
_TEXT	SEGMENT
tv80 = -88						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z PROC ; std::vector<int,K2VectorAllocator<int> >::_Construct_n, COMDAT
; _this$ = ecx

; 532  : 		{	// construct from _Count * _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 		if (_Buy(_Count))

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAE_NI@Z ; std::vector<int,K2VectorAllocator<int> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Construct_

; 534  : 			{	// nonzero, fill it
; 535  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 536  : 			_Mylast = _Ufill(_Myfirst, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,K2VectorAllocator<int> >::_Ufill
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR [ecx+12], edx
	jmp	SHORT $LN5@Construct_
__catch$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z$0:

; 537  : 			_CATCH_ALL
; 538  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXXZ ; std::vector<int,K2VectorAllocator<int> >::_Tidy

; 539  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 540  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN4@Construct_
	ret	0
$LN5@Construct_:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN4@Construct_:

; 541  : 			}
; 542  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Construct_n@?$vector@HV?$K2VectorAllocator@H@@@std@@QAEXIABH@Z ENDP ; std::vector<int,K2VectorAllocator<int> >::_Construct_n
PUBLIC	??$_Destroy_range@HV?$K2VectorAllocator@H@@@std@@YAXPAH0AAV?$K2VectorAllocator@H@@@Z ; std::_Destroy_range<int,K2VectorAllocator<int> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXPAH0@Z PROC ; std::vector<int,K2VectorAllocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1082 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1083 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@HV?$K2VectorAllocator@H@@@std@@YAXPAH0AAV?$K2VectorAllocator@H@@@Z ; std::_Destroy_range<int,K2VectorAllocator<int> >
	add	esp, 12					; 0000000cH

; 1084 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,K2VectorAllocator<int> >::_Destroy
_TEXT	ENDS
PUBLIC	??0?$K2VectorAllocator@H@@QAE@ABV0@@Z		; K2VectorAllocator<int>::K2VectorAllocator<int>
EXTRN	__imp_??0_Container_base@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z$1
__ehfuncinfo$??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z PROC ; std::_Vector_val<int,K2VectorAllocator<int> >::_Vector_val<int,K2VectorAllocator<int> >, COMDAT
; _this$ = ecx

; 412  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$K2VectorAllocator@H@@QAE@ABV0@@Z	; K2VectorAllocator<int>::K2VectorAllocator<int>

; 413  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Al$[ebp]
	call	??1?$K2VectorAllocator@H@@QAE@XZ	; K2VectorAllocator<int>::~K2VectorAllocator<int>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z$0:
	lea	ecx, DWORD PTR __Al$[ebp]
	jmp	??1?$K2VectorAllocator@H@@QAE@XZ	; K2VectorAllocator<int>::~K2VectorAllocator<int>
__unwindfunclet$??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_Container_base@std@@QAE@XZ
__ehhandler$??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@HV?$K2VectorAllocator@H@@@std@@IAE@V?$K2VectorAllocator@H@@@Z ENDP ; std::_Vector_val<int,K2VectorAllocator<int> >::_Vector_val<int,K2VectorAllocator<int> >
PUBLIC	?GetInstance@CMemManager@@SAPAV1@XZ		; CMemManager::GetInstance
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2VectorAllocator@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$K2VectorAllocator@H@@QAE@XZ PROC			; K2VectorAllocator<int>::K2VectorAllocator<int>, COMDAT
; _this$ = ecx

; 118  : 	K2VectorAllocator()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>

; 119  : 	{
; 120  : 		// ensure that the memory manager is initialized.
; 121  : 		CMemManager::GetInstance();

	call	?GetInstance@CMemManager@@SAPAV1@XZ	; CMemManager::GetInstance

; 122  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$K2VectorAllocator@H@@QAE@XZ ENDP			; K2VectorAllocator<int>::K2VectorAllocator<int>
_TEXT	ENDS
PUBLIC	??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@		; `string'
PUBLIC	??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@ ; `string'
EXTRN	__imp_?Deallocate@CMemManager@@SAXPAXPBDW4MemoryType@@1F@Z:PROC
;	COMDAT ??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@
CONST	SEGMENT
??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@ DB 'ctx_STL_vector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
CONST	SEGMENT
??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@ DB 'c:\code\h'
	DB	'on\src\k2\c_memmanager.h', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?deallocate@?$K2VectorAllocator@H@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$K2VectorAllocator@H@@QAEXPAHI@Z PROC	; K2VectorAllocator<int>::deallocate, COMDAT
; _this$ = ecx

; 138  : 	void	deallocate(pointer _Ptr, size_type)		{ MemManager.Deallocate(_Ptr, "ctx_STL_vector"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	162					; 000000a2H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	3
	push	OFFSET ??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?Deallocate@CMemManager@@SAXPAXPBDW4MemoryType@@1F@Z
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$K2VectorAllocator@H@@QAEXPAHI@Z ENDP	; K2VectorAllocator<int>::deallocate
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1KO@PIPHHAPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ ; `string'
PUBLIC	??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@ ; `string'
PUBLIC	??0?$_Ranit@HHPBHABH@std@@QAE@XZ		; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
; File c:\program files\microsoft visual studio 8\vc\include\vector
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KO@PIPHHAPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1KO@PIPHHAPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, '_', 00H, 'V'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
CONST	SEGMENT
??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, '(', 00H, '(', 00H, '_', 00H, 'M'
	DB	00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H
	DB	')', 00H, '_', 00H, 'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H
	DB	'M', 00H, 'y', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H
	DB	't', 00H, 'r', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '(', 00H, '(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'v'
	DB	00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H, ')', 00H, '_', 00H
	DB	'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 't', 00H, ')', 00H, '"', 00H, ','
	DB	00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z PROC ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::_Vector_const_iterator<int,K2VectorAllocator<int> >, COMDAT
; _this$ = ecx

; 69   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@HHPBHABH@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 70   : 		{	// construct with pointer _Ptr
; 71   : 		_SCL_SECURE_VALIDATE(_Pvector == NULL || (((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast));

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN2@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	xor	eax, eax
	jne	SHORT $LN5@Vector_con
	push	OFFSET ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@Vector_con
	int	3
$LN5@Vector_con:
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1KO@PIPHHAPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@Vector_con:

; 72   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt

; 73   : 		_Myptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 74   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Ranit@HHPBHABH@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@HV?$K2VectorAllocator@H@@@std@@QAE@PAHPBV_Container_base@1@@Z ENDP ; std::_Vector_const_iterator<int,K2VectorAllocator<int> >::_Vector_const_iterator<int,K2VectorAllocator<int> >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z$0
__ehfuncinfo$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
_TEXT	SEGMENT
__Lock$8746 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z PROC ; std::_Iterator_base::_Adopt, COMDAT
; _this$ = ecx

; 154  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		if (_Mycont != _Parent)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Parent$[ebp]
	je	SHORT $LN3@Adopt

; 156  : 			{	// change parentage
; 157  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$8746[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 158  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 159  : 			if (_Parent != 0 && _Parent->_Myfirstiter != _IGNORE_MYITERLIST)

	cmp	DWORD PTR __Parent$[ebp], 0
	je	SHORT $LN1@Adopt
	mov	eax, DWORD PTR __Parent$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	je	SHORT $LN1@Adopt

; 160  : 				{	// switch to new parent
; 161  : 				_Mynextiter = _Parent->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 162  : 				((_Container_base *)_Parent)->_Myfirstiter = this;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@Adopt:

; 163  : 				}
; 164  : 			_Mycont = _Parent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent$[ebp]
	mov	DWORD PTR [eax], ecx

; 165  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$8746[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN3@Adopt:

; 166  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$8746[ebp]
	jmp	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ENDP ; std::_Iterator_base::_Adopt
PUBLIC	??0_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Ranit@HHPBHABH@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@HHPBHABH@std@@QAE@XZ PROC			; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@HHPBHABH@std@@QAE@XZ ENDP			; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::_Iterator_base, COMDAT
; _this$ = ecx

; 127  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 128  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::_Iterator_base
_TEXT	ENDS
PUBLIC	?allocate@?$K2VectorAllocator@H@@QAEPAHI@Z	; K2VectorAllocator<int>::allocate
PUBLIC	?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ ; std::vector<int,K2VectorAllocator<int> >::_Xlen
PUBLIC	?max_size@?$vector@HV?$K2VectorAllocator@H@@@std@@QBEIXZ ; std::vector<int,K2VectorAllocator<int> >::max_size
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ?_Buy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAE_NI@Z PROC ; std::vector<int,K2VectorAllocator<int> >::_Buy, COMDAT
; _this$ = ecx

; 1066 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1067 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1068 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1069 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1070 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$K2VectorAllocator@H@@@std@@QBEIXZ ; std::vector<int,K2VectorAllocator<int> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1071 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ ; std::vector<int,K2VectorAllocator<int> >::_Xlen

; 1072 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1073 : 			{	// nonempty array, allocate storage
; 1074 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2VectorAllocator@H@@QAEPAHI@Z ; K2VectorAllocator<int>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1075 : 			_Mylast = _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1076 : 			_Myend = _Myfirst + _Capacity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Capacity$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN3@Buy:

; 1077 : 			}
; 1078 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1079 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@HV?$K2VectorAllocator@H@@@std@@IAE_NI@Z ENDP ; std::vector<int,K2VectorAllocator<int> >::_Buy
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAHIHV?$K2VectorAllocator@H@@@stdext@@YAXPAHIABHAAV?$K2VectorAllocator@H@@@Z ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,K2VectorAllocator<int> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Ufill@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEPAHPAHIABH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEPAHPAHIABH@Z PROC ; std::vector<int,K2VectorAllocator<int> >::_Ufill, COMDAT
; _this$ = ecx

; 1207 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1208 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAHIHV?$K2VectorAllocator@H@@@stdext@@YAXPAHIABHAAV?$K2VectorAllocator@H@@@Z ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,K2VectorAllocator<int> >
	add	esp, 16					; 00000010H

; 1209 : 		return (_Ptr + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 1210 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@HV?$K2VectorAllocator@H@@@std@@IAEPAHPAHIABH@Z ENDP ; std::vector<int,K2VectorAllocator<int> >::_Ufill
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2VectorAllocator@H@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_al$ = 8						; size = 4
??0?$K2VectorAllocator@H@@QAE@ABV0@@Z PROC		; K2VectorAllocator<int>::K2VectorAllocator<int>, COMDAT
; _this$ = ecx

; 126  : 	K2VectorAllocator(const K2VectorAllocator &al) : std::allocator<T>(al) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$K2VectorAllocator@H@@QAE@ABV0@@Z ENDP		; K2VectorAllocator<int>::K2VectorAllocator<int>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 120  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct default allocator (do nothing)
; 122  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ?max_size@?$vector@HV?$K2VectorAllocator@H@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@HV?$K2VectorAllocator@H@@@std@@QBEIXZ PROC ; std::vector<int,K2VectorAllocator<int> >::max_size, COMDAT
; _this$ = ecx

; 707  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 708  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?max_size@?$allocator@H@std@@QBEIXZ	; std::allocator<int>::max_size

; 709  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@HV?$K2VectorAllocator@H@@@std@@QBEIXZ ENDP ; std::vector<int,K2VectorAllocator<int> >::max_size
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ
_TEXT	SEGMENT
$T121910 = -152						; size = 44
$T121911 = -108						; size = 32
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ PROC ; std::vector<int,K2VectorAllocator<int> >::_Xlen, COMDAT

; 1213 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1214 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T121911[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T121911[ebp]
	push	eax
	lea	ecx, DWORD PTR $T121910[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T121910[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T121911[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1215 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T121911[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-156]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@HV?$K2VectorAllocator@H@@@std@@KAXXZ ENDP ; std::vector<int,K2VectorAllocator<int> >::_Xlen
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
; File c:\program files\microsoft visual studio 8\vc\include\stdexcept
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 107  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 27   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 28   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 37   : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 31   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@

; 32   : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 110  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 111  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ; CMemManager::Allocate
PUBLIC	??_C@_04CGFJFPFD@none?$AA@			; `string'
;	COMDAT ??_C@_04CGFJFPFD@none?$AA@
; File c:\code\hon\src\k2\k2_stl_allocator.h
CONST	SEGMENT
??_C@_04CGFJFPFD@none?$AA@ DB 'none', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?allocate@?$K2VectorAllocator@H@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$K2VectorAllocator@H@@QAEPAHI@Z PROC		; K2VectorAllocator<int>::allocate, COMDAT
; _this$ = ecx

; 136  : 	pointer	allocate(size_type _Count)				{ return (pointer)MemManager.Allocate(_Count * sizeof(T), "ctx_STL_vector"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	160					; 000000a0H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	2
	push	OFFSET ??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ; CMemManager::Allocate
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$K2VectorAllocator@H@@QAEPAHI@Z ENDP		; K2VectorAllocator<int>::allocate
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 124  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 		{	// construct by copying (do nothing)
; 126  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 165  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 167  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 168  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??$_Destroy_range@HV?$K2VectorAllocator@H@@@std@@YAXPAH0AAV?$K2VectorAllocator@H@@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<int,K2VectorAllocator<int> >
PUBLIC	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Destroy_range@HV?$K2VectorAllocator@H@@@std@@YAXPAH0AAV?$K2VectorAllocator@H@@@Z
_TEXT	SEGMENT
$T121962 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@HV?$K2VectorAllocator@H@@@std@@YAXPAH0AAV?$K2VectorAllocator@H@@@Z PROC ; std::_Destroy_range<int,K2VectorAllocator<int> >, COMDAT

; 225  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 226  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T121962[ebp], al
	mov	dl, BYTE PTR $T121962[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@HV?$K2VectorAllocator@H@@@std@@YAXPAH0AAV?$K2VectorAllocator@H@@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<int,K2VectorAllocator<int> >
	add	esp, 16					; 00000010H

; 227  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@HV?$K2VectorAllocator@H@@@std@@YAXPAH0AAV?$K2VectorAllocator@H@@@Z ENDP ; std::_Destroy_range<int,K2VectorAllocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAHIHV?$K2VectorAllocator@H@@@std@@YAXPAHIABHAAV?$K2VectorAllocator@H@@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<int *,unsigned int,int,K2VectorAllocator<int> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAHIHV?$K2VectorAllocator@H@@@stdext@@YAXPAHIABHAAV?$K2VectorAllocator@H@@@Z
_TEXT	SEGMENT
$T121965 = -66						; size = 1
$T121966 = -65						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAHIHV?$K2VectorAllocator@H@@@stdext@@YAXPAHIABHAAV?$K2VectorAllocator@H@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,K2VectorAllocator<int> >, COMDAT

; 914  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 915  : 		_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 916  : 			_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T121965[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T121966[ebp], al
	mov	al, BYTE PTR $T121965[ebp]
	push	eax
	mov	cl, BYTE PTR $T121966[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAHIHV?$K2VectorAllocator@H@@@std@@YAXPAHIABHAAV?$K2VectorAllocator@H@@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<int *,unsigned int,int,K2VectorAllocator<int> >
	add	esp, 24					; 00000018H

; 917  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAHIHV?$K2VectorAllocator@H@@@stdext@@YAXPAHIABHAAV?$K2VectorAllocator@H@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,K2VectorAllocator<int> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z PROC ; std::_Ptr_cat<int *,int *>, COMDAT

; 1329 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1330 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1331 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1332 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ENDP ; std::_Ptr_cat<int *,int *>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@HV?$K2VectorAllocator@H@@@std@@YAXPAH0AAV?$K2VectorAllocator@H@@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@HV?$K2VectorAllocator@H@@@std@@YAXPAH0AAV?$K2VectorAllocator@H@@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<int,K2VectorAllocator<int> >, COMDAT

; 242  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 243  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@HV?$K2VectorAllocator@H@@@std@@YAXPAH0AAV?$K2VectorAllocator@H@@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<int,K2VectorAllocator<int> >
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAHIHV?$K2VectorAllocator@H@@@std@@YAXPAHIABHAAV?$K2VectorAllocator@H@@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAHIHV?$K2VectorAllocator@H@@@std@@YAXPAHIABHAAV?$K2VectorAllocator@H@@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<int *,unsigned int,int,K2VectorAllocator<int> >, COMDAT

; 415  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 416  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 417  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_fill_n@PAHIHV?$K2VectorAllocator@H@@@std@@YAXPAHIABHAAV?$K2VectorAllocator@H@@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<int *,unsigned int,int,K2VectorAllocator<int> >
_TEXT	ENDS
PUBLIC	??_C@_1BM@OHEHCOIA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@KJPBGHJA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@LOIDLIIL@?$AAc?$AA?3?$AA?2?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAk?$AA2?$AA?2?$AAc?$AA_?$AAm?$AAe?$AAm?$AAm?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?4@ ; `string'
PUBLIC	?__LINE__Var@?1??GetInstance@CMemManager@@SAPAV2@XZ@4JA@ff9028fa ; `CMemManager::GetInstance'::`2'::__LINE__Var
EXTRN	__imp_?Init@CMemManager@@AAEXXZ:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp_?s_bRequested@CMemManager@@0_NA:BYTE
EXTRN	__imp_?s_pInstance@CMemManager@@0PAV1@A:DWORD
EXTRN	__imp___wassert:PROC
EXTRN	__imp_?s_bReleased@CMemManager@@0_NA:BYTE
;	COMDAT ??_C@_1BM@OHEHCOIA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?$AA@
; File c:\code\hon\src\k2\c_memmanager.h
CONST	SEGMENT
??_C@_1BM@OHEHCOIA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, '_', 00H, 'b', 00H, 'R', 00H, 'e', 00H, 'q', 00H
	DB	'u', 00H, 'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@KJPBGHJA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@KJPBGHJA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, '_', 00H, 'b', 00H, 'R', 00H, 'e', 00H, 'l', 00H
	DB	'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@LOIDLIIL@?$AAc?$AA?3?$AA?2?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAk?$AA2?$AA?2?$AAc?$AA_?$AAm?$AAe?$AAm?$AAm?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?4@
CONST	SEGMENT
??_C@_1EE@LOIDLIIL@?$AAc?$AA?3?$AA?2?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAk?$AA2?$AA?2?$AAc?$AA_?$AAm?$AAe?$AAm?$AAm?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?4@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	'\', 00H, 'h', 00H, 'o', 00H, 'n', 00H, '\', 00H, 's', 00H, 'r'
	DB	00H, 'c', 00H, '\', 00H, 'k', 00H, '2', 00H, '\', 00H, 'c', 00H
	DB	'_', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n'
	DB	00H, 'a', 00H, 'g', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetInstance@CMemManager@@SAPAV2@XZ@4JA@ff9028fa
_DATA	SEGMENT
?__LINE__Var@?1??GetInstance@CMemManager@@SAPAV2@XZ@4JA@ff9028fa DD 0e2H ; `CMemManager::GetInstance'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
;	COMDAT ?GetInstance@CMemManager@@SAPAV1@XZ
_TEXT	SEGMENT
?GetInstance@CMemManager@@SAPAV1@XZ PROC		; CMemManager::GetInstance, COMDAT

; 226  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 227  : 	assert(!s_bReleased);

	mov	eax, DWORD PTR __imp_?s_bReleased@CMemManager@@0_NA
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@GetInstanc
	mov	edx, DWORD PTR ?__LINE__Var@?1??GetInstance@CMemManager@@SAPAV2@XZ@4JA@ff9028fa
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_1EE@LOIDLIIL@?$AAc?$AA?3?$AA?2?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAk?$AA2?$AA?2?$AAc?$AA_?$AAm?$AAe?$AAm?$AAm?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?4@
	push	OFFSET ??_C@_1BK@KJPBGHJA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@GetInstanc:

; 228  : 	if (s_pInstance == NULL)

	mov	eax, DWORD PTR __imp_?s_pInstance@CMemManager@@0PAV1@A
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@GetInstanc

; 229  : 	{
; 230  : 		assert(!s_bRequested);

	mov	eax, DWORD PTR __imp_?s_bRequested@CMemManager@@0_NA
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@GetInstanc
	mov	edx, DWORD PTR ?__LINE__Var@?1??GetInstance@CMemManager@@SAPAV2@XZ@4JA@ff9028fa
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_1EE@LOIDLIIL@?$AAc?$AA?3?$AA?2?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAk?$AA2?$AA?2?$AAc?$AA_?$AAm?$AAe?$AAm?$AAm?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?4@
	push	OFFSET ??_C@_1BM@OHEHCOIA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@GetInstanc:

; 231  : 		s_bRequested = true;

	mov	eax, DWORD PTR __imp_?s_bRequested@CMemManager@@0_NA
	mov	BYTE PTR [eax], 1

; 232  : 		s_pInstance = (CMemManager*)malloc(sizeof(CMemManager));

	push	1
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	ecx, DWORD PTR __imp_?s_pInstance@CMemManager@@0PAV1@A
	mov	DWORD PTR [ecx], eax

; 233  : #ifdef __GNUC__
; 234  : 		g_pMemManager = s_pInstance;
; 235  : #endif
; 236  : 		s_pInstance->Init();

	mov	eax, DWORD PTR __imp_?s_pInstance@CMemManager@@0PAV1@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?Init@CMemManager@@AAEXXZ
$LN1@GetInstanc:

; 237  : 	}
; 238  : 	return s_pInstance;

	mov	eax, DWORD PTR __imp_?s_pInstance@CMemManager@@0PAV1@A
	mov	eax, DWORD PTR [eax]

; 239  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstance@CMemManager@@SAPAV1@XZ ENDP		; CMemManager::GetInstance
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?Set@CMemManager@@SAPAXPAXEI@Z
_TEXT	SEGMENT
_pDest$ = 8						; size = 4
_y$ = 12						; size = 1
_z$ = 16						; size = 4
?Set@CMemManager@@SAPAXPAXEI@Z PROC			; CMemManager::Set, COMDAT

; 289  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 290  : #ifdef K2_DEBUG_MEM
; 291  : 	assert(pDest != NULL);
; 292  : 	++m_zWriteCount;
; 293  : 	m_zWriteBytes += z;
; 294  : #endif //K2_DEBUG_MEM
; 295  : 	return memset(pDest, y, z);

	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 296  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Set@CMemManager@@SAPAXPAXEI@Z ENDP			; CMemManager::Set
_TEXT	ENDS
EXTRN	__imp_?heap_malloc@MICRO_ALLOCATOR@@YAPAXPAVHeapManager@1@I@Z:PROC
EXTRN	__imp_?m_cMicroHeapManager@CMemManager@@0PAVHeapManager@MICRO_ALLOCATOR@@A:DWORD
; Function compile flags: /Odtp /ZI
;	COMDAT ?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z
_TEXT	SEGMENT
_pResult$ = -4						; size = 4
_z$ = 8							; size = 4
_szContext$ = 12					; size = 4
_eMemType$ = 16						; size = 4
_szType$ = 20						; size = 4
_szFile$ = 24						; size = 4
_nLine$ = 28						; size = 2
?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z PROC ; CMemManager::Allocate, COMDAT

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 338  : 	void* pResult;
; 339  : #ifdef K2_USE_MICRO_ALLOCATOR
; 340  : 	pResult = MICRO_ALLOCATOR::heap_malloc(m_cMicroHeapManager, z);

	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?m_cMicroHeapManager@CMemManager@@0PAVHeapManager@MICRO_ALLOCATOR@@A
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp_?heap_malloc@MICRO_ALLOCATOR@@YAPAXPAVHeapManager@1@I@Z
	add	esp, 8
	mov	DWORD PTR _pResult$[ebp], eax

; 341  : #else
; 342  : 	pResult = malloc(z);
; 343  : #endif
; 344  : 
; 345  : #ifdef K2_TRACK_MEM
; 346  : 	if (s_bTrackAllocs)
; 347  : 	{
; 348  : 		if (szContext != NULL)
; 349  : 			TRACK_ALLOC(pResult, (uint)z, eMemType, GetStr(szContext), GetStr(szType), GetStr(szFile), nLine);
; 350  : 	}
; 351  : #endif
; 352  : 	return pResult;

	mov	eax, DWORD PTR _pResult$[ebp]

; 353  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ENDP ; CMemManager::Allocate
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
PUBLIC	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z
_TEXT	SEGMENT
$T121983 = -66						; size = 1
$T121984 = -65						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z PROC	; stdext::unchecked_fill_n<int *,unsigned int,int>, COMDAT

; 3523 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 3524 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T121983[ebp], al
	mov	cl, BYTE PTR $T121983[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T121984[ebp]
	push	eax
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	mov	cl, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
	add	esp, 20					; 00000014H

; 3525 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ENDP	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z PROC ; std::_Iter_cat<int *>, COMDAT

; 798  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 799  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 800  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 801  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ENDP ; std::_Iter_cat<int *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
PUBLIC	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z		; std::_Checked_base<int *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T121989 = -69						; size = 1
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<int *,unsigned int,int>, COMDAT

; 3040 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 3041 : 		// if _OutIt is checked, this will ensure we have enough space
; 3042 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 3043 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3044 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T121989[ebp], al
	mov	cl, BYTE PTR $T121989[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
	add	esp, 16					; 00000010H

; 3045 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<int *,unsigned int,int>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<int *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Checked_base@PAH@std@@YAPAHAAPAH@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAH@std@@YAPAHAAPAH@Z PROC		; std::_Checked_base<int *>, COMDAT

; 1009 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1010 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1011 : 		return _Checked_base(_It, _Base_tag);

	mov	al, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<int *>
	add	esp, 8

; 1012 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAH@std@@YAPAHAAPAH@Z ENDP		; std::_Checked_base<int *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<int *,unsigned int,int>, COMDAT

; 2986 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2987 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n
$LN2@Fill_n:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n

; 2988 : 		*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN2@Fill_n
$LN4@Fill_n:

; 2989 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<int *>, COMDAT

; 992  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 993  : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 994  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<int *>
_TEXT	ENDS
PUBLIC	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ PROC ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ENDP ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z ; _UItoW<unsigned int>
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\xtoa.h
;	COMDAT ?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z
_TEXT	SEGMENT
$T122002 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
_ui$ = 12						; size = 4
_flags$ = 16						; size = 4
_width$ = 20						; size = 4
_base$ = 24						; size = 4
?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z PROC ; XtoW, COMDAT

; 122  : inline wstring	XtoW(unsigned int ui, int flags = 0, int width = 0, int base = 10)		{ return _UItoW(ui, flags, width, base); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR $T122002[ebp], 0
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _ui$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z ; _UItoW<unsigned int>
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR $T122002[ebp]
	or	edx, 1
	mov	DWORD PTR $T122002[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z ENDP ; XtoW
_TEXT	ENDS
PUBLIC	??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; _UItoS<unsigned int>
; Function compile flags: /Odtp /ZI
;	COMDAT ?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z
_TEXT	SEGMENT
$T122007 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
_ui$ = 12						; size = 4
_flags$ = 16						; size = 4
_width$ = 20						; size = 4
_base$ = 24						; size = 4
?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z PROC ; XtoS, COMDAT

; 132  : inline string	XtoS(unsigned int ui, int flags = 0, int width = 0, int base = 10)		{ return _UItoS(ui, flags, width, base); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR $T122007[ebp], 0
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _ui$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ; _UItoS<unsigned int>
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR $T122007[ebp]
	or	edx, 1
	mov	DWORD PTR $T122007[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?XtoS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ENDP ; XtoS
_TEXT	ENDS
PUBLIC	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::AddOutputHistory
;	COMDAT xdata$x
; File c:\code\hon\src\k2\c_console.h
xdata$x	SEGMENT
__unwindtable$??6CConsoleStream@@QAEAAV0@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6CConsoleStream@@QAEAAV0@PBD@Z$0
__ehfuncinfo$??6CConsoleStream@@QAEAAV0@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??6CConsoleStream@@QAEAAV0@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
$T122011 = -112						; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sz$ = 8						; size = 4
??6CConsoleStream@@QAEAAV0@PBD@Z PROC			; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 210  : 	CConsoleStream&	operator<<(const char *sz)			{ AddOutputHistory(sz); return *this; }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??6CConsoleStream@@QAEAAV0@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T122011[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T122011[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::AddOutputHistory
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T122011[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6CConsoleStream@@QAEAAV0@PBD@Z$0:
	lea	ecx, DWORD PTR $T122011[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__ehhandler$??6CConsoleStream@@QAEAAV0@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??6CConsoleStream@@QAEAAV0@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??6CConsoleStream@@QAEAAV0@PBD@Z ENDP			; CConsoleStream::operator<<
EXTRN	__imp_?AddOutputHistoryT@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
EXTRN	__imp_?SingleToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@2@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z$0
__ehfuncinfo$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z
_TEXT	SEGMENT
tv72 = -120						; size = 4
tv73 = -116						; size = 4
$T122021 = -112						; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sLine$ = 8						; size = 4
?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z PROC ; CConsoleStream::AddOutputHistory, COMDAT
; _this$ = ecx

; 176  : 	void			AddOutputHistory(const string &sLine)		{ AddOutputHistoryT(StringToTString(sLine)); }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sLine$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T122021[ebp]
	push	ecx
	call	DWORD PTR __imp_?SingleToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@2@@Z
	add	esp, 8
	mov	DWORD PTR tv73[ebp], eax
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv72[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?AddOutputHistoryT@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T122021[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z$0:
	lea	ecx, DWORD PTR $T122021[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ENDP ; CConsoleStream::AddOutputHistory
PUBLIC	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::AddOutputHistory
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??6CConsoleStream@@QAEAAV0@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6CConsoleStream@@QAEAAV0@PB_W@Z$0
__ehfuncinfo$??6CConsoleStream@@QAEAAV0@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??6CConsoleStream@@QAEAAV0@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@PB_W@Z
_TEXT	SEGMENT
$T122031 = -112						; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sz$ = 8						; size = 4
??6CConsoleStream@@QAEAAV0@PB_W@Z PROC			; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 211  : 	CConsoleStream&	operator<<(const wchar_t *sz)		{ AddOutputHistory(sz); return *this; }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??6CConsoleStream@@QAEAAV0@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T122031[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T122031[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::AddOutputHistory
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T122031[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6CConsoleStream@@QAEAAV0@PB_W@Z$0:
	lea	ecx, DWORD PTR $T122031[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??6CConsoleStream@@QAEAAV0@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??6CConsoleStream@@QAEAAV0@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??6CConsoleStream@@QAEAAV0@PB_W@Z ENDP			; CConsoleStream::operator<<
; Function compile flags: /Odtp /ZI
;	COMDAT ?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sLine$ = 8						; size = 4
?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CConsoleStream::AddOutputHistory, COMDAT
; _this$ = ecx

; 177  : 	void			AddOutputHistory(const wstring &sLine)		{ AddOutputHistoryT(WStringToTString(sLine)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?AddOutputHistoryT@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CConsoleStream::AddOutputHistory
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z PROC ; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 212  : 	CConsoleStream&	operator<<(const string &s)			{ AddOutputHistory(s); return *this; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::AddOutputHistory
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??6CConsoleStream@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ENDP ; CConsoleStream::operator<<
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 213  : 	CConsoleStream&	operator<<(const wstring &s)		{ AddOutputHistory(s); return *this; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::AddOutputHistory
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CConsoleStream::operator<<
_TEXT	ENDS
PUBLIC	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; XtoW
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??6CConsoleStream@@QAEAAV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6CConsoleStream@@QAEAAV0@H@Z$0
__ehfuncinfo$??6CConsoleStream@@QAEAAV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??6CConsoleStream@@QAEAAV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@H@Z
_TEXT	SEGMENT
tv75 = -120						; size = 4
tv76 = -116						; size = 4
$T122047 = -112						; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_i$ = 8							; size = 4
??6CConsoleStream@@QAEAAV0@H@Z PROC			; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 217  : 	CConsoleStream&	operator<<(int i)					{ *this << XtoA(i); return *this; }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??6CConsoleStream@@QAEAAV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	10					; 0000000aH
	push	0
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T122047[ebp]
	push	ecx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; XtoW
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv76[ebp], eax
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR tv75[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T122047[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6CConsoleStream@@QAEAAV0@H@Z$0:
	lea	ecx, DWORD PTR $T122047[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??6CConsoleStream@@QAEAAV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??6CConsoleStream@@QAEAAV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??6CConsoleStream@@QAEAAV0@H@Z ENDP			; CConsoleStream::operator<<
PUBLIC	??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; _ItoW<int>
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\xtoa.h
;	COMDAT ?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z
_TEXT	SEGMENT
$T122058 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
_flags$ = 16						; size = 4
_width$ = 20						; size = 4
_base$ = 24						; size = 4
?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z PROC ; XtoW, COMDAT

; 117  : inline wstring	XtoW(int i, int flags = 0, int width = 0, int base = 10)				{ return _ItoW(i, flags, width, base); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR $T122058[ebp], 0
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; _ItoW<int>
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR $T122058[ebp]
	or	edx, 1
	mov	DWORD PTR $T122058[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ENDP ; XtoW
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\code\hon\src\k2\c_console.h
xdata$x	SEGMENT
__unwindtable$??6CConsoleStream@@QAEAAV0@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6CConsoleStream@@QAEAAV0@I@Z$0
__ehfuncinfo$??6CConsoleStream@@QAEAAV0@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??6CConsoleStream@@QAEAAV0@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@I@Z
_TEXT	SEGMENT
tv75 = -120						; size = 4
tv76 = -116						; size = 4
$T122062 = -112						; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ui$ = 8						; size = 4
??6CConsoleStream@@QAEAAV0@I@Z PROC			; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 219  : 	CConsoleStream& operator<<(unsigned int ui)			{ *this << XtoA(ui); return *this; }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??6CConsoleStream@@QAEAAV0@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	10					; 0000000aH
	push	0
	push	0
	mov	eax, DWORD PTR _ui$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T122062[ebp]
	push	ecx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z ; XtoW
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv76[ebp], eax
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR tv75[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T122062[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6CConsoleStream@@QAEAAV0@I@Z$0:
	lea	ecx, DWORD PTR $T122062[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??6CConsoleStream@@QAEAAV0@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??6CConsoleStream@@QAEAAV0@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??6CConsoleStream@@QAEAAV0@I@Z ENDP			; CConsoleStream::operator<<
EXTRN	__imp_?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$CVec2@M@@HHH@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z$0
__ehfuncinfo$??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z
_TEXT	SEGMENT
tv75 = -120						; size = 4
tv76 = -116						; size = 4
$T122072 = -112						; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v2$ = 8						; size = 4
??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z PROC	; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 225  : 	CConsoleStream& operator<<(const CVec2f &v2)		{ *this << XtoA(v2); return *this; }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	push	0
	push	0
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T122072[ebp]
	push	ecx
	call	DWORD PTR __imp_?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$CVec2@M@@HHH@Z
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv76[ebp], eax
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR tv75[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T122072[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z$0:
	lea	ecx, DWORD PTR $T122072[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??6CConsoleStream@@QAEAAV0@ABV?$CVec2@M@@@Z ENDP	; CConsoleStream::operator<<
; Function compile flags: /Odtp /ZI
;	COMDAT ??6CConsoleStream@@QAEAAV0@D@Z
_TEXT	SEGMENT
_sz$ = -8						; size = 2
_this$ = -4						; size = 4
_c$ = 8							; size = 1
??6CConsoleStream@@QAEAAV0@D@Z PROC			; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 235  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 	char sz[2] = { 0, 0 };

	mov	BYTE PTR _sz$[ebp], 0
	mov	BYTE PTR _sz$[ebp+1], 0

; 237  : 	sz[0] = c;

	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR _sz$[ebp], al

; 238  : 
; 239  : 	*this << sz;

	lea	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??6CConsoleStream@@QAEAAV0@PBD@Z	; CConsoleStream::operator<<

; 240  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 241  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??6CConsoleStream@@QAEAAV0@D@Z ENDP			; CConsoleStream::operator<<
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??6CConsoleStream@@QAEAAV0@_W@Z PROC			; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 	wchar_t sz[2] = { 0, 0 };

	mov	WORD PTR _sz$[ebp], 0
	mov	WORD PTR _sz$[ebp+2], 0

; 247  : 	sz[0] = c;

	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR _sz$[ebp], ax

; 248  : 
; 249  : 	*this << sz;

	lea	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<

; 250  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 251  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??6CConsoleStream@@QAEAAV0@_W@Z ENDP			; CConsoleStream::operator<<
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ PROC ; CConsole::GetNewl, COMDAT
; _this$ = ecx

; 324  : 	const tstring&			GetNewl() const							{ return m_newl; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 204				; 000000ccH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ENDP ; CConsole::GetNewl
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sz$ = 8						; size = 4
??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z PROC		; CConsole::operator<<, COMDAT
; _this$ = ecx

; 368  : 	CConsoleStream&			operator<<(const TCHAR *sz)				{ return (*m_pDefaultStream) << sz; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ENDP		; CConsole::operator<<
_TEXT	ENDS
PUBLIC	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl.h
;	COMDAT ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ PROC ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 96   : 	vector()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >

; 97   : 		//: _Mybase()
; 98   : 	{
; 99   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ENDP ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Tidy
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 545  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 546  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Tidy

; 547  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::insert
PUBLIC	?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::end
PUBLIC	?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill
PUBLIC	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range
PUBLIC	?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::capacity
PUBLIC	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
_TEXT	SEGMENT
tv135 = -92						; size = 4
tv134 = -88						; size = 4
$T122102 = -84						; size = 4
$T122103 = -80						; size = 12
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::push_back, COMDAT
; _this$ = ecx

; 786  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 787  : 		if (size() < capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::capacity
	cmp	esi, eax
	jae	SHORT $LN2@push_back

; 788  : 
; 789  :  #if _HAS_ITERATOR_DEBUGGING
; 790  : 			{ // room at end, construct it there
; 791  : 			_Orphan_range(_Mylast, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range

; 792  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 793  : 			}
; 794  : 
; 795  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 796  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 797  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 798  : 
; 799  : 		else

	jmp	SHORT $LN3@push_back
$LN2@push_back:

; 800  : 			insert(end(), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T122102[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::end
	mov	DWORD PTR tv134[ebp], eax
	lea	edx, DWORD PTR $T122103[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::insert
	mov	DWORD PTR tv135[ebp], eax
	lea	ecx, DWORD PTR $T122103[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN3@push_back:

; 801  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::push_back
_TEXT	ENDS
PUBLIC	??1?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::~_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ PROC ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::~_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::~_Iterator_base
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ ENDP ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::~_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ
_TEXT	SEGMENT
$T122118 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::end, COMDAT
; _this$ = ecx

; 637  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T122118[ebp], 0

; 638  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	mov	eax, DWORD PTR $T122118[ebp]
	or	eax, 1
	mov	DWORD PTR $T122118[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 639  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::end
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size, COMDAT
; _this$ = ecx

; 702  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 703  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@size
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@size
$LN3@size:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+8]
	sar	eax, 5
	mov	DWORD PTR tv70[ebp], eax
$LN4@size:
	mov	eax, DWORD PTR tv70[ebp]

; 704  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z$1
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
tv87 = -92						; size = 4
tv86 = -88						; size = 4
$T122126 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 650  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T122126[ebp], esp
	call	??0?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv87[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 651  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 652  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 653  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
PUBLIC	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
;	COMDAT ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB DD 0ffffffffH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 720  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 721  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 722  : 		assign(_Right, 0, npos);

	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 723  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 904  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 905  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 906  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 914  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 915  : 		return (assign(_Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 916  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
PUBLIC	??_C@_1NG@GGIMPPMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAw?$AAc?$AAh?$AAa?$AAr?$AA_?$AAt?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt@ ; `string'
PUBLIC	??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1NG@GGIMPPMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAw?$AAc?$AAh?$AAa?$AAr?$AA_?$AAt?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt@
CONST	SEGMENT
??_C@_1NG@GGIMPPMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAw?$AAc?$AAh?$AAa?$AAr?$AA_?$AAt?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H
	DB	's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'w', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, ',', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, '>', 00H, ',', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'K'
	DB	00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'w', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '['
	DB	00H, ']', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??A?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??A?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAA_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator[], COMDAT
; _this$ = ecx

; 1528 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1529 : 
; 1530 :  #if _HAS_ITERATOR_DEBUGGING
; 1531 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1532 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	je	SHORT $LN2@operator@2

; 1533 : 			{
; 1534 : 			if (_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN2@operator@2

; 1535 : 				{
; 1536 : 				_DEBUG_ERROR("string subscript out of range");

	push	1536					; 00000600H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH

; 1537 : 				_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator@2
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	1537					; 00000601H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@operator@2
	int	3
$LN5@operator@2:
	push	0
	push	1537					; 00000601H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1NG@GGIMPPMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAw?$AAc?$AAh?$AAa?$AAr?$AA_?$AAt?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator@2:

; 1538 : 				}
; 1539 : 			}
; 1540 :  #else
; 1541 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);
; 1542 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1543 : 
; 1544 : 		return (_Myptr()[_Off]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]

; 1545 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAA_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator[]
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::length, COMDAT
; _this$ = ecx

; 1631 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1632 : 		return (_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 1633 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::length
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ ; std::_String_val<char,K2StringAllocator<char> >::~_String_val<char,K2StringAllocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy
PUBLIC	??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >
PUBLIC	??0?$K2StringAllocator@D@@QAE@XZ		; K2StringAllocator<char>::K2StringAllocator<char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z
_TEXT	SEGMENT
tv87 = -92						; size = 4
tv86 = -88						; size = 4
$T122162 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >, COMDAT
; _this$ = ecx

; 650  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T122162[ebp], esp
	call	??0?$K2StringAllocator@D@@QAE@XZ	; K2StringAllocator<char>::K2StringAllocator<char>
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >
	mov	DWORD PTR tv87[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 651  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy

; 652  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign

; 653  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >, COMDAT
; _this$ = ecx

; 904  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 905  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy

; 906  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
PUBLIC	??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ PROC ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_Container_base@std@@QAE@XZ
__ehhandler$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??1?$K2StringAllocator@_W@@QAE@XZ		; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>
EXTRN	__imp_??1_String_base@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ PROC ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::~_String_val<wchar_t,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ ENDP ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::~_String_val<wchar_t,K2StringAllocator<wchar_t> >
PUBLIC	??1?$K2StringAllocator@D@@QAE@XZ		; K2StringAllocator<char>::~K2StringAllocator<char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ PROC ; std::_String_val<char,K2StringAllocator<char> >::~_String_val<char,K2StringAllocator<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$K2StringAllocator@D@@QAE@XZ	; K2StringAllocator<char>::~K2StringAllocator<char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ ENDP ; std::_String_val<char,K2StringAllocator<char> >::~_String_val<char,K2StringAllocator<char> >
PUBLIC	?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE_NI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Buy
PUBLIC	??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$1
__ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -92						; size = 4
tv83 = -88						; size = 4
$T122212 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 457  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T122212[ebp], esp
	call	??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	mov	DWORD PTR tv84[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 458  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE_NI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Buy

; 459  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::capacity, COMDAT
; _this$ = ecx

; 621  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+8]
	sar	eax, 5
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 623  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::capacity
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+
PUBLIC	?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Insert_n
PUBLIC	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??G?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@1@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-
PUBLIC	?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::begin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$3
__ehfuncinfo$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
_TEXT	SEGMENT
tv141 = -128						; size = 4
tv155 = -124						; size = 4
tv149 = -124						; size = 4
tv157 = -120						; size = 4
tv147 = -120						; size = 4
tv76 = -120						; size = 4
$T122227 = -116						; size = 12
$T122230 = -104						; size = 4
$T122231 = -100						; size = 12
$T122233 = -88						; size = 4
__Off$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__Val$ = 24						; size = 4
?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::insert, COMDAT
; _this$ = ecx

; 852  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T122233[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 853  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	test	eax, eax
	jne	SHORT $LN3@insert
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@insert
$LN3@insert:
	lea	eax, DWORD PTR $T122227[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::begin
	mov	DWORD PTR tv155[ebp], eax
	mov	ecx, DWORD PTR tv155[ebp]
	mov	DWORD PTR tv141[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T122233[ebp]
	or	edx, 1
	mov	DWORD PTR $T122233[ebp], edx
	mov	eax, DWORD PTR tv141[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??G?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@1@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-
	mov	DWORD PTR tv76[ebp], eax
$LN4@insert:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR __Off$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T122233[ebp]
	and	edx, 1
	je	SHORT $LN8@insert
	and	DWORD PTR $T122233[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T122227[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN8@insert:

; 854  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T122230[ebp], esp
	lea	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv147[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Insert_n

; 855  : 		return (begin() + _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T122231[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::begin
	mov	DWORD PTR tv157[ebp], eax
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv149[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv149[ebp]
	call	??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+
	mov	ecx, DWORD PTR $T122233[ebp]
	or	ecx, 2
	mov	DWORD PTR $T122233[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T122231[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 856  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$1:
	mov	eax, DWORD PTR $T122233[ebp]
	and	eax, 1
	je	$LN7@insert
	and	DWORD PTR $T122233[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T122227[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN7@insert:
	ret	0
__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$3:
	lea	ecx, DWORD PTR $T122231[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$4:
	mov	eax, DWORD PTR $T122233[ebp]
	and	eax, 2
	je	$LN12@insert
	and	DWORD PTR $T122233[ebp], -3		; fffffffdH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN12@insert:
	ret	0
__ehhandler$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::insert
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ
_TEXT	SEGMENT
$T122250 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::begin, COMDAT
; _this$ = ecx

; 627  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T122250[ebp], 0

; 628  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	mov	eax, DWORD PTR $T122250[ebp]
	or	eax, 1
	mov	DWORD PTR $T122250[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 629  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::begin
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z$0
__ehfuncinfo$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
$T122256 = -96						; size = 4
__Tmp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+, COMDAT
; _this$ = ecx

; 367  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T122256[ebp], 0

; 368  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 369  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T122256[ebp]
	or	ecx, 1
	mov	DWORD PTR $T122256[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 370  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__unwindfunclet$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z$1:
	mov	eax, DWORD PTR $T122256[ebp]
	and	eax, 1
	je	$LN5@operator@3
	and	DWORD PTR $T122256[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN5@operator@3:
	ret	0
__ehhandler$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@ABU01@@Z ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??0_Iterator_base@std@@QAE@ABV01@@Z		; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@ABU01@@Z PROC ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@ABV01@@Z	; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@ABU01@@Z ENDP ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
_TEXT	ENDS
PUBLIC	??4_Iterator_base@std@@QAEAAV01@ABV01@@Z	; std::_Iterator_base::operator=
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??0_Iterator_base@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base@std@@QAE@ABV01@@Z PROC		; std::_Iterator_base::_Iterator_base, COMDAT
; _this$ = ecx

; 132  : 		{	// copy an iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 133  : 		*this = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base@std@@QAEAAV01@ABV01@@Z ; std::_Iterator_base::operator=

; 134  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base@std@@QAE@ABV01@@Z ENDP		; std::_Iterator_base::_Iterator_base
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z$0
__ehfuncinfo$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Lock$8739 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base@std@@QAEAAV01@ABV01@@Z PROC		; std::_Iterator_base::operator=, COMDAT
; _this$ = ecx

; 137  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		if (_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@operator@4

; 139  : 			{	// change parentage
; 140  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$8739[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 141  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 142  : 			_Adopt(_Right._Mycont);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt

; 143  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$8739[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN1@operator@4:

; 144  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 145  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z$0:
	lea	ecx, DWORD PTR __Lock$8739[ebp]
	jmp	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base@std@@QAEAAV01@ABV01@@Z ENDP		; std::_Iterator_base::operator=
PUBLIC	?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocate
PUBLIC	?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Xlen
PUBLIC	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE_NI@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Buy, COMDAT
; _this$ = ecx

; 1066 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1067 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1068 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1069 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1070 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@2

; 1071 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Xlen

; 1072 : 		else

	jmp	SHORT $LN3@Buy@2
$LN2@Buy@2:

; 1073 : 			{	// nonempty array, allocate storage
; 1074 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1075 : 			_Mylast = _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1076 : 			_Myend = _Myfirst + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
$LN3@Buy@2:

; 1077 : 			}
; 1078 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1079 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE_NI@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Buy
_TEXT	ENDS
PUBLIC	?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate
PUBLIC	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1087 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1088 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Tidy@2

; 1089 : 			{	// something to free, destroy and deallocate it
; 1090 : 
; 1091 :  #if _HAS_ITERATOR_DEBUGGING
; 1092 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base@std@@QBEXXZ

; 1093 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1094 : 
; 1095 : 			_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy

; 1096 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 5
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate
$LN1@Tidy@2:

; 1097 : 			}
; 1098 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1099 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1082 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1083 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 12					; 0000000cH

; 1084 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IABV12@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; stdext::unchecked_uninitialized_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill, COMDAT
; _this$ = ecx

; 1207 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1208 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IABV12@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; stdext::unchecked_uninitialized_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 16					; 00000010H

; 1209 : 		return (_Ptr + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Ptr$[ebp]

; 1210 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z
_TEXT	SEGMENT
__Pnext$ = -12						; size = 4
__Lock$ = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1229 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1230 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 1231 : 		const_iterator **_Pnext = (const_iterator **)&this->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Pnext$[ebp], eax
$LN5@Orphan_ran:

; 1232 : 		while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1233 : 			if ((*_Pnext)->_Myptr < _First || _Last < (*_Pnext)->_Myptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:

; 1234 : 				_Pnext = (const_iterator **)&(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1235 : 			else

	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:

; 1236 : 				{	// orphan the iterator
; 1237 : 				(*_Pnext)->_Mycont = 0;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0

; 1238 : 				*_Pnext = (const_iterator *)(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN1@Orphan_ran:

; 1239 : 				}

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1240 : 		}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
_TEXT	ENDS
;	COMDAT ??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ PROC ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 128  : 	~K2VectorAllocator() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ENDP ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z PROC ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate, COMDAT
; _this$ = ecx

; 138  : 	void	deallocate(pointer _Ptr, size_type)		{ MemManager.Deallocate(_Ptr, "ctx_STL_vector"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	162					; 000000a2H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	3
	push	OFFSET ??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?Deallocate@CMemManager@@SAXPAXPBDW4MemoryType@@1F@Z
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ENDP ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1032 : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1033 : 		return (assign(_Right, 0, npos));

	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 1034 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::erase
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
EXTRN	__imp_?_Xran@_String_base@std@@SAXXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1038 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1039 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1040 : 			_String_base::_Xran();	// _Roff off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN5@assign:

; 1041 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1042 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1043 : 			_Num = _Count;	// trim _Num to size

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
$LN4@assign:

; 1044 : 
; 1045 : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1046 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
	push	eax
	mov	ecx, DWORD PTR __Roff$[ebp]
	add	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::erase
	mov	edx, DWORD PTR __Roff$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1047 : 		else if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1048 : 			{	// make room and assign new stuff
; 1049 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Roff$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	push	eax
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H

; 1050 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN2@assign:

; 1051 : 			}
; 1052 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1053 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
EXTRN	__imp_?length@?$char_traits@_W@std@@SAIPB_W@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1069 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1070 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?length@?$char_traits@_W@std@@SAIPB_W@Z
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 1071 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?deallocate@?$K2StringAllocator@_W@@QAEXPA_WI@Z	; K2StringAllocator<wchar_t>::deallocate
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Ptr$83273 = -8					; size = 4
_this$ = -4						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2066 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2067 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy@3
	jmp	SHORT $LN3@Tidy@3
$LN4@Tidy@3:

; 2068 : 			;
; 2069 : 		else if (_BUF_SIZE <= _Myres)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 8
	jb	SHORT $LN3@Tidy@3

; 2070 : 			{	// copy any leftovers to small buffer and deallocate
; 2071 : 			_Elem *_Ptr = _Bx._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Ptr$83273[ebp], ecx

; 2072 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy@3

; 2073 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$83273[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H
$LN1@Tidy@3:

; 2074 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$83273[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2StringAllocator@_W@@QAEXPA_WI@Z ; K2StringAllocator<wchar_t>::deallocate
$LN3@Tidy@3:

; 2075 : 			}
; 2076 : 		_Myres = _BUF_SIZE - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 7

; 2077 : 		_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos

; 2078 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2087 : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2088 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 8
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv70[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv70[ebp]

; 2089 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2092 : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2093 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 8
	jb	SHORT $LN3@Myptr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Myptr@2
$LN3@Myptr@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv70[ebp], eax
$LN4@Myptr@2:
	mov	eax, DWORD PTR tv70[ebp]

; 2094 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$K2StringAllocator@_W@@QAE@ABV0@@Z		; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
EXTRN	__imp_??0_String_base@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z$1
__ehfuncinfo$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z PROC ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 471  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_String_base@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$K2StringAllocator@_W@@QAE@ABV0@@Z	; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Al$[ebp]
	call	??1?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z$0:
	lea	ecx, DWORD PTR __Al$[ebp]
	jmp	??1?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>
__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z ENDP ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 477  : 		{	// copy constructor

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_String_base@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$K2StringAllocator@_W@@QAE@ABV0@@Z	; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>

; 478  : #if defined(_DEBUG)
; 479  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	jne	SHORT $LN2@String_val

; 480  : 			{
; 481  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -3			; fffffffdH
$LN2@String_val:

; 482  : 			}
; 483  : #endif
; 484  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
EXTRN	__imp_??0?$allocator@_W@std@@QAE@XZ:PROC
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2StringAllocator@_W@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$K2StringAllocator@_W@@QAE@XZ PROC			; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>, COMDAT
; _this$ = ecx

; 78   : 	K2StringAllocator()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$allocator@_W@std@@QAE@XZ

; 79   : 	{
; 80   : 		// ensure that the memory manager is initialized.
; 81   : 		CMemManager::GetInstance();

	call	?GetInstance@CMemManager@@SAPAV1@XZ	; CMemManager::GetInstance

; 82   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$K2StringAllocator@_W@@QAE@XZ ENDP			; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$K2StringAllocator@_W@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$K2StringAllocator@_W@@QAE@XZ PROC			; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>, COMDAT
; _this$ = ecx

; 88   : 	~K2StringAllocator() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$K2StringAllocator@_W@@QAE@XZ ENDP			; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
EXTRN	__imp_?length@?$char_traits@D@std@@SAIPBD@Z:PROC
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign, COMDAT
; _this$ = ecx

; 1069 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1070 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?length@?$char_traits@D@std@@SAIPBD@Z
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign

; 1071 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
PUBLIC	?deallocate@?$K2StringAllocator@D@@QAEXPADI@Z	; K2StringAllocator<char>::deallocate
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Ptr$83466 = -8					; size = 4
_this$ = -4						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2066 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2067 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy@4
	jmp	SHORT $LN3@Tidy@4
$LN4@Tidy@4:

; 2068 : 			;
; 2069 : 		else if (_BUF_SIZE <= _Myres)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 16			; 00000010H
	jb	SHORT $LN3@Tidy@4

; 2070 : 			{	// copy any leftovers to small buffer and deallocate
; 2071 : 			_Elem *_Ptr = _Bx._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Ptr$83466[ebp], ecx

; 2072 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy@4

; 2073 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$83466[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 16					; 00000010H
$LN1@Tidy@4:

; 2074 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$83466[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2StringAllocator@D@@QAEXPADI@Z ; K2StringAllocator<char>::deallocate
$LN3@Tidy@4:

; 2075 : 			}
; 2076 : 		_Myres = _BUF_SIZE - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 15			; 0000000fH

; 2077 : 		_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos

; 2078 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$K2StringAllocator@D@@QAE@ABV0@@Z		; K2StringAllocator<char>::K2StringAllocator<char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z$1
__ehfuncinfo$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z PROC ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >, COMDAT
; _this$ = ecx

; 471  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_String_base@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$K2StringAllocator@D@@QAE@ABV0@@Z	; K2StringAllocator<char>::K2StringAllocator<char>

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Al$[ebp]
	call	??1?$K2StringAllocator@D@@QAE@XZ	; K2StringAllocator<char>::~K2StringAllocator<char>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z$0:
	lea	ecx, DWORD PTR __Al$[ebp]
	jmp	??1?$K2StringAllocator@D@@QAE@XZ	; K2StringAllocator<char>::~K2StringAllocator<char>
__unwindfunclet$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z ENDP ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >
EXTRN	__imp_??0?$allocator@D@std@@QAE@XZ:PROC
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2StringAllocator@D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$K2StringAllocator@D@@QAE@XZ PROC			; K2StringAllocator<char>::K2StringAllocator<char>, COMDAT
; _this$ = ecx

; 78   : 	K2StringAllocator()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$allocator@D@std@@QAE@XZ

; 79   : 	{
; 80   : 		// ensure that the memory manager is initialized.
; 81   : 		CMemManager::GetInstance();

	call	?GetInstance@CMemManager@@SAPAV1@XZ	; CMemManager::GetInstance

; 82   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$K2StringAllocator@D@@QAE@XZ ENDP			; K2StringAllocator<char>::K2StringAllocator<char>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$K2StringAllocator@D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$K2StringAllocator@D@@QAE@XZ PROC			; K2StringAllocator<char>::~K2StringAllocator<char>, COMDAT
; _this$ = ecx

; 88   : 	~K2StringAllocator() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$K2StringAllocator@D@@QAE@XZ ENDP			; K2StringAllocator<char>::~K2StringAllocator<char>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 308  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >

; 309  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=
; Function compile flags: /Odtp /ZI
;	COMDAT ??Y?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=, COMDAT
; _this$ = ecx

; 361  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=

; 363  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 364  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size, COMDAT
; _this$ = ecx

; 707  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 708  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::max_size

; 709  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00@Z ; stdext::_Unchecked_move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ; std::fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
PUBLIC	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
CONST	SEGMENT
??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 's', 00H, 'e', 00H, 'r', 00H, 't', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$2
__catchsym$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$6
	DD	04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$7
__unwindtable$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$5
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
_TEXT	SEGMENT
tv266 = -140						; size = 4
tv129 = -140						; size = 4
tv74 = -140						; size = 4
__Oldend$84888 = -72					; size = 4
__Ptr$84868 = -68					; size = 4
__Newvec$84867 = -64					; size = 4
__Capacity$ = -60					; size = 4
__Tmp$ = -56						; size = 32
_this$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 12
__Count$ = 20						; size = 4
__Val$ = 24						; size = 4
?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Insert_n, COMDAT
; _this$ = ecx

; 1117 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1118 : 
; 1119 :  #if _HAS_ITERATOR_DEBUGGING
; 1120 : 		if (_Where._Mycont != this
; 1121 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)

	mov	eax, DWORD PTR __Where$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN13@Insert_n
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN13@Insert_n
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Where$[ebp+8]
	jae	SHORT $LN14@Insert_n
$LN13@Insert_n:

; 1122 : 			_DEBUG_ERROR("vector insert iterator outside range");

	push	1122					; 00000462H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN14@Insert_n:

; 1123 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1124 : 
; 1125 : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1126 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1127 : 
; 1128 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN12@Insert_n
	jmp	$LN11@Insert_n
$LN12@Insert_n:

; 1129 : 			;
; 1130 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size
	sub	eax, esi
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN10@Insert_n

; 1131 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Xlen
	jmp	$LN11@Insert_n
$LN10@Insert_n:

; 1132 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN8@Insert_n

; 1133 : 			{	// not enough room, reallocate
; 1134 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1135 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	esi, DWORD PTR __Capacity$[ebp]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size
	sub	eax, esi
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv129[ebp], eax
$LN18@Insert_n:
	mov	ecx, DWORD PTR tv129[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1136 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN7@Insert_n

; 1137 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN7@Insert_n:

; 1138 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocate
	mov	DWORD PTR __Newvec$84867[ebp], eax

; 1139 : 			pointer _Ptr = _Newvec;

	mov	eax, DWORD PTR __Newvec$84867[ebp]
	mov	DWORD PTR __Ptr$84868[ebp], eax

; 1140 : 
; 1141 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 1142 : 			_Ptr = _Umove(_Myfirst, _VEC_ITER_BASE(_Where),
; 1143 : 				_Newvec);	// copy prefix

	mov	eax, DWORD PTR __Newvec$84867[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR __Ptr$84868[ebp], ecx

; 1144 : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$84868[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill
	mov	DWORD PTR tv266[ebp], eax
	mov	eax, DWORD PTR tv266[ebp]
	mov	DWORD PTR __Ptr$84868[ebp], eax

; 1145 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

	mov	eax, DWORD PTR __Ptr$84868[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	jmp	SHORT $LN19@Insert_n
__catch$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$0:

; 1146 : 			_CATCH_ALL
; 1147 : 			_Destroy(_Newvec, _Ptr);

	mov	eax, DWORD PTR __Ptr$84868[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$84867[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy

; 1148 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$84867[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate

; 1149 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1150 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$1
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$1:

; 1151 : 
; 1152 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1153 : 			if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@Insert_n

; 1154 : 				{	// destroy and deallocate old array
; 1155 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy

; 1156 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 5
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate
$LN5@Insert_n:

; 1157 : 				}
; 1158 : 
; 1159 :  #if _HAS_ITERATOR_DEBUGGING
; 1160 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base@std@@QBEXXZ

; 1161 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1162 : 
; 1163 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Newvec$84867[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1164 : 			_Mylast = _Newvec + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Newvec$84867[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1165 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$84867[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	$LN11@Insert_n
$LN8@Insert_n:

; 1166 : 			}
; 1167 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR __Where$[ebp+8]
	sar	ecx, 5
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1168 : 			{	// new stuff spills off end
; 1169 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1170 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>

; 1171 : 
; 1172 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 1173 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1174 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR __Where$[ebp+8]
	sar	edx, 5
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$2:

; 1175 : 			_CATCH_ALL
; 1176 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	push	eax
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy

; 1177 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1178 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$3:

; 1179 : 
; 1180 : 			_Mylast += _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 1181 : 
; 1182 :  #if _HAS_ITERATOR_DEBUGGING
; 1183 : 			_Orphan_range(_Where._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range

; 1184 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1185 : 
; 1186 : 			fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1187 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	call	??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ; std::fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH

; 1188 : 			}
; 1189 : 		else

	jmp	SHORT $LN11@Insert_n
$LN3@Insert_n:

; 1190 : 			{	// new stuff can all be assigned
; 1191 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Oldend$84888[ebp], ecx

; 1192 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1193 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Oldend$84888[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR __Oldend$84888[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 1194 : 
; 1195 :  #if _HAS_ITERATOR_DEBUGGING
; 1196 : 			_Orphan_range(_Where._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range

; 1197 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1198 : 
; 1199 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1200 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$84888[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR __Oldend$84888[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	call	??$_Unchecked_move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00@Z ; stdext::_Unchecked_move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 12					; 0000000cH

; 1201 : 			fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1202 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	call	??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ; std::fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH
$LN11@Insert_n:

; 1203 : 			}
; 1204 : 		}

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN16@Insert_n:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$4:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__unwindfunclet$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$5:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Insert_n
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ
_TEXT	SEGMENT
$T122394 = -152						; size = 44
$T122395 = -108						; size = 32
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Xlen, COMDAT

; 1213 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1214 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T122395[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T122395[ebp]
	push	eax
	lea	ecx, DWORD PTR $T122394[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T122394[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T122395[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1215 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T122395[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-156]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Xlen
PUBLIC	??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@ABV0@@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z$1
__ehfuncinfo$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z PROC ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 412  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@ABV0@@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >

; 413  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Al$[ebp]
	call	??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z$0:
	lea	ecx, DWORD PTR __Al$[ebp]
	jmp	??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
__unwindfunclet$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_Container_base@std@@QAE@XZ
__ehhandler$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ENDP ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ PROC ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 118  : 	K2VectorAllocator()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >

; 119  : 	{
; 120  : 		// ensure that the memory manager is initialized.
; 121  : 		CMemManager::GetInstance();

	call	?GetInstance@CMemManager@@SAPAV1@XZ	; CMemManager::GetInstance

; 122  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ENDP ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z PROC ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocate, COMDAT
; _this$ = ecx

; 136  : 	pointer	allocate(size_type _Count)				{ return (pointer)MemManager.Allocate(_Count * sizeof(T), "ctx_STL_vector"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	160					; 000000a0H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	2
	push	OFFSET ??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	push	eax
	call	?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ; CMemManager::Allocate
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ENDP ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Inside
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1056 : 		{	// assign [_Ptr, _Ptr + _Num)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1057 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign@2

; 1058 : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
	jmp	SHORT $LN3@assign@2
$LN2@assign@2:

; 1059 : 
; 1060 : 		if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign@2

; 1061 : 			{	// make room and assign new stuff
; 1062 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	push	eax
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H

; 1063 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN1@assign@2:

; 1064 : 			}
; 1065 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign@2:

; 1066 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$85088 = -8					; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1240 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1241 : 		if (_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN3@erase

; 1242 : 			_String_base::_Xran();	// _Off off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN3@erase:

; 1243 : 		if (_Mysize - _Off < _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN2@erase

; 1244 : 			_Count = _Mysize - _Off;	// trim _Count

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN2@erase:

; 1245 : 		if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@erase

; 1246 : 			{	// move elements down
; 1247 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1248 : 				_Mysize - _Off - _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	sub	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	call	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H

; 1249 : 			size_type _Newsize = _Mysize - _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$85088[ebp], ecx

; 1250 : 			_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$85088[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN1@erase:

; 1251 : 			}
; 1252 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1253 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1636 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1637 : 		return (_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 1638 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
_TEXT	ENDS
EXTRN	__imp_?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T122426 = -70						; size = 2
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2030 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2031 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

	mov	WORD PTR $T122426[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+24], ecx
	lea	edx, DWORD PTR $T122426[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Newsize$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	DWORD PTR __imp_?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
	add	esp, 8

; 2032 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Copy
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size
EXTRN	__imp_?_Xlen@_String_base@std@@SAXXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2036 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2037 : 			if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2038 : 			_String_base::_Xlen();	// result too long

	call	DWORD PTR __imp_?_Xlen@_String_base@std@@SAXXZ
$LN6@Grow:

; 2039 : 		if (_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2040 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2041 : 		else if (_Trim && _Newsize < _BUF_SIZE)

	movzx	eax, BYTE PTR __Trim$[ebp]
	test	eax, eax
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 8
	jae	SHORT $LN3@Grow

; 2042 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2043 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv80[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv80[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv80[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2044 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2045 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN4@Grow:

; 2046 : 		return (0 < _Newsize);	// return true only if more work to do

	xor	eax, eax
	cmp	eax, DWORD PTR __Newsize$[ebp]
	sbb	eax, eax
	neg	eax

; 2047 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
_TEXT	ENDS
EXTRN	__imp_??0?$allocator@_W@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2StringAllocator@_W@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_al$ = 8						; size = 4
??0?$K2StringAllocator@_W@@QAE@ABV0@@Z PROC		; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>, COMDAT
; _this$ = ecx

; 86   : 	K2StringAllocator(const K2StringAllocator &al) : std::allocator<T>(al) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$allocator@_W@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$K2StringAllocator@_W@@QAE@ABV0@@Z ENDP		; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
_TEXT	ENDS
PUBLIC	??_C@_0P@CDENJMCL@ctx_STL_string?$AA@		; `string'
;	COMDAT ??_C@_0P@CDENJMCL@ctx_STL_string?$AA@
CONST	SEGMENT
??_C@_0P@CDENJMCL@ctx_STL_string?$AA@ DB 'ctx_STL_string', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?deallocate@?$K2StringAllocator@_W@@QAEXPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$K2StringAllocator@_W@@QAEXPA_WI@Z PROC	; K2StringAllocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 98   : 	void	deallocate(pointer _Ptr, size_type)		{ MemManager.Deallocate(_Ptr, "ctx_STL_string"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	162					; 000000a2H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	3
	push	OFFSET ??_C@_0P@CDENJMCL@ctx_STL_string?$AA@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?Deallocate@CMemManager@@SAXPAXPBDW4MemoryType@@1F@Z
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$K2StringAllocator@_W@@QAEXPA_WI@Z ENDP	; K2StringAllocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Grow
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Inside
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign, COMDAT
; _this$ = ecx

; 1056 : 		{	// assign [_Ptr, _Ptr + _Num)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1057 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign@3

; 1058 : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
	jmp	SHORT $LN3@assign@3
$LN2@assign@3:

; 1059 : 
; 1060 : 		if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign@3

; 1061 : 			{	// make room and assign new stuff
; 1062 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	push	eax
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 16					; 00000010H

; 1063 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
$LN1@assign@3:

; 1064 : 			}
; 1065 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign@3:

; 1066 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::erase
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@2IB ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::npos
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::size
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::npos
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign, COMDAT
; _this$ = ecx

; 1038 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1039 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign@4

; 1040 : 			_String_base::_Xran();	// _Roff off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN5@assign@4:

; 1041 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1042 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign@4

; 1043 : 			_Num = _Count;	// trim _Num to size

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
$LN4@assign@4:

; 1044 : 
; 1045 : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign@4

; 1046 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@2IB ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::npos
	push	eax
	mov	ecx, DWORD PTR __Roff$[ebp]
	add	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::erase
	mov	edx, DWORD PTR __Roff$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::erase
	jmp	SHORT $LN2@assign@4
$LN3@assign@4:

; 1047 : 		else if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign@4

; 1048 : 			{	// make room and assign new stuff
; 1049 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	push	eax
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 16					; 00000010H

; 1050 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
$LN2@assign@4:

; 1051 : 			}
; 1052 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1053 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IBEPBDXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2092 : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2093 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 16			; 00000010H
	jb	SHORT $LN3@Myptr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Myptr@3
$LN3@Myptr@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv70[ebp], eax
$LN4@Myptr@3:
	mov	eax, DWORD PTR tv70[ebp]

; 2094 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$85182 = -8					; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::erase, COMDAT
; _this$ = ecx

; 1240 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1241 : 		if (_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN3@erase@2

; 1242 : 			_String_base::_Xran();	// _Off off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN3@erase@2:

; 1243 : 		if (_Mysize - _Off < _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN2@erase@2

; 1244 : 			_Count = _Mysize - _Off;	// trim _Count

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN2@erase@2:

; 1245 : 		if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@erase@2

; 1246 : 			{	// move elements down
; 1247 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1248 : 				_Mysize - _Off - _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	sub	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	sub	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	push	eax
	call	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
	add	esp, 16					; 00000010H

; 1249 : 			size_type _Newsize = _Mysize - _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$85182[ebp], ecx

; 1250 : 			_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$85182[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
$LN1@erase@2:

; 1251 : 			}
; 1252 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1253 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::size, COMDAT
; _this$ = ecx

; 1636 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1637 : 		return (_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 1638 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::size
_TEXT	ENDS
EXTRN	__imp_?assign@?$char_traits@D@std@@SAXAADABD@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T122449 = -69						; size = 1
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2030 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2031 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T122449[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+24], ecx
	lea	edx, DWORD PTR $T122449[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	DWORD PTR __imp_?assign@?$char_traits@D@std@@SAXAADABD@Z
	add	esp, 8

; 2032 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Copy
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2036 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2037 : 			if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow@2

; 2038 : 			_String_base::_Xlen();	// result too long

	call	DWORD PTR __imp_?_Xlen@_String_base@std@@SAXXZ
$LN6@Grow@2:

; 2039 : 		if (_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow@2

; 2040 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Copy
	jmp	SHORT $LN4@Grow@2
$LN5@Grow@2:

; 2041 : 		else if (_Trim && _Newsize < _BUF_SIZE)

	movzx	eax, BYTE PTR __Trim$[ebp]
	test	eax, eax
	je	SHORT $LN3@Grow@2
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow@2

; 2042 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2043 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN9@Grow@2
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv80[ebp], edx
	jmp	SHORT $LN10@Grow@2
$LN9@Grow@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv80[ebp], ecx
$LN10@Grow@2:
	mov	edx, DWORD PTR tv80[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow@2
$LN3@Grow@2:

; 2044 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow@2

; 2045 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
$LN4@Grow@2:

; 2046 : 		return (0 < _Newsize);	// return true only if more work to do

	xor	eax, eax
	cmp	eax, DWORD PTR __Newsize$[ebp]
	sbb	eax, eax
	neg	eax

; 2047 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Grow
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2087 : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2088 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 16			; 00000010H
	jb	SHORT $LN3@Myptr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Myptr@4
$LN3@Myptr@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv70[ebp], eax
$LN4@Myptr@4:
	mov	eax, DWORD PTR tv70[ebp]

; 2089 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
_TEXT	ENDS
EXTRN	__imp_??0?$allocator@D@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2StringAllocator@D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_al$ = 8						; size = 4
??0?$K2StringAllocator@D@@QAE@ABV0@@Z PROC		; K2StringAllocator<char>::K2StringAllocator<char>, COMDAT
; _this$ = ecx

; 86   : 	K2StringAllocator(const K2StringAllocator &al) : std::allocator<T>(al) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$allocator@D@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$K2StringAllocator@D@@QAE@ABV0@@Z ENDP		; K2StringAllocator<char>::K2StringAllocator<char>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$K2StringAllocator@D@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$K2StringAllocator@D@@QAEXPADI@Z PROC	; K2StringAllocator<char>::deallocate, COMDAT
; _this$ = ecx

; 98   : 	void	deallocate(pointer _Ptr, size_type)		{ MemManager.Deallocate(_Ptr, "ctx_STL_string"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	162					; 000000a2H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	3
	push	OFFSET ??_C@_0P@CDENJMCL@ctx_STL_string?$AA@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?Deallocate@CMemManager@@SAXPAXPBDW4MemoryType@@1F@Z
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$K2StringAllocator@D@@QAEXPADI@Z ENDP	; K2StringAllocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@1@@Z PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-, COMDAT
; _this$ = ecx

; 384  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 385  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??G?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-

; 386  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@1@@Z ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-
_TEXT	ENDS
PUBLIC	??_C@_1CDA@HBPOCOLJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
;	COMDAT ??_C@_1CDA@HBPOCOLJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1CDA@HBPOCOLJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b'
	DB	00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, '>'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'A', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 69   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 70   : 		{	// construct with pointer _Ptr
; 71   : 		_SCL_SECURE_VALIDATE(_Pvector == NULL || (((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast));

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN2@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jbe	SHORT $LN2@Vector_con@2
$LN1@Vector_con@2:
	xor	eax, eax
	jne	SHORT $LN5@Vector_con@2
	push	OFFSET ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@Vector_con@2
	int	3
$LN5@Vector_con@2:
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1CDA@HBPOCOLJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@Vector_con@2:

; 72   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt

; 73   : 		_Myptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 74   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??_C@_1OO@PBNBABMO@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@ ; `string'
PUBLIC	??_C@_1CBK@IPONBOBN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1DK@LIMPPGHH@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAM?$AAy?$AAc?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1OO@PBNBABMO@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@
CONST	SEGMENT
??_C@_1OO@PBNBABMO@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, ' ', 00H, '+', 00H, ' ', 00H, '_', 00H, 'O', 00H, 'f'
	DB	00H, 'f', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '(', 00H
	DB	'(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, ' ', 00H, '*', 00H, ')', 00H, '(', 00H, 't', 00H, 'h', 00H
	DB	'i', 00H, 's', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y'
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, ')', 00H, ')', 00H
	DB	'-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 't', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'_', 00H, 'M', 00H, 'y', 00H, 'p', 00H, 't', 00H, 'r', 00H, ' '
	DB	00H, '+', 00H, ' ', 00H, '_', 00H, 'O', 00H, 'f', 00H, 'f', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '(', 00H, '(', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c', 00H, ' ', 00H
	DB	'*', 00H, ')', 00H, '(', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's'
	DB	00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, '_', 00H, 'M', 00H, 'y', 00H, 'f', 00H, 'i', 00H, 'r', 00H
	DB	's', 00H, 't', 00H, '"', 00H, ',', 00H, ' ', 00H, '0', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CBK@IPONBOBN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1CBK@IPONBOBN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b'
	DB	00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, '>'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'A', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H
	DB	'=', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@LIMPPGHH@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAM?$AAy?$AAc?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@LIMPPGHH@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAM?$AAy?$AAc?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, '"', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, '"', 00H, ',', 00H, ' ', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=, COMDAT
; _this$ = ecx

; 146  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		_SCL_SECURE_VALIDATE(this->_Mycont != NULL);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator@5
	xor	eax, eax
	jne	SHORT $LN6@operator@5
	push	OFFSET ??_C@_1DK@LIMPPGHH@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAM?$AAy?$AAc?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	147					; 00000093H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN6@operator@5
	int	3
$LN6@operator@5:
	push	0
	push	147					; 00000093H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1CBK@IPONBOBN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN3@operator@5:

; 148  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+12]
	ja	SHORT $LN1@operator@5
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+8]
	jae	SHORT $LN2@operator@5
$LN1@operator@5:
	xor	eax, eax
	jne	SHORT $LN7@operator@5
	push	OFFSET ??_C@_1OO@PBNBABMO@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@
	push	0
	push	150					; 00000096H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN7@operator@5
	int	3
$LN7@operator@5:

; 149  : 			_Myptr + _Off <= ((_Myvec *)(this->_Mycont))->_Mylast &&
; 150  : 			_Myptr + _Off >= ((_Myvec *)(this->_Mycont))->_Myfirst);

	push	0
	push	150					; 00000096H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1CBK@IPONBOBN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator@5:

; 151  : 		_Myptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 152  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 153  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ PROC ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ ENDP ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_al$ = 8						; size = 4
??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@ABV0@@Z PROC ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 126  : 	K2VectorAllocator(const K2VectorAllocator &al) : std::allocator<T>(al) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@ABV0@@Z ENDP ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 120  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct default allocator (do nothing)
; 122  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::max_size, COMDAT
; _this$ = ecx

; 165  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 134217727	; 07ffffffH

; 167  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 168  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::max_size
_TEXT	ENDS
EXTRN	__imp_?max_size@?$allocator@_W@std@@QBEIXZ:PROC
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -76						; size = 4
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1641 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1642 : 		size_type _Num = _Mybase::_Alval.max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_?max_size@?$allocator@_W@std@@QBEIXZ
	mov	DWORD PTR __Num$[ebp], eax

; 1643 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size@3
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@max_size@3
$LN3@max_size@3:
	mov	eax, DWORD PTR __Num$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv70[ebp], eax
$LN4@max_size@3:
	mov	eax, DWORD PTR tv70[ebp]

; 1644 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z	; K2StringAllocator<wchar_t>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$5
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z
_TEXT	SEGMENT
tv149 = -96						; size = 4
tv148 = -96						; size = 4
__Ptr$ = -28						; size = 4
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2000 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2001 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 7
	mov	DWORD PTR __Newres$[ebp], eax

; 2002 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN6@Copy

; 2003 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2004 : 		else if (_Newres / 3 < _Myres / 2

	jmp	SHORT $LN5@Copy
$LN6@Copy:

; 2005 : 			&& _Myres <= max_size() - _Myres / 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 1
	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	esi, 3
	div	esi
	cmp	eax, ecx
	jae	SHORT $LN5@Copy
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+28]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+28], eax
	ja	SHORT $LN5@Copy

; 2006 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR __Newres$[ebp], ecx
$LN5@Copy:

; 2007 : 		_Elem *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 2008 : 
; 2009 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2010 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z ; K2StringAllocator<wchar_t>::allocate
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN9@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$0:

; 2011 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2012 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2013 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2014 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z ; K2StringAllocator<wchar_t>::allocate
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN11@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$1:

; 2015 : 			_CATCH_ALL
; 2016 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 2017 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2018 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$2
	ret	0
$LN11@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$2:

; 2019 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$3
	ret	0
$LN9@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$3:

; 2020 : 
; 2021 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2022 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H
$LN1@Copy:

; 2023 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 2024 : 		_Bx._Ptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2025 : 		_Myres = _Newres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 2026 : 		_Eos(_Oldlen);

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN8@Copy:

; 2027 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Copy
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2050 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2051 : 		_DEBUG_POINTER(_Ptr);

	push	2051					; 00000803H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH

; 2052 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	lea	eax, DWORD PTR [eax+edx*2]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2053 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2054 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2055 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2056 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Inside
_TEXT	ENDS
EXTRN	__imp_?max_size@?$allocator@D@std@@QBEIXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -76						; size = 4
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1641 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1642 : 		size_type _Num = _Mybase::_Alval.max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_?max_size@?$allocator@D@std@@QBEIXZ
	mov	DWORD PTR __Num$[ebp], eax

; 1643 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size@4
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@max_size@4
$LN3@max_size@4:
	mov	eax, DWORD PTR __Num$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv70[ebp], eax
$LN4@max_size@4:
	mov	eax, DWORD PTR tv70[ebp]

; 1644 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$K2StringAllocator@D@@QAEPADI@Z	; K2StringAllocator<char>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$5
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z
_TEXT	SEGMENT
tv149 = -96						; size = 4
tv148 = -96						; size = 4
__Ptr$ = -28						; size = 4
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2000 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2001 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2002 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN6@Copy@2

; 2003 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2004 : 		else if (_Newres / 3 < _Myres / 2

	jmp	SHORT $LN5@Copy@2
$LN6@Copy@2:

; 2005 : 			&& _Myres <= max_size() - _Myres / 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 1
	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	esi, 3
	div	esi
	cmp	eax, ecx
	jae	SHORT $LN5@Copy@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+28]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+28], eax
	ja	SHORT $LN5@Copy@2

; 2006 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR __Newres$[ebp], ecx
$LN5@Copy@2:

; 2007 : 		_Elem *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 2008 : 
; 2009 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2010 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2StringAllocator@D@@QAEPADI@Z ; K2StringAllocator<char>::allocate
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN9@Copy@2
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$0:

; 2011 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2012 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2013 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2014 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2StringAllocator@D@@QAEPADI@Z ; K2StringAllocator<char>::allocate
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN11@Copy@2
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$1:

; 2015 : 			_CATCH_ALL
; 2016 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy

; 2017 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2018 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$2
	ret	0
$LN11@Copy@2:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$2:

; 2019 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$3
	ret	0
$LN9@Copy@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$3:

; 2020 : 
; 2021 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy@2

; 2022 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 16					; 00000010H
$LN1@Copy@2:

; 2023 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy

; 2024 : 		_Bx._Ptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2025 : 		_Myres = _Newres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 2026 : 		_Eos(_Oldlen);

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
$LN8@Copy@2:

; 2027 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Copy
PUBLIC	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z		; std::_Debug_pointer<char>
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2050 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2051 : 		_DEBUG_POINTER(_Ptr);

	push	2051					; 00000803H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH

; 2052 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside@2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside@2
$LN2@Inside@2:

; 2053 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside@2

; 2054 : 		else

	jmp	SHORT $LN4@Inside@2
$LN3@Inside@2:

; 2055 : 			return (true);

	mov	al, 1
$LN4@Inside@2:

; 2056 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Compat
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-, COMDAT
; _this$ = ecx

; 173  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 
; 175  :  #if _HAS_ITERATOR_DEBUGGING
; 176  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Compat

; 177  :  #else
; 178  : 		_SCL_SECURE_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);
; 179  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 180  : 
; 181  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 5

; 182  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-
_TEXT	ENDS
PUBLIC	??_C@_1CBC@PGCBIKOD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CBC@PGCBIKOD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1CBC@PGCBIKOD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b'
	DB	00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, '>'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'A', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm'
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
CONST	SEGMENT
??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ DB '('
	DB	00H, '"', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, ' ', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H
	DB	'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'A', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, '"', 00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Compat, COMDAT
; _this$ = ecx

; 235  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 		if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Compat
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN3@Compat
$LN1@Compat:

; 237  : 			{
; 238  : 			_DEBUG_ERROR("vector iterators incompatible");

	push	238					; 000000eeH
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH

; 239  : 			_SCL_SECURE_INVALID_ARGUMENT;

	xor	eax, eax
	jne	SHORT $LN5@Compat
	push	OFFSET ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@Compat
	int	3
$LN5@Compat:
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1CBC@PGCBIKOD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat:

; 240  : 			}
; 241  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Compat
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 124  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 		{	// construct by copying (do nothing)
; 126  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
_TEXT	ENDS
;	COMDAT ?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z PROC	; K2StringAllocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 96   : 	pointer	allocate(size_type _Count)				{ return (pointer)MemManager.Allocate(_Count * sizeof(T), "ctx_STL_string"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	160					; 000000a0H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	2
	push	OFFSET ??_C@_0P@CDENJMCL@ctx_STL_string?$AA@
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 1
	push	eax
	call	?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ; CMemManager::Allocate
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z ENDP	; K2StringAllocator<wchar_t>::allocate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?allocate@?$K2StringAllocator@D@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$K2StringAllocator@D@@QAEPADI@Z PROC		; K2StringAllocator<char>::allocate, COMDAT
; _this$ = ecx

; 96   : 	pointer	allocate(size_type _Count)				{ return (pointer)MemManager.Allocate(_Count * sizeof(T), "ctx_STL_string"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	160					; 000000a0H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	2
	push	OFFSET ??_C@_0P@CDENJMCL@ctx_STL_string?$AA@
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ; CMemManager::Allocate
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$K2StringAllocator@D@@QAEPADI@Z ENDP		; K2StringAllocator<char>::allocate
_TEXT	ENDS
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
; File c:\program files\microsoft visual studio 8\vc\include\xutility
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		; std::_Debug_pointer<char>, COMDAT

; 1370 : 	{	// test iterator for non-singularity, const pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1371 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 1372 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:

; 1373 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ENDP		; std::_Debug_pointer<char>
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\string
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z
_TEXT	SEGMENT
tv77 = -120						; size = 4
tv82 = -116						; size = 4
$T122559 = -112						; size = 32
$T122562 = -80						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT

; 34   : 	{	// return NTCS + string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T122562[ebp], 0

; 35   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T122559[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv82[ebp], eax
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv77[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv77[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T122562[ebp]
	or	eax, 1
	mov	DWORD PTR $T122562[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T122559[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 36   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z$0:
	lea	ecx, DWORD PTR $T122559[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z$1:
	mov	eax, DWORD PTR $T122562[ebp]
	and	eax, 1
	je	$LN5@operator@6
	and	DWORD PTR $T122562[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@operator@6:
	ret	0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 929  : 		{	// append _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 930  : 		return (append(_Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append

; 931  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 944  : 		{	// append _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 945  : 		return (append(_Right, 0, npos));

	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append

; 946  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 950  : 		{	// append _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 951  : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@append

; 952  : 			_String_base::_Xran();	// _Roff off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN5@append:

; 953  : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 954  : 		if (_Num < _Count)

	mov	eax, DWORD PTR __Num$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@append

; 955  : 			_Count = _Num;	// trim _Count to size

	mov	eax, DWORD PTR __Num$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN4@append:

; 956  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
	sub	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN2@append
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+24]
	jae	SHORT $LN3@append
$LN2@append:

; 957  : 			_String_base::_Xlen();	// result too long

	call	DWORD PTR __imp_?_Xlen@_String_base@std@@SAXXZ
$LN3@append:

; 958  : 
; 959  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@append

; 960  : 			{	// make room and append new stuff
; 961  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 962  : 				_Right._Myptr() + _Roff, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Roff$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+28]
	sub	edx, DWORD PTR [ecx+24]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H

; 963  : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN1@append:

; 964  : 			}
; 965  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 966  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??$ABS@H@@YAHH@Z				; ABS<int>
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
PUBLIC	__$ArrayPad$
EXTRN	__imp_?FormatInt@@YAX_KHIH_WAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
;	COMDAT xdata$x
; File c:\code\hon\src\k2\xtoa.h
xdata$x	SEGMENT
__unwindtable$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z$0
__ehfuncinfo$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z
_TEXT	SEGMENT
$T122579 = -117						; size = 1
$T122582 = -116						; size = 4
_sReturn$ = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
_flags$ = 16						; size = 4
_width$ = 20						; size = 4
_base$ = 24						; size = 4
??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z PROC ; _ItoW<int>, COMDAT

; 86   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T122582[ebp], 0

; 87   : 	wstring sReturn;

	push	1
	lea	ecx, DWORD PTR $T122579[ebp]
	call	??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
	mov	al, BYTE PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _sReturn$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 88   : 	FormatInt(ABS(i), flags, width, base, (i < 0) ? L'-' : 0, sReturn);

	lea	eax, DWORD PTR _sReturn$[ebp]
	push	eax
	xor	ecx, ecx
	cmp	DWORD PTR _i$[ebp], 0
	setge	cl
	sub	ecx, 1
	and	ecx, 45					; 0000002dH
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	call	??$ABS@H@@YAHH@Z			; ABS<int>
	add	esp, 4
	cdq
	push	edx
	push	eax
	call	DWORD PTR __imp_?FormatInt@@YAX_KHIH_WAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	add	esp, 28					; 0000001cH

; 89   : 	return sReturn;

	lea	eax, DWORD PTR _sReturn$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR $T122582[ebp]
	or	ecx, 1
	mov	DWORD PTR $T122582[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sReturn$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 90   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z$0:
	lea	ecx, DWORD PTR _sReturn$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z$1:
	mov	eax, DWORD PTR $T122582[ebp]
	and	eax, 1
	je	$LN5@ItoW
	and	DWORD PTR $T122582[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@ItoW:
	ret	0
__ehhandler$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ENDP ; _ItoW<int>
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_mathlib.h
;	COMDAT ??$ABS@H@@YAHH@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_x$ = 8							; size = 4
??$ABS@H@@YAHH@Z PROC					; ABS<int>, COMDAT

; 241  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 242  : 	return x < 0 ? -x : x;

	cmp	DWORD PTR _x$[ebp], 0
	jge	SHORT $LN3@ABS
	mov	eax, DWORD PTR _x$[ebp]
	neg	eax
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@ABS
$LN3@ABS:
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv66[ebp], ecx
$LN4@ABS:
	mov	eax, DWORD PTR tv66[ebp]

; 243  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ABS@H@@YAHH@Z ENDP					; ABS<int>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z$1
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z
_TEXT	SEGMENT
tv87 = -92						; size = 4
tv86 = -88						; size = 4
$T122596 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Hdi$ = 8						; size = 1
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 574  : 		{	// construct empty string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T122596[ebp], esp
	call	??0?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv87[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 575  : 		if (!_Hdi._Value)

	movzx	eax, BYTE PTR __Hdi$[ebp]
	test	eax, eax
	jne	SHORT $LN1@basic_stri@2

; 576  : 			{
; 577  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -3			; fffffffdH
$LN1@basic_stri@2:

; 578  : 			}
; 579  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 580  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 1
??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it, COMDAT
; _this$ = ecx

; 554  : 		explicit _Has_debug_it(bool _Val): _Value(_Val) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR __Val$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\code\hon\src\k2\xtoa.h
xdata$x	SEGMENT
__unwindtable$??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z$0
__ehfuncinfo$??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z
_TEXT	SEGMENT
$T122610 = -117						; size = 1
$T122613 = -116						; size = 4
_sReturn$ = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_ui$ = 12						; size = 4
_flags$ = 16						; size = 4
_width$ = 20						; size = 4
_base$ = 24						; size = 4
??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z PROC ; _UItoW<unsigned int>, COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T122613[ebp], 0

; 103  : 	wstring sReturn;

	push	1
	lea	ecx, DWORD PTR $T122610[ebp]
	call	??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
	mov	al, BYTE PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _sReturn$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 104  : 	FormatInt(ui, flags, width, base, 0, sReturn);

	lea	eax, DWORD PTR _sReturn$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$[ebp]
	xor	edx, edx
	push	edx
	push	ecx
	call	DWORD PTR __imp_?FormatInt@@YAX_KHIH_WAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	add	esp, 28					; 0000001cH

; 105  : 	return sReturn;

	lea	eax, DWORD PTR _sReturn$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR $T122613[ebp]
	or	ecx, 1
	mov	DWORD PTR $T122613[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sReturn$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 106  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z$0:
	lea	ecx, DWORD PTR _sReturn$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z$1:
	mov	eax, DWORD PTR $T122613[ebp]
	and	eax, 1
	je	$LN5@UItoW
	and	DWORD PTR $T122613[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@UItoW:
	ret	0
__ehhandler$??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_UItoW@I@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IHHH@Z ENDP ; _UItoW<unsigned int>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
PUBLIC	??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@_N@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Has_debug_it::_Has_debug_it
PUBLIC	__$ArrayPad$
EXTRN	__imp_?FormatInt@@YAX_KHIHDAAV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z$0
__ehfuncinfo$??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z
_TEXT	SEGMENT
$T122624 = -117						; size = 1
$T122627 = -116						; size = 4
_sReturn$ = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_ui$ = 12						; size = 4
_flags$ = 16						; size = 4
_width$ = 20						; size = 4
_base$ = 24						; size = 4
??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z PROC ; _UItoS<unsigned int>, COMDAT

; 110  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T122627[ebp], 0

; 111  : 	string sReturn;

	push	1
	lea	ecx, DWORD PTR $T122624[ebp]
	call	??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@_N@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Has_debug_it::_Has_debug_it
	mov	al, BYTE PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _sReturn$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 112  : 	FormatInt(ui, flags, width, base, 0, sReturn);

	lea	eax, DWORD PTR _sReturn$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$[ebp]
	xor	edx, edx
	push	edx
	push	ecx
	call	DWORD PTR __imp_?FormatInt@@YAX_KHIHDAAV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z
	add	esp, 28					; 0000001cH

; 113  : 	return sReturn;

	lea	eax, DWORD PTR _sReturn$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	ecx, DWORD PTR $T122627[ebp]
	or	ecx, 1
	mov	DWORD PTR $T122627[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sReturn$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 114  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z$0:
	lea	ecx, DWORD PTR _sReturn$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__unwindfunclet$??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z$1:
	mov	eax, DWORD PTR $T122627[ebp]
	and	eax, 1
	je	$LN5@UItoS
	and	DWORD PTR $T122627[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
$LN5@UItoS:
	ret	0
__ehhandler$??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_UItoS@I@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IHHH@Z ENDP ; _UItoS<unsigned int>
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z
_TEXT	SEGMENT
tv87 = -92						; size = 4
tv86 = -88						; size = 4
$T122637 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Hdi$ = 8						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >, COMDAT
; _this$ = ecx

; 574  : 		{	// construct empty string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T122637[ebp], esp
	call	??0?$K2StringAllocator@D@@QAE@XZ	; K2StringAllocator<char>::K2StringAllocator<char>
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >
	mov	DWORD PTR tv87[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 575  : 		if (!_Hdi._Value)

	movzx	eax, BYTE PTR __Hdi$[ebp]
	test	eax, eax
	jne	SHORT $LN1@basic_stri@3

; 576  : 			{
; 577  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -3			; fffffffdH
$LN1@basic_stri@3:

; 578  : 			}
; 579  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy

; 580  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@U_Has_debug_it@01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
PUBLIC	??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >, COMDAT
; _this$ = ecx

; 720  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 721  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy

; 722  : 		assign(_Right, 0, npos);

	mov	eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@2IB ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign

; 723  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 1
??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@_N@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Has_debug_it::_Has_debug_it, COMDAT
; _this$ = ecx

; 554  : 		explicit _Has_debug_it(bool _Val): _Value(_Val) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR __Val$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Has_debug_it::_Has_debug_it
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >, COMDAT
; _this$ = ecx

; 477  : 		{	// copy constructor

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_String_base@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$K2StringAllocator@D@@QAE@ABV0@@Z	; K2StringAllocator<char>::K2StringAllocator<char>

; 478  : #if defined(_DEBUG)
; 479  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	jne	SHORT $LN2@String_val@2

; 480  : 			{
; 481  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -3			; fffffffdH
$LN2@String_val@2:

; 482  : 			}
; 483  : #endif
; 484  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?XtoW@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV12@@Z ; XtoW
PUBLIC	??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@		; `string'
;	COMDAT ??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@
; File c:\code\hon\src\k2\stringutils.h
CONST	SEGMENT
??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@ DB '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z$1
__ehfuncinfo$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z
_TEXT	SEGMENT
tv80 = -124						; size = 4
tv86 = -120						; size = 4
$T122670 = -116						; size = 32
$T122674 = -84						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 32
??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z PROC ; QuoteStr<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T122674[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 230  : 	return _T("\"") + XtoA(x) + _T("\"");

	push	OFFSET ??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	call	?XtoW@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV12@@Z ; XtoW
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@
	lea	ecx, DWORD PTR $T122670[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv86[ebp], eax
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv80[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR $T122674[ebp]
	or	edx, 1
	mov	DWORD PTR $T122674[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T122670[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _x$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 231  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z$0:
	lea	ecx, DWORD PTR _x$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z$1:
	lea	ecx, DWORD PTR $T122670[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z$2:
	mov	eax, DWORD PTR $T122674[ebp]
	and	eax, 1
	je	$LN6@QuoteStr
	and	DWORD PTR $T122674[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN6@QuoteStr:
	ret	0
__ehhandler$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$QuoteStr@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V01@@Z ENDP ; QuoteStr<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\xtoa.h
;	COMDAT ?XtoW@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV12@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?XtoW@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV12@@Z PROC ; XtoW, COMDAT

; 176  : inline const wstring&	XtoW(const wstring &s)	{ return s; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _s$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?XtoW@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV12@@Z ENDP ; XtoW
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\string
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
tv77 = -120						; size = 4
tv82 = -116						; size = 4
$T122686 = -112						; size = 32
$T122689 = -80						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT

; 54   : 	{	// return string + NTCS

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T122689[ebp], 0

; 55   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T122686[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv82[ebp], eax
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv77[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv77[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T122689[ebp]
	or	eax, 1
	mov	DWORD PTR $T122689[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T122686[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 56   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z$0:
	lea	ecx, DWORD PTR $T122686[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z$1:
	mov	eax, DWORD PTR $T122689[ebp]
	and	eax, 1
	je	$LN5@operator@7
	and	DWORD PTR $T122689[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@operator@7:
	ret	0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 934  : 		{	// append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 935  : 		return (append(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append

; 936  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 985  : 		{	// append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 986  : 		return (append(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?length@?$char_traits@_W@std@@SAIPB_W@Z
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append

; 987  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 969  : 		{	// append [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 970  : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@append@2

; 971  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
	jmp	$LN5@append@2
$LN4@append@2:

; 972  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

	mov	eax, DWORD PTR _this$[ebp]
	or	ecx, -1
	sub	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN2@append@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+24]
	jae	SHORT $LN3@append@2
$LN2@append@2:

; 973  : 			_String_base::_Xlen();	// result too long

	call	DWORD PTR __imp_?_Xlen@_String_base@std@@SAXXZ
$LN3@append@2:

; 974  : 
; 975  : 		size_type _Num;
; 976  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@append@2

; 977  : 			{	// make room and append new stuff
; 978  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	sub	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H

; 979  : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN1@append@2:

; 980  : 			}
; 981  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN5@append@2:

; 982  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
$T122705 = -65						; size = 1
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 581  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 582  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

	call	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
	mov	BYTE PTR $T122705[ebp], al
	mov	al, BYTE PTR $T122705[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First1$[ebp]
	push	ecx
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 20					; 00000014H

; 583  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 568  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 569  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 570  : 		return (_Secure);

	mov	al, BYTE PTR __Secure$[ebp]

; 571  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
EXTRN	__imp_?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 590  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
	add	esp, 16					; 00000010H

; 591  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
$T122712 = -65						; size = 1
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 581  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 582  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

	call	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
	mov	BYTE PTR $T122712[ebp], al
	mov	al, BYTE PTR $T122712[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First1$[ebp]
	push	ecx
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 20					; 00000014H

; 583  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 568  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 569  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 570  : 		return (_Secure);

	mov	al, BYTE PTR __Secure$[ebp]

; 571  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
EXTRN	__imp_?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 590  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
	add	esp, 16					; 00000010H

; 591  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z PROC		; std::_Debug_pointer<wchar_t>, COMDAT

; 1370 : 	{	// test iterator for non-singularity, const pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1371 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@2

; 1372 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN2@Debug_poin@2:

; 1373 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ENDP		; std::_Debug_pointer<wchar_t>
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
$T122721 = -65						; size = 1
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 608  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 609  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

	call	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
	mov	BYTE PTR $T122721[ebp], al
	mov	al, BYTE PTR $T122721[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First1$[ebp]
	push	ecx
	call	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
	add	esp, 20					; 00000014H

; 610  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
EXTRN	__imp_?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 617  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
	add	esp, 16					; 00000010H

; 618  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
_TEXT	SEGMENT
$T122726 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z PROC ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 225  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 226  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 8
	mov	BYTE PTR $T122726[ebp], al
	mov	dl, BYTE PTR $T122726[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 16					; 00000010H

; 227  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ENDP ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z PROC ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 1329 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1330 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1331 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1332 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ENDP ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 233  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 234  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 235  : 		_Al.destroy(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 236  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??$_Destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy, COMDAT
; _this$ = ecx

; 160  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 4

; 162  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IABV12@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
_TEXT	SEGMENT
$T122735 = -66						; size = 1
$T122736 = -65						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IABV12@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 914  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 915  : 		_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 916  : 			_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T122735[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 8
	mov	BYTE PTR $T122736[ebp], al
	mov	al, BYTE PTR $T122735[ebp]
	push	eax
	mov	cl, BYTE PTR $T122736[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 24					; 00000018H

; 917  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IABV12@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 390  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 391  : 
; 392  :  #if _HAS_ITERATOR_DEBUGGING
; 393  : //	if (_Count < 0)
; 394  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 395  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 396  : 
; 397  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 398  : 
; 399  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:

; 400  : 	for (; 0 < _Count; --_Count, ++_First)

	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], ecx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 401  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::construct
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:

; 402  : 	_CATCH_ALL

	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:
	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:

; 403  : 	for (; _Next != _First; ++_Next)

	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_fil:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 404  : 		_Al.destroy(_Next);

	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy
	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 405  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 406  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 407  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z ; std::_Construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::construct, COMDAT
; _this$ = ecx

; 155  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z ; std::_Construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 8

; 157  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::construct
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z$0
__ehfuncinfo$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T122756 = -88						; size = 4
$T122757 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z PROC ; std::_Construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 51   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 52   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 53   : 	::new (_Vptr) _T1(_Val);

	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	push	32					; 00000020H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T122757[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T122757[ebp], 0
	je	SHORT $LN3@Construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T122757[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Construct
$LN3@Construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T122756[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 54   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T122757[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z ENDP ; std::_Construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 65   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; stdext::_Unchecked_uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT
; _this$ = ecx

; 1109 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1110 : 		{	// move initializing [_First, _Last), using allocator
; 1111 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1112 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; stdext::_Unchecked_uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 16					; 00000010H

; 1113 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Move_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
_TEXT	SEGMENT
$T122775 = -66						; size = 1
$T122776 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z PROC ; stdext::_Unchecked_uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 843  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 844  : 		return (_STD _Uninit_move(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 845  : 			_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T122775[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Move_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	mov	BYTE PTR $T122776[ebp], al
	mov	dl, BYTE PTR $T122775[ebp]
	push	edx
	mov	al, BYTE PTR $T122776[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 24					; 00000018H

; 846  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z PROC ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 1009 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1010 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1011 : 		return _Checked_base(_It, _Base_tag);

	mov	al, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 8

; 1012 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ENDP ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z PROC ; std::_Move_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 1046 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1047 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1048 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1049 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ENDP ; std::_Move_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 992  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 993  : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 994  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
PUBLIC	??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??_C@_1HK@DFAOKDK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_1HK@DFAOKDK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
; File c:\program files\microsoft visual studio 8\vc\include\memory
CONST	SEGMENT
??_C@_1HK@DFAOKDK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '8', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e'
	DB	00H, '\', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H
	DB	'y', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T122786 = -125						; size = 1
$T122787 = -124						; size = 4
__Val$ = -56						; size = 32
__Next$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 213  : 	{	// use swap to instead of the copy constructor

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 214  : 	_DEBUG_RANGE(_First, _Last);

	push	214					; 000000d6H
	push	OFFSET ??_C@_1HK@DFAOKDK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 16					; 00000010H

; 215  : 	_DEBUG_POINTER(_Dest);

	push	215					; 000000d7H
	push	OFFSET ??_C@_1HK@DFAOKDK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH

; 216  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 217  : 	// empty value used in the construction
; 218  : 	typename _Alloc::value_type _Val;

	push	1
	lea	ecx, DWORD PTR $T122786[ebp]
	call	??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
	mov	al, BYTE PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Val$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 219  : 
; 220  : 	_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1
	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 221  : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov

; 222  : 		{
; 223  : 		_Al.construct(_Dest, _Val);

	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::construct

; 224  : 		_STD swap(*_Dest, *_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 8

; 225  : 		}

	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:

; 226  : 	_CATCH_ALL

	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$0:
	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 227  : 	for (; _Next != _Dest; ++_Next)

	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov

; 228  : 		_Al.destroy(_Next);

	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 229  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 230  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, __tryend$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
__tryend$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 231  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T122787[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Val$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T122787[ebp]
$LN9@Uninit_mov:

; 232  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	lea	ecx, DWORD PTR __Val$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z
_TEXT	SEGMENT
$T122804 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z PROC ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 1405 : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1406 : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T122804[ebp]
	push	ecx
	call	??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 20					; 00000014H

; 1407 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z ENDP ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z PROC ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 1377 : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1378 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@3

; 1379 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN2@Debug_poin@3:

; 1380 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z ENDP ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
_TEXT	ENDS
PUBLIC	?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::swap
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z PROC ; std::swap<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT

; 2123 : 	{	// swap _Left and _Right strings

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2124 : 	_Left.swap(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	call	?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::swap

; 2125 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ENDP ; std::swap<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z PROC ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 798  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 799  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 800  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 801  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ENDP ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 1393 : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1394 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang

; 1395 : 		{	// check for non-null pointers, valid range
; 1396 : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH

; 1397 : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH

; 1398 : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang

; 1399 : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:

; 1400 : 		}
; 1401 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z	; std::operator==<wchar_t,wchar_t>
PUBLIC	__$ArrayPad$
EXTRN	__imp_?_Swap_all@_Container_base@std@@QBEXAAV12@@Z:PROC
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z$0
__ehfuncinfo$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Tmp$119544 = -76					; size = 32
__Tres$119542 = -44					; size = 4
__Tlen$119541 = -40					; size = 4
__Tbx$119540 = -36					; size = 16
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::swap, COMDAT
; _this$ = ecx

; 1700 : 		{	// exchange contents with _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1701 : 		if (_Mybase::_Alval == _Right._Alval)

	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN2@swap

; 1702 : 			{	// same allocator, swap control information
; 1703 : 
; 1704 :  #if _HAS_ITERATOR_DEBUGGING
; 1705 : 			this->_Swap_all(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Swap_all@_Container_base@std@@QBEXAAV12@@Z

; 1706 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1707 : 
; 1708 : 			_Bxty _Tbx = _Bx;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tbx$119540[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tbx$119540[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Tbx$119540[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR __Tbx$119540[ebp+12], edx

; 1709 : 			_Bx = _Right._Bx, _Right._Bx = _Tbx;

	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR __Tbx$119540[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tbx$119540[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tbx$119540[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tbx$119540[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 1710 : 
; 1711 : 			size_type _Tlen = _Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Tlen$119541[ebp], ecx

; 1712 : 			_Mysize = _Right._Mysize, _Right._Mysize = _Tlen;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Tlen$119541[ebp]
	mov	DWORD PTR [eax+24], ecx

; 1713 : 
; 1714 : 			size_type _Tres = _Myres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR __Tres$119542[ebp], ecx

; 1715 : 			_Myres = _Right._Myres, _Right._Myres = _Tres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Tres$119542[ebp]
	mov	DWORD PTR [eax+28], ecx

; 1716 : 			}
; 1717 : 		else

	jmp	SHORT $LN3@swap
$LN2@swap:

; 1718 : 			{	// different allocator, do multiple assigns
; 1719 : 			_Myt _Tmp = *this; *this = _Right, _Right = _Tmp;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$119544[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	lea	ecx, DWORD PTR __Tmp$119544[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=

; 1720 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Tmp$119544[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN3@swap:

; 1721 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z$0:
	lea	ecx, DWORD PTR __Tmp$119544[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::swap
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z PROC		; std::operator==<wchar_t,wchar_t>, COMDAT

; 175  : 	{	// test for allocator equality (always true)

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 176  : 	return (true);

	mov	al, 1

; 177  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ENDP		; std::operator==<wchar_t,wchar_t>
_TEXT	ENDS
PUBLIC	??$_Fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ; std::_Fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z PROC ; std::fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 2976 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2977 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ; std::_Fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH

; 2978 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ENDP ; std::fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z PROC ; std::_Fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 2946 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2947 : 	_DEBUG_RANGE(_First, _Last);

	push	2947					; 00000b83H
	push	OFFSET ??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Fill
$LN2@Fill:

; 2948 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill

; 2949 : 		*_First = _Val;

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	jmp	SHORT $LN2@Fill
$LN4@Fill:

; 2950 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ENDP ; std::_Fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??$_Iter_random@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::_Iter_random<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Unchecked_move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00@Z
_TEXT	SEGMENT
$T122831 = -67						; size = 1
$T122832 = -66						; size = 1
$T122833 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00@Z PROC ; stdext::_Unchecked_move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 3497 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 3498 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3499 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T122831[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Move_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	mov	BYTE PTR $T122832[ebp], al
	mov	dl, BYTE PTR $T122831[ebp]
	push	edx
	mov	al, BYTE PTR $T122832[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T122833[ebp]
	push	eax
	call	??$_Iter_random@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::_Iter_random<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 12					; 0000000cH
	mov	cl, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 24					; 00000018H

; 3500 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00@Z ENDP ; stdext::_Unchecked_move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z PROC ; std::_Iter_random<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 839  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 840  : 	typename _Iter_random_helper<
; 841  : 		iterator_traits<_Iter1>::iterator_category, 
; 842  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 843  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 844  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ENDP ; std::_Iter_random<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::forward_iterator_tag>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T122838 = -70						; size = 1
$T122839 = -69						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
__Move_cat$ = 24					; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 2567 : 	{	// use swap to instead of the copy constructor

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 2568 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2569 : 	_BidIt2 _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 5
	shl	eax, 5
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2570 : 	_Move_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2571 : 		forward_iterator_tag(), _Move_cat, _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T122838[ebp], al
	mov	cl, BYTE PTR $T122838[ebp]
	push	ecx
	mov	dl, BYTE PTR __Move_cat$[ebp]
	push	edx
	mov	al, BYTE PTR $T122839[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2572 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2573 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::forward_iterator_tag>, COMDAT

; 2555 : 	{	// use swap instead of the copy constructor

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2556 : 	_DEBUG_RANGE(_First, _Last);

	push	2556					; 000009fcH
	push	OFFSET ??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 16					; 00000010H
$LN2@Move_backw:

; 2557 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Move_backw

; 2558 : 		_STD swap(*--_Dest, *--_Last);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR __Last$[ebp], eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, 32					; 00000020H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 8
	jmp	SHORT $LN2@Move_backw
$LN1@Move_backw:

; 2559 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2560 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
$T122844 = -65						; size = 1
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 608  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 609  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

	call	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
	mov	BYTE PTR $T122844[ebp], al
	mov	al, BYTE PTR $T122844[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First1$[ebp]
	push	ecx
	call	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
	add	esp, 20					; 00000014H

; 610  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
EXTRN	__imp_?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 617  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
	add	esp, 16					; 00000010H

; 618  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_G?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEPAXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z PROC ; std::_Destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 59   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_G?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEPAXI@Z

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ENDP ; std::_Destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEPAXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEPAXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_1CA@PHJAHMPL@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA3?$AA2?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@COCEDJJA@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA6?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@LFLFHLIG@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA2?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@DACOGBDH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA8?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@KCEAAEH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA6?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@EHOMKBEM@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA4?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@JBLFECFB@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA2?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@FBHJOOD@?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@IFOPMOGB@?$AAB?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_19KLMLHLJG@?$AAN?$AAo?$AAn?$AAe?$AA?$AA@	; `string'
EXTRN	_atexit:PROC
;	COMDAT ??_C@_1CA@PHJAHMPL@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA3?$AA2?$AAx?$AA?$AA@
; File c:\code\hon\src\k2\c_vid.h
CONST	SEGMENT
??_C@_1CA@PHJAHMPL@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA3?$AA2?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '3', 00H, '2'
	DB	00H, 'x', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@COCEDJJA@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA6?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@COCEDJJA@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA6?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '1', 00H, '6'
	DB	00H, 'x', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@LFLFHLIG@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA2?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@LFLFHLIG@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA2?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '1', 00H, '2'
	DB	00H, 'x', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@DACOGBDH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA8?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@DACOGBDH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA8?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '8', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@KCEAAEH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA6?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@KCEAAEH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA6?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '6', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@EHOMKBEM@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA4?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@EHOMKBEM@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA4?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '4', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@JBLFECFB@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA2?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@JBLFECFB@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA2?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '2', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@FBHJOOD@?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@FBHJOOD@?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ DB 'T'
	DB	00H, 'r', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	'a', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@IFOPMOGB@?$AAB?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@IFOPMOGB@?$AAB?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ DB 'B'
	DB	00H, 'i', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'a', 00H
	DB	'r', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19KLMLHLJG@?$AAN?$AAo?$AAn?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19KLMLHLJG@?$AAN?$AAo?$AAn?$AAe?$AA?$AA@ DB 'N', 00H, 'o', 00H, 'n', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??__Eg_aTextureFilteringNames@@YAXXZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??__Eg_aTextureFilteringNames@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??__Eg_aTextureFilteringNames@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$8
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__Eg_aTextureFilteringNames@@YAXXZ
text$yc	SEGMENT
__$EHRec$ = -12						; size = 12
??__Eg_aTextureFilteringNames@@YAXXZ PROC		; `dynamic initializer for 'g_aTextureFilteringNames'', COMDAT

; 34   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__Eg_aTextureFilteringNames@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 35   : 	_T("None"),

	push	OFFSET ??_C@_19KLMLHLJG@?$AAN?$AAo?$AAn?$AAe?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 36   : 	_T("Bilinear"),

	push	OFFSET ??_C@_1BC@IFOPMOGB@?$AAB?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+32
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 37   : 	_T("Trilinear"),

	push	OFFSET ??_C@_1BE@FBHJOOD@?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+64
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 38   : 	_T("Anisotropic 2x"),

	push	OFFSET ??_C@_1BO@JBLFECFB@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA2?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+96
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 39   : 	_T("Anisotropic 4x"),

	push	OFFSET ??_C@_1BO@EHOMKBEM@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA4?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+128
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 40   : 	_T("Anisotropic 6x"),

	push	OFFSET ??_C@_1BO@KCEAAEH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA6?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+160
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 41   : 	_T("Anisotropic 8x"),

	push	OFFSET ??_C@_1BO@DACOGBDH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA8?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+192
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 42   : 	_T("Anisotropic 12x"),

	push	OFFSET ??_C@_1CA@LFLFHLIG@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA2?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+224
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 43   : 	_T("Anisotropic 16x"),

	push	OFFSET ??_C@_1CA@COCEDJJA@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA6?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+256
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 44   : 	_T("Anisotropic 32x")
; 45   : };

	push	OFFSET ??_C@_1CA@PHJAHMPL@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA3?$AA2?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+288
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ??__Fg_aTextureFilteringNames@@YAXXZ ; `dynamic atexit destructor for 'g_aTextureFilteringNames''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$0:
	mov	ecx, OFFSET _g_aTextureFilteringNames
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$1:
	mov	ecx, OFFSET _g_aTextureFilteringNames+32
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$2:
	mov	ecx, OFFSET _g_aTextureFilteringNames+64
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$3:
	mov	ecx, OFFSET _g_aTextureFilteringNames+96
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$4:
	mov	ecx, OFFSET _g_aTextureFilteringNames+128
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$5:
	mov	ecx, OFFSET _g_aTextureFilteringNames+160
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$6:
	mov	ecx, OFFSET _g_aTextureFilteringNames+192
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$7:
	mov	ecx, OFFSET _g_aTextureFilteringNames+224
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$8:
	mov	ecx, OFFSET _g_aTextureFilteringNames+256
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__Eg_aTextureFilteringNames@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__Eg_aTextureFilteringNames@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__Eg_aTextureFilteringNames@@YAXXZ ENDP		; `dynamic initializer for 'g_aTextureFilteringNames''
PUBLIC	??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z ; CCvar<bool,bool>::CCvar<bool,bool>
PUBLIC	??_C@_1CA@LJHLABKG@?$AAk?$AAe?$AAy?$AA_?$AAd?$AAe?$AAb?$AAu?$AAg?$AAE?$AAv?$AAe?$AAn?$AAt?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CA@LJHLABKG@?$AAk?$AAe?$AAy?$AA_?$AAd?$AAe?$AAb?$AAu?$AAg?$AAE?$AAv?$AAe?$AAn?$AAt?$AAs?$AA?$AA@
; File c:\code\hon\src\shell\main_win32.cpp
CONST	SEGMENT
??_C@_1CA@LJHLABKG@?$AAk?$AAe?$AAy?$AA_?$AAd?$AAe?$AAb?$AAu?$AAg?$AAE?$AAv?$AAe?$AAn?$AAt?$AAs?$AA?$AA@ DB 'k'
	DB	00H, 'e', 00H, 'y', 00H, '_', 00H, 'd', 00H, 'e', 00H, 'b', 00H
	DB	'u', 00H, 'g', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__Ekey_debugEvents@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__Ekey_debugEvents@@YAXXZ$0
__ehfuncinfo$??__Ekey_debugEvents@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__Ekey_debugEvents@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__Ekey_debugEvents@@YAXXZ
text$yc	SEGMENT
$T122872 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__Ekey_debugEvents@@YAXXZ PROC			; `dynamic initializer for 'key_debugEvents'', COMDAT

; 42   : CVAR_BOOL(key_debugEvents,	false);

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__Ekey_debugEvents@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1CA@LJHLABKG@?$AAk?$AAe?$AAy?$AA_?$AAd?$AAe?$AAb?$AAu?$AAg?$AAE?$AAv?$AAe?$AAn?$AAt?$AAs?$AA?$AA@
	lea	ecx, DWORD PTR $T122872[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR $T122872[ebp]
	push	eax
	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z ; CCvar<bool,bool>::CCvar<bool,bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T122872[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__Fkey_debugEvents@@YAXXZ	; `dynamic atexit destructor for 'key_debugEvents''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__Ekey_debugEvents@@YAXXZ$0:
	lea	ecx, DWORD PTR $T122872[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__Ekey_debugEvents@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__Ekey_debugEvents@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__Ekey_debugEvents@@YAXXZ ENDP			; `dynamic initializer for 'key_debugEvents''
PUBLIC	??_7?$CCvar@_N_N@@6B@				; CCvar<bool,bool>::`vftable'
PUBLIC	?GetString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CCvar<bool,bool>::GetString
PUBLIC	?Set@?$CCvar@_N_N@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CCvar<bool,bool>::Set
PUBLIC	?SetIndex@?$CCvar@_N_N@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CCvar<bool,bool>::SetIndex
PUBLIC	?Inc@?$CCvar@_N_N@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CCvar<bool,bool>::Inc
PUBLIC	?Toggle@?$CCvar@_N_N@@UAEXXZ			; CCvar<bool,bool>::Toggle
PUBLIC	?Reset@?$CCvar@_N_N@@UAEXXZ			; CCvar<bool,bool>::Reset
PUBLIC	?IsDefault@?$CCvar@_N_N@@UBE_NXZ		; CCvar<bool,bool>::IsDefault
PUBLIC	?StoreValue@?$CCvar@_N_N@@UAEXXZ		; CCvar<bool,bool>::StoreValue
PUBLIC	?RestoreStored@?$CCvar@_N_N@@UAEXXZ		; CCvar<bool,bool>::RestoreStored
PUBLIC	?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CCvar<bool,bool>::GetRangeString
EXTRN	__imp_??1ICvar@@UAE@XZ:PROC
EXTRN	__imp_?DefaultCvar_Cmd@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:PROC
EXTRN	__imp_??0ICvar@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HW4ECvarType@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z:PROC
EXTRN	??_E?$CCvar@_N_N@@UAEPAXI@Z:PROC		; CCvar<bool,bool>::`vector deleting destructor'
EXTRN	?Execute@CConsoleElement@@UAEXABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:PROC ; CConsoleElement::Execute
EXTRN	?Evaluate@CConsoleElement@@UAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:PROC ; CConsoleElement::Evaluate
EXTRN	?Precache@CConsoleElement@@UAE_NABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:PROC ; CConsoleElement::Precache
;	COMDAT ??_7?$CCvar@_N_N@@6B@
; File c:\code\hon\src\k2\c_cvar.h
CONST	SEGMENT
??_7?$CCvar@_N_N@@6B@ DD FLAT:??_E?$CCvar@_N_N@@UAEPAXI@Z ; CCvar<bool,bool>::`vftable'
	DD	FLAT:?Execute@CConsoleElement@@UAEXABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	FLAT:?Evaluate@CConsoleElement@@UAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	FLAT:?Precache@CConsoleElement@@UAE_NABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	FLAT:?GetString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
	DD	FLAT:?Set@?$CCvar@_N_N@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	FLAT:?SetIndex@?$CCvar@_N_N@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	FLAT:?Inc@?$CCvar@_N_N@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	FLAT:?Toggle@?$CCvar@_N_N@@UAEXXZ
	DD	FLAT:?Reset@?$CCvar@_N_N@@UAEXXZ
	DD	FLAT:?IsDefault@?$CCvar@_N_N@@UBE_NXZ
	DD	FLAT:?StoreValue@?$CCvar@_N_N@@UAEXXZ
	DD	FLAT:?RestoreStored@?$CCvar@_N_N@@UAEXXZ
	DD	FLAT:?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$1
__ehfuncinfo$??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
_TEXT	SEGMENT
_vArgList2$66197 = -36					; size = 20
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sName$ = 8						; size = 4
__Default$ = 12						; size = 1
_iFlags$ = 16						; size = 4
_pfnCmd$ = 20						; size = 4
??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z PROC ; CCvar<bool,bool>::CCvar<bool,bool>, COMDAT
; _this$ = ecx

; 851  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pfnCmd$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _iFlags$[ebp]
	or	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _sName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0ICvar@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HW4ECvarType@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CCvar@_N_N@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR __Default$[ebp]
	mov	BYTE PTR [eax+268], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR __Default$[ebp]
	mov	BYTE PTR [eax+269], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR __Default$[ebp]
	mov	BYTE PTR [eax+270], cl

; 852  : 	if (m_bInherentValue)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	test	ecx, ecx
	je	SHORT $LN2@CCvar

; 853  : 	{
; 854  : 		tsvector vArgList2;

	lea	ecx, DWORD PTR _vArgList2$66197[ebp]
	call	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 855  : 		vArgList2.push_back(m_sInherentValue);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	lea	ecx, DWORD PTR _vArgList2$66197[ebp]
	call	?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::push_back

; 856  : 
; 857  : 		DefaultCvar_Cmd(this, vArgList2);

	lea	eax, DWORD PTR _vArgList2$66197[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	DWORD PTR __imp_?DefaultCvar_Cmd@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	add	esp, 8

; 858  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _vArgList2$66197[ebp]
	call	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
$LN2@CCvar:

; 859  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1ICvar@@UAE@XZ
__unwindfunclet$??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$1:
	lea	ecx, DWORD PTR _vArgList2$66197[ebp]
	jmp	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
__ehhandler$??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CCvar@_N_N@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_NHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z ENDP ; CCvar<bool,bool>::CCvar<bool,bool>
PUBLIC	??1?$CCvar@_N_N@@UAE@XZ				; CCvar<bool,bool>::~CCvar<bool,bool>
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CCvar@_N_N@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CCvar@_N_N@@UAEPAXI@Z PROC			; CCvar<bool,bool>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CCvar@_N_N@@UAE@XZ			; CCvar<bool,bool>::~CCvar<bool,bool>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CCvar@_N_N@@UAEPAXI@Z ENDP			; CCvar<bool,bool>::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_?Modified@ICvar@@QAEXXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?Toggle@?$CCvar@_N_N@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Toggle@?$CCvar@_N_N@@UAEXXZ PROC			; CCvar<bool,bool>::Toggle, COMDAT
; _this$ = ecx

; 1175 : template <> inline void	CCvar<bool>::Toggle()	{ m_Value = m_Value ? false : true; Modified(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+269]
	test	ecx, ecx
	sete	dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+269], dl
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Modified@ICvar@@QAEXXZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Toggle@?$CCvar@_N_N@@UAEXXZ ENDP			; CCvar<bool,bool>::Toggle
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$CCvar@_N_N@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CCvar@_N_N@@UAE@XZ PROC				; CCvar<bool,bool>::~CCvar<bool,bool>, COMDAT
; _this$ = ecx

; 306  : 	~CCvar() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CCvar@_N_N@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1ICvar@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CCvar@_N_N@@UAE@XZ ENDP				; CCvar<bool,bool>::~CCvar<bool,bool>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?Reset@?$CCvar@_N_N@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@?$CCvar@_N_N@@UAEXXZ PROC			; CCvar<bool,bool>::Reset, COMDAT
; _this$ = ecx

; 308  : 	void			Reset()										{ if (m_Value == m_Default) return; m_Value = m_Default; Modified(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+269]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+268]
	cmp	ecx, eax
	jne	SHORT $LN1@Reset
	jmp	SHORT $LN2@Reset
$LN1@Reset:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+268]
	mov	BYTE PTR [eax+269], dl
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Modified@ICvar@@QAEXXZ
$LN2@Reset:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@?$CCvar@_N_N@@UAEXXZ ENDP			; CCvar<bool,bool>::Reset
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsDefault@?$CCvar@_N_N@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDefault@?$CCvar@_N_N@@UBE_NXZ PROC			; CCvar<bool,bool>::IsDefault, COMDAT
; _this$ = ecx

; 309  : 	bool			IsDefault() const							{ return m_Value == m_Default; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+269]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+268]
	xor	edx, edx
	cmp	ecx, eax
	sete	dl
	mov	al, dl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDefault@?$CCvar@_N_N@@UBE_NXZ ENDP			; CCvar<bool,bool>::IsDefault
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?StoreValue@?$CCvar@_N_N@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StoreValue@?$CCvar@_N_N@@UAEXXZ PROC			; CCvar<bool,bool>::StoreValue, COMDAT
; _this$ = ecx

; 312  : 	void			StoreValue()								{ m_Stored = m_Value; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+269]
	mov	BYTE PTR [eax+270], dl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?StoreValue@?$CCvar@_N_N@@UAEXXZ ENDP			; CCvar<bool,bool>::StoreValue
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?RestoreStored@?$CCvar@_N_N@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RestoreStored@?$CCvar@_N_N@@UAEXXZ PROC		; CCvar<bool,bool>::RestoreStored, COMDAT
; _this$ = ecx

; 313  : 	void			RestoreStored()								{ m_Value = m_Stored; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+270]
	mov	BYTE PTR [eax+269], dl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreStored@?$CCvar@_N_N@@UAEXXZ ENDP		; CCvar<bool,bool>::RestoreStored
_TEXT	ENDS
PUBLIC	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_N0@Z ; XtoW
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
_TEXT	SEGMENT
$T122908 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ PROC ; CCvar<bool,bool>::GetString, COMDAT
; _this$ = ecx

; 315  : 	tstring			GetString() const							{ return XtoA(m_Value); }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T122908[ebp], 0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+269]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_N0@Z ; XtoW
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T122908[ebp]
	or	eax, 1
	mov	DWORD PTR $T122908[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ENDP ; CCvar<bool,bool>::GetString
_TEXT	ENDS
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_19FKLFLPMF@?$AAt?$AAr?$AAu?$AAe?$AA?$AA@	; `string'
PUBLIC	??_C@_13JGCMLPCH@?$AA1?$AA?$AA@			; `string'
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
; File c:\code\hon\src\k2\xtoa.h
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19FKLFLPMF@?$AAt?$AAr?$AAu?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19FKLFLPMF@?$AAt?$AAr?$AAu?$AAe?$AA?$AA@ DB 't', 00H, 'r', 00H, 'u', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13JGCMLPCH@?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_13JGCMLPCH@?$AA1?$AA?$AA@ DB '1', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_N0@Z
_TEXT	SEGMENT
tv71 = -80						; size = 4
tv74 = -76						; size = 4
tv68 = -72						; size = 4
$T122919 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
_b$ = 12						; size = 1
_bNum$ = 16						; size = 1
?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_N0@Z PROC ; XtoW, COMDAT

; 166  : inline wstring	XtoW(bool b, bool bNum = false)	{ return (bNum ? (b ? L"1" : L"0") : (b ? L"true" : L"false")); }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR $T122919[ebp], 0
	movzx	eax, BYTE PTR _bNum$[ebp]
	test	eax, eax
	je	SHORT $LN7@XtoW
	movzx	ecx, BYTE PTR _b$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@XtoW
	mov	DWORD PTR tv68[ebp], OFFSET ??_C@_13JGCMLPCH@?$AA1?$AA?$AA@
	jmp	SHORT $LN4@XtoW
$LN3@XtoW:
	mov	DWORD PTR tv68[ebp], OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
$LN4@XtoW:
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN8@XtoW
$LN7@XtoW:
	movzx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	je	SHORT $LN5@XtoW
	mov	DWORD PTR tv71[ebp], OFFSET ??_C@_19FKLFLPMF@?$AAt?$AAr?$AAu?$AAe?$AA?$AA@
	jmp	SHORT $LN6@XtoW
$LN5@XtoW:
	mov	DWORD PTR tv71[ebp], OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
$LN6@XtoW:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR tv74[ebp], ecx
$LN8@XtoW:
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T122919[ebp]
	or	eax, 1
	mov	DWORD PTR $T122919[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_N0@Z ENDP ; XtoW
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\c_cvar.h
_TEXT	ENDS
;	COMDAT ?SetIndex@?$CCvar@_N_N@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_uiIndex$ = 8						; size = 4
_s$ = 12						; size = 4
?SetIndex@?$CCvar@_N_N@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CCvar<bool,bool>::SetIndex, COMDAT
; _this$ = ecx

; 321  : 	void			SetIndex(uint uiIndex, const tstring &s)	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetIndex@?$CCvar@_N_N@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CCvar<bool,bool>::SetIndex
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?Inc@?$CCvar@_N_N@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?Inc@?$CCvar@_N_N@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CCvar<bool,bool>::Inc, COMDAT
; _this$ = ecx

; 323  : 	inline void		Inc(const tstring &s)						{}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inc@?$CCvar@_N_N@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CCvar<bool,bool>::Inc
_TEXT	ENDS
PUBLIC	?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z ; AtoX
; Function compile flags: /Odtp /ZI
;	COMDAT ?Set@?$CCvar@_N_N@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_Value$ = -5						; size = 1
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?Set@?$CCvar@_N_N@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CCvar<bool,bool>::Set, COMDAT
; _this$ = ecx

; 960  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 961  : 	T Value;
; 962  : 
; 963  : 	AtoX(s, Value);

	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z ; AtoX
	add	esp, 8

; 964  : 
; 965  : 	if (Value != m_Value)

	movzx	eax, BYTE PTR _Value$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+269]
	cmp	eax, edx
	je	SHORT $LN2@Set

; 966  : 	{
; 967  : 		m_Value = Value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _Value$[ebp]
	mov	BYTE PTR [eax+269], cl

; 968  : 		Modified();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Modified@ICvar@@QAEXXZ
$LN2@Set:

; 969  : 	}
; 970  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@?$CCvar@_N_N@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CCvar<bool,bool>::Set
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	?WTOF@@YANABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; WTOF
PUBLIC	?CompareNoCase@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z ; CompareNoCase
;	COMDAT __real@0000000000000000
; File c:\code\hon\src\k2\xtoa.h
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z$0
__ehfuncinfo$?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z
_TEXT	SEGMENT
tv79 = -116						; size = 4
$T122929 = -109						; size = 1
$T122930 = -108						; size = 32
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
_b$ = 12						; size = 4
?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z PROC ; AtoX, COMDAT

; 193  : inline bool&	AtoX(const wstring &s, bool &b)			{ if (CompareNoCase(s, L"true") == 0) b = true; else b = (WTOF(s) != 0.0f);  return b; }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_19FKLFLPMF@?$AAt?$AAr?$AAu?$AAe?$AA?$AA@
	lea	ecx, DWORD PTR $T122930[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T122930[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?CompareNoCase@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z ; CompareNoCase
	add	esp, 8
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	BYTE PTR $T122929[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T122930[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	movzx	edx, BYTE PTR $T122929[ebp]
	test	edx, edx
	je	SHORT $LN2@AtoX
	mov	eax, DWORD PTR _b$[ebp]
	mov	BYTE PTR [eax], 1
	jmp	SHORT $LN1@AtoX
$LN2@AtoX:
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?WTOF@@YANABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; WTOF
	add	esp, 4
	fldz
	fxch	ST(1)
	fucomip	ST(1)
	fstp	ST(0)
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@AtoX
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN6@AtoX
$LN5@AtoX:
	mov	DWORD PTR tv79[ebp], 0
$LN6@AtoX:
	mov	ecx, DWORD PTR _b$[ebp]
	mov	dl, BYTE PTR tv79[ebp]
	mov	BYTE PTR [ecx], dl
$LN1@AtoX:
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z$0:
	lea	ecx, DWORD PTR $T122930[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AtoX@@YAAA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AA_N@Z ENDP ; AtoX
PUBLIC	??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z ; _CompareNoCase<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\stringutils.h
;	COMDAT ?CompareNoCase@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?CompareNoCase@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z PROC ; CompareNoCase, COMDAT

; 100  : inline int	CompareNoCase(const wstring &s1, const wstring &s2)	{ return _CompareNoCase(s1, s2); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	call	??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z ; _CompareNoCase<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CompareNoCase@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z ENDP ; CompareNoCase
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::c_str
EXTRN	__imp___wtof:PROC
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\xtoa.h
;	COMDAT ?WTOF@@YANABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?WTOF@@YANABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; WTOF, COMDAT

; 69   : inline double WTOF(const wstring &s) { return _wtof(s.c_str()); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR _s$[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::c_str
	push	eax
	call	DWORD PTR __imp___wtof
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?WTOF@@YANABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; WTOF
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1621 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1622 : 		return (_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr

; 1623 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::c_str
_TEXT	ENDS
PUBLIC	??8?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator==
PUBLIC	??E?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@XZ ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator++
PUBLIC	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??D?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEAB_WXZ ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator*
PUBLIC	??9?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator!=
PUBLIC	?end@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::end
PUBLIC	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::begin
EXTRN	__imp__tolower:PROC
;	COMDAT xdata$x
; File c:\code\hon\src\k2\stringutils.h
xdata$x	SEGMENT
__unwindtable$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z$3
__ehfuncinfo$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z
_TEXT	SEGMENT
tv157 = -140						; size = 4
$T122950 = -136						; size = 4
$T122951 = -132						; size = 4
$T122952 = -128						; size = 4
_it2End$ = -60						; size = 12
_it2$ = -48						; size = 12
_it1End$ = -36						; size = 12
_it1$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z PROC ; _CompareNoCase<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 82   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 83   : 	typename T::const_iterator it1(s1.begin()), it1End(s1.end());

	lea	eax, DWORD PTR _it1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::begin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR _it1End$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?end@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::end
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 84   : 	typename T::const_iterator it2(s2.begin()), it2End(s2.end());

	lea	eax, DWORD PTR _it2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::begin
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	eax, DWORD PTR _it2End$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?end@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::end
	mov	BYTE PTR __$EHRec$[ebp+8], 3
$LN5@CompareNoC:

; 85   : 
; 86   : 	while (it1 != it1End && it2 != it2End)

	lea	eax, DWORD PTR _it1End$[ebp]
	push	eax
	lea	ecx, DWORD PTR _it1$[ebp]
	call	??9?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@CompareNoC
	lea	eax, DWORD PTR _it2End$[ebp]
	push	eax
	lea	ecx, DWORD PTR _it2$[ebp]
	call	??9?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@CompareNoC

; 87   : 	{
; 88   : 		if (tolower(*it1) < tolower(*it2))

	lea	ecx, DWORD PTR _it1$[ebp]
	call	??D?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEAB_WXZ ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator*
	movzx	eax, WORD PTR [eax]
	push	eax
	call	DWORD PTR __imp__tolower
	add	esp, 4
	mov	esi, eax
	lea	ecx, DWORD PTR _it2$[ebp]
	call	??D?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEAB_WXZ ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator*
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__tolower
	add	esp, 4
	cmp	esi, eax
	jge	SHORT $LN3@CompareNoC

; 89   : 			return -1;

	mov	DWORD PTR $T122950[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _it2End$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _it2$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _it1End$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _it1$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T122950[ebp]
	jmp	$LN6@CompareNoC
	jmp	SHORT $LN2@CompareNoC
$LN3@CompareNoC:

; 90   : 		else if (tolower(*it1) > tolower(*it2))

	lea	ecx, DWORD PTR _it1$[ebp]
	call	??D?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEAB_WXZ ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator*
	movzx	eax, WORD PTR [eax]
	push	eax
	call	DWORD PTR __imp__tolower
	add	esp, 4
	mov	esi, eax
	lea	ecx, DWORD PTR _it2$[ebp]
	call	??D?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEAB_WXZ ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator*
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__tolower
	add	esp, 4
	cmp	esi, eax
	jle	SHORT $LN2@CompareNoC

; 91   : 			return 1;

	mov	DWORD PTR $T122951[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _it2End$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _it2$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _it1End$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _it1$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T122951[ebp]
	jmp	$LN6@CompareNoC
$LN2@CompareNoC:

; 92   : 
; 93   : 		++it1;

	lea	ecx, DWORD PTR _it1$[ebp]
	call	??E?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@XZ ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator++

; 94   : 		++it2;

	lea	ecx, DWORD PTR _it2$[ebp]
	call	??E?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@XZ ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator++

; 95   : 	}

	jmp	$LN5@CompareNoC
$LN4@CompareNoC:

; 96   : 
; 97   : 	return it1 == it1End ? (it2 == it2End ? 0 : -1) : 1;

	lea	eax, DWORD PTR _it1End$[ebp]
	push	eax
	lea	ecx, DWORD PTR _it1$[ebp]
	call	??8?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@CompareNoC
	lea	edx, DWORD PTR _it2End$[ebp]
	push	edx
	lea	ecx, DWORD PTR _it2$[ebp]
	call	??8?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	neg	eax
	sub	eax, 1
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN9@CompareNoC
$LN8@CompareNoC:
	mov	DWORD PTR tv157[ebp], 1
$LN9@CompareNoC:
	mov	ecx, DWORD PTR tv157[ebp]
	mov	DWORD PTR $T122952[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _it2End$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _it2$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _it1End$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _it1$[ebp]
	call	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T122952[ebp]
$LN6@CompareNoC:

; 98   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z$0:
	lea	ecx, DWORD PTR _it1$[ebp]
	jmp	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
__unwindfunclet$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z$1:
	lea	ecx, DWORD PTR _it1End$[ebp]
	jmp	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
__unwindfunclet$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z$2:
	lea	ecx, DWORD PTR _it2$[ebp]
	jmp	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
__unwindfunclet$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z$3:
	lea	ecx, DWORD PTR _it2End$[ebp]
	jmp	??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
__ehhandler$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_CompareNoCase@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0@Z ENDP ; _CompareNoCase<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
PUBLIC	??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ
_TEXT	SEGMENT
$T122968 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::begin, COMDAT
; _this$ = ecx

; 1477 : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T122968[ebp], 0

; 1478 : 		return (_STRING_CONST_ITERATOR(_Myptr()));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR $T122968[ebp]
	or	ecx, 1
	mov	DWORD PTR $T122968[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1479 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::begin
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ
_TEXT	SEGMENT
$T122973 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::end, COMDAT
; _this$ = ecx

; 1487 : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T122973[ebp], 0

; 1488 : 		return (_STRING_CONST_ITERATOR(_Myptr() + _Mysize));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR $T122973[ebp]
	or	ecx, 1
	mov	DWORD PTR $T122973[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1489 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE?AV?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::end
_TEXT	ENDS
PUBLIC	??_C@_1OI@JGDCIMPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@ ; `string'
PUBLIC	??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; `string'
;	COMDAT ??_C@_1OI@JGDCIMPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@
CONST	SEGMENT
??_C@_1OI@JGDCIMPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	'_', 00H, 't', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	'_', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??D?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEAB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEAB_WXZ PROC ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator*, COMDAT
; _this$ = ecx

; 103  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 
; 105  :  #if _HAS_ITERATOR_DEBUGGING
; 106  : 		if (this->_Mycont == 0 || _Myptr == 0
; 107  : 			|| _Myptr < ((_Mystring *)this->_Mycont)->_Myptr()
; 108  : 			|| ((_Mystring *)this->_Mycont)->_Myptr()
; 109  : 				+ ((_Mystring *)this->_Mycont)->_Mysize <= _Myptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@operator@8
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@operator@8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jb	SHORT $LN1@operator@8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+24]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [eax+8]
	ja	SHORT $LN2@operator@8
$LN1@operator@8:

; 110  : 			{
; 111  : 			_DEBUG_ERROR("string iterator not dereferencable");

	push	111					; 0000006fH
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH

; 112  : 			_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator@8
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	112					; 00000070H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@operator@8
	int	3
$LN5@operator@8:
	push	0
	push	112					; 00000070H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OI@JGDCIMPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator@8:

; 113  : 			}
; 114  : 		__analysis_assume(_Myptr != 0);
; 115  :  #else
; 116  : 		if (this->_Mycont != _IGNORE_MYCONT)
; 117  : 		{
; 118  : 			_SCL_SECURE_VALIDATE(this->_Mycont != NULL);
; 119  : 			_SCL_SECURE_VALIDATE_RANGE(_Myptr < (((_Mystring *)this->_Mycont)->_Myptr() + ((_Mystring *)(this->_Mycont))->_Mysize));
; 120  : 		}
; 121  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 122  : 
; 123  : 		return (*_Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 124  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEAB_WXZ ENDP ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator*
_TEXT	ENDS
PUBLIC	??_C@_1MC@OAAJIFPD@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$CK?$AA?$CJ?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_1OK@MLEFFPNB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@ ; `string'
;	COMDAT ??_C@_1MC@OAAJIFPD@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$CK?$AA?$CJ?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1MC@OAAJIFPD@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$CK?$AA?$CJ?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, '(', 00H, '('
	DB	00H, '_', 00H, 'M', 00H, 'y', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '*', 00H, ')', 00H, 't'
	DB	00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H, '_', 00H
	DB	'M', 00H, 'y', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, '(', 00H, ')', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, '(', 00H, '(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '*'
	DB	00H, ')', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H
	DB	'y', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ')', 00H, '"'
	DB	00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OK@MLEFFPNB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@
CONST	SEGMENT
??_C@_1OK@MLEFFPNB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	'_', 00H, 't', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	'_', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??E?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@XZ PROC ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator++, COMDAT
; _this$ = ecx

; 132  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		if (this->_Mycont != _IGNORE_MYCONT)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -2			; fffffffeH
	je	$LN3@operator@9

; 134  : 		{
; 135  : 			_SCL_SECURE_VALIDATE(this->_Mycont != NULL);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@operator@9
	xor	eax, eax
	jne	SHORT $LN6@operator@9
	push	OFFSET ??_C@_1DK@LIMPPGHH@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAM?$AAy?$AAc?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	135					; 00000087H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN6@operator@9
	int	3
$LN6@operator@9:
	push	0
	push	135					; 00000087H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OK@MLEFFPNB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator@9:

; 136  : 			_SCL_SECURE_VALIDATE_RANGE(_Myptr < (((_Mystring *)this->_Mycont)->_Myptr() + ((_Mystring *)this->_Mycont)->_Mysize));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+24]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], edx
	jb	SHORT $LN3@operator@9
	xor	eax, eax
	jne	SHORT $LN7@operator@9
	push	OFFSET ??_C@_1MC@OAAJIFPD@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$CK?$AA?$CJ?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO@
	push	0
	push	136					; 00000088H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN7@operator@9
	int	3
$LN7@operator@9:
	push	0
	push	136					; 00000088H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OK@MLEFFPNB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN3@operator@9:

; 137  : 		}
; 138  : 		++_Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 139  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 140  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@XZ ENDP ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Compat
; Function compile flags: /Odtp /ZI
;	COMDAT ??8?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator==, COMDAT
; _this$ = ecx

; 218  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 
; 220  :  #if _HAS_ITERATOR_DEBUGGING
; 221  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Compat

; 222  :  #else
; 223  : 		if (this->_Mycont != _IGNORE_MYCONT)
; 224  : 		{
; 225  : 			_SCL_SECURE_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);
; 226  : 		}
; 227  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 228  : 
; 229  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+8]
	sete	al

; 230  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator==
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??9?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator!=, COMDAT
; _this$ = ecx

; 233  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 235  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator!=
_TEXT	ENDS
PUBLIC	??1?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ ; std::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>::~_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ PROC ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ENDP ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ PROC ; std::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>::~_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::~_Iterator_base
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ ENDP ; std::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>::~_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>
_TEXT	ENDS
PUBLIC	??_C@_1BAA@BODMOCBB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@ ; `string'
PUBLIC	??_C@_1BEO@GFHFALBP@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU@ ; `string'
PUBLIC	??0?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ ; std::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>
;	COMDAT ??_C@_1BAA@BODMOCBB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@
CONST	SEGMENT
??_C@_1BAA@BODMOCBB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	'_', 00H, 't', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	'_', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, '_', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't'
	DB	00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BEO@GFHFALBP@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU@
CONST	SEGMENT
??_C@_1BEO@GFHFALBP@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'P', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '(', 00H, '('
	DB	00H, '_', 00H, 'M', 00H, 'y', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '*', 00H, ')', 00H, '_'
	DB	00H, 'P', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'r', 00H, '(', 00H, ')', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 't', 00H, 'r'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'P', 00H
	DB	't', 00H, 'r', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '('
	DB	00H, '(', 00H, '(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '*'
	DB	00H, ')', 00H, '_', 00H, 'P', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ')', 00H, '-', 00H, '>', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'p', 00H, 't', 00H, 'r', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, '+', 00H, ' ', 00H, '(', 00H, '(', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, '*', 00H, ')', 00H, '_', 00H, 'P'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	')', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ')', 00H, '"', 00H, ',', 00H
	DB	' ', 00H, '0', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z$0
__ehfuncinfo$??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z PROC ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 70   : 	__CLR_OR_THIS_CALL _String_const_iterator(pointer _Ptr, const _Container_base *_Pstring)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 71   : 		{	// construct with pointer _Ptr
; 72   : 		_SCL_SECURE_VALIDATE(

	cmp	DWORD PTR __Pstring$[ebp], 0
	je	SHORT $LN2@String_con
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN1@String_con
	mov	ecx, DWORD PTR __Pstring$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@String_con
	mov	ecx, DWORD PTR __Pstring$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Pstring$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	lea	eax, DWORD PTR [eax+edx*2]
	cmp	DWORD PTR __Ptr$[ebp], eax
	jbe	SHORT $LN2@String_con
$LN1@String_con:
	xor	eax, eax
	jne	SHORT $LN5@String_con
	push	OFFSET ??_C@_1BEO@GFHFALBP@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU@
	push	0
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@String_con
	int	3
$LN5@String_con:

; 73   : 			_Pstring == NULL || 
; 74   : 			_Ptr != NULL && 
; 75   : 			((_Mystring *)_Pstring)->_Myptr() <= _Ptr && _Ptr <= (((_Mystring *)_Pstring)->_Myptr() + ((_Mystring *)_Pstring)->_Mysize));

	push	0
	push	75					; 0000004bH
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1BAA@BODMOCBB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@String_con:

; 76   : 		this->_Adopt(_Pstring);

	mov	eax, DWORD PTR __Pstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt

; 77   : 		_Myptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 78   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_WPBV_Container_base@1@@Z ENDP ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ PROC ; std::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit_base@_WHPB_WAB_WV_Iterator_base@std@@@std@@QAE@XZ ENDP ; std::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>::_Ranit_base<wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base>
_TEXT	ENDS
PUBLIC	??_C@_1OC@KHIIKOEO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@ ; `string'
PUBLIC	??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1OC@KHIIKOEO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@
CONST	SEGMENT
??_C@_1OC@KHIIKOEO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	'_', 00H, 't', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	'_', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, '_', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Compat@?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Compat, COMDAT
; _this$ = ecx

; 269  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 270  : 		if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Compat@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN3@Compat@2
$LN1@Compat@2:

; 271  : 			{
; 272  : 			_DEBUG_ERROR("string iterators incompatible");

	push	272					; 00000110H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH

; 273  : 			_SCL_SECURE_INVALID_ARGUMENT;

	xor	eax, eax
	jne	SHORT $LN5@Compat@2
	push	OFFSET ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
	push	0
	push	273					; 00000111H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@Compat@2
	int	3
$LN5@Compat@2:
	push	0
	push	273					; 00000111H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OC@KHIIKOEO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat@2:

; 274  : 			}
; 275  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_String_const_iterator@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Compat
_TEXT	ENDS
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@	; `string'
PUBLIC	??_C@_15JOGBDECP@?$AA?0?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_15FOBPOKEL@?$AA?$FN?$AA?5?$AA?$AA@	; `string'
;	COMDAT ??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@
; File c:\code\hon\src\k2\c_cvar.h
CONST	SEGMENT
??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@ DB ' ', 00H, '[', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15JOGBDECP@?$AA?0?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_15JOGBDECP@?$AA?0?$AA?5?$AA?$AA@ DB ',', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15FOBPOKEL@?$AA?$FN?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_15FOBPOKEL@?$AA?$FN?$AA?5?$AA?$AA@ DB ']', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$4
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
_TEXT	SEGMENT
tv149 = -284						; size = 4
tv157 = -280						; size = 4
tv147 = -276						; size = 4
tv156 = -272						; size = 4
tv145 = -268						; size = 4
tv155 = -264						; size = 4
tv143 = -260						; size = 4
tv67 = -256						; size = 4
tv141 = -252						; size = 4
tv137 = -248						; size = 4
$T123010 = -244						; size = 32
$T123011 = -212						; size = 32
$T123012 = -180						; size = 32
$T123013 = -148						; size = 32
$T123014 = -116						; size = 32
$T123021 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ PROC ; CCvar<bool,bool>::GetRangeString, COMDAT
; _this$ = ecx

; 947  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T123021[ebp], 0

; 948  : 	if (m_iFlags & CVAR_VALUERANGE)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, 1024				; 00000400H
	je	$LN1@GetRangeSt

; 949  : 		return _T(" [") + XtoA(m_RangeMin) + _T(", ") + XtoA(m_RangeMax) + _T("] ");

	push	OFFSET ??_C@_15FOBPOKEL@?$AA?$FN?$AA?5?$AA?$AA@
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+272]
	push	ecx
	lea	edx, DWORD PTR $T123010[ebp]
	push	edx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_N0@Z ; XtoW
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv141[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv141[ebp]
	push	ecx
	push	OFFSET ??_C@_15JOGBDECP@?$AA?0?$AA?5?$AA?$AA@
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+271]
	push	eax
	lea	ecx, DWORD PTR $T123011[ebp]
	push	ecx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@_N0@Z ; XtoW
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv67[ebp], eax
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR tv143[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	push	OFFSET ??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@
	lea	ecx, DWORD PTR $T123012[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv155[ebp], eax
	mov	edx, DWORD PTR tv155[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv145[ebp]
	push	eax
	lea	ecx, DWORD PTR $T123013[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv156[ebp], eax
	mov	edx, DWORD PTR tv156[ebp]
	mov	DWORD PTR tv147[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv147[ebp]
	push	eax
	lea	ecx, DWORD PTR $T123014[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv157[ebp], eax
	mov	edx, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv149[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR $T123021[ebp]
	or	edx, 1
	mov	DWORD PTR $T123021[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T123014[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T123013[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T123012[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T123011[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T123010[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@GetRangeSt
$LN1@GetRangeSt:

; 950  : 
; 951  : 	return _T("");

	push	OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T123021[ebp]
	or	eax, 1
	mov	DWORD PTR $T123021[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@GetRangeSt:

; 952  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$0:
	lea	ecx, DWORD PTR $T123010[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$1:
	lea	ecx, DWORD PTR $T123011[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$2:
	lea	ecx, DWORD PTR $T123012[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$3:
	lea	ecx, DWORD PTR $T123013[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$4:
	lea	ecx, DWORD PTR $T123014[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-288]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetRangeString@?$CCvar@_N_N@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ENDP ; CCvar<bool,bool>::GetRangeString
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\string
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -120						; size = 4
tv82 = -116						; size = 4
$T123031 = -112						; size = 32
$T123034 = -80						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT

; 24   : 	{	// return string + string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T123034[ebp], 0

; 25   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T123031[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv82[ebp], eax
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv77[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv77[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T123034[ebp]
	or	eax, 1
	mov	DWORD PTR $T123034[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T123031[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 26   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z$0:
	lea	ecx, DWORD PTR $T123031[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z$1:
	mov	eax, DWORD PTR $T123034[ebp]
	and	eax, 1
	je	$LN5@operator@10
	and	DWORD PTR $T123034[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@operator@10:
	ret	0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??_C@_1M@FOAOAJJD@?$AAC?$AAr?$AAa?$AAs?$AAh?$AA?$AA@ ; `string'
EXTRN	__imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z:PROC
;	COMDAT ??_C@_1M@FOAOAJJD@?$AAC?$AAr?$AAa?$AAs?$AAh?$AA?$AA@
; File c:\code\hon\src\shell\main_win32.cpp
CONST	SEGMENT
??_C@_1M@FOAOAJJD@?$AAC?$AAr?$AAa?$AAs?$AAh?$AA?$AA@ DB 'C', 00H, 'r', 00H
	DB	'a', 00H, 's', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdCrash@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdCrash@@YAXXZ$0
__ehfuncinfo$??__EcmdCrash@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdCrash@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdCrash@@YAXXZ
text$yc	SEGMENT
$T123044 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdCrash@@YAXXZ PROC				; `dynamic initializer for 'cmdCrash'', COMDAT

; 272  : CMD(Crash)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdCrash@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1M@FOAOAJJD@?$AAC?$AAr?$AAa?$AAs?$AAh?$AA?$AA@
	lea	ecx, DWORD PTR $T123044[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdCrashFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdCrashFn
	lea	eax, DWORD PTR $T123044[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdCrash@@3VCCmd@@A	; cmdCrash
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T123044[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdCrash@@YAXXZ		; `dynamic atexit destructor for 'cmdCrash''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdCrash@@YAXXZ$0:
	lea	ecx, DWORD PTR $T123044[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdCrash@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdCrash@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdCrash@@YAXXZ ENDP				; `dynamic initializer for 'cmdCrash''
PUBLIC	??_C@_1BC@INGLCLFE@?$AAC?$AAr?$AAa?$AAs?$AAh?$AAS?$AAT?$AAL?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BC@INGLCLFE@?$AAC?$AAr?$AAa?$AAs?$AAh?$AAS?$AAT?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@INGLCLFE@?$AAC?$AAr?$AAa?$AAs?$AAh?$AAS?$AAT?$AAL?$AA?$AA@ DB 'C'
	DB	00H, 'r', 00H, 'a', 00H, 's', 00H, 'h', 00H, 'S', 00H, 'T', 00H
	DB	'L', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdCrashSTL@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdCrashSTL@@YAXXZ$0
__ehfuncinfo$??__EcmdCrashSTL@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdCrashSTL@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdCrashSTL@@YAXXZ
text$yc	SEGMENT
$T123054 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdCrashSTL@@YAXXZ PROC				; `dynamic initializer for 'cmdCrashSTL'', COMDAT

; 283  : CMD(CrashSTL)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdCrashSTL@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1BC@INGLCLFE@?$AAC?$AAr?$AAa?$AAs?$AAh?$AAS?$AAT?$AAL?$AA?$AA@
	lea	ecx, DWORD PTR $T123054[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdCrashSTLFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdCrashSTLFn
	lea	eax, DWORD PTR $T123054[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdCrashSTL@@3VCCmd@@A	; cmdCrashSTL
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T123054[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdCrashSTL@@YAXXZ		; `dynamic atexit destructor for 'cmdCrashSTL''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdCrashSTL@@YAXXZ$0:
	lea	ecx, DWORD PTR $T123054[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdCrashSTL@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdCrashSTL@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdCrashSTL@@YAXXZ ENDP				; `dynamic initializer for 'cmdCrashSTL''
PUBLIC	??_C@_1BK@DNGBAHGF@?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AAL?$AAo?$AAo?$AAp?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BK@DNGBAHGF@?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AAL?$AAo?$AAo?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@DNGBAHGF@?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AAL?$AAo?$AAo?$AAp?$AA?$AA@ DB 'I'
	DB	00H, 'n', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'L', 00H, 'o', 00H, 'o', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdInfiniteLoop@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdInfiniteLoop@@YAXXZ$0
__ehfuncinfo$??__EcmdInfiniteLoop@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdInfiniteLoop@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdInfiniteLoop@@YAXXZ
text$yc	SEGMENT
$T123064 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdInfiniteLoop@@YAXXZ PROC			; `dynamic initializer for 'cmdInfiniteLoop'', COMDAT

; 294  : CMD(InfiniteLoop)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdInfiniteLoop@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1BK@DNGBAHGF@?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AAL?$AAo?$AAo?$AAp?$AA?$AA@
	lea	ecx, DWORD PTR $T123064[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdInfiniteLoopFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdInfiniteLoopFn
	lea	eax, DWORD PTR $T123064[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdInfiniteLoop@@3VCCmd@@A	; cmdInfiniteLoop
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T123064[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdInfiniteLoop@@YAXXZ	; `dynamic atexit destructor for 'cmdInfiniteLoop''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdInfiniteLoop@@YAXXZ$0:
	lea	ecx, DWORD PTR $T123064[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdInfiniteLoop@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdInfiniteLoop@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdInfiniteLoop@@YAXXZ ENDP			; `dynamic initializer for 'cmdInfiniteLoop''
PUBLIC	??_C@_1M@FBICDPFE@?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1M@FBICDPFE@?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1M@FBICDPFE@?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?$AA@ DB 'A', 00H, 'b', 00H
	DB	'o', 00H, 'r', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdAbort@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdAbort@@YAXXZ$0
__ehfuncinfo$??__EcmdAbort@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdAbort@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdAbort@@YAXXZ
text$yc	SEGMENT
$T123074 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdAbort@@YAXXZ PROC				; `dynamic initializer for 'cmdAbort'', COMDAT

; 304  : CMD(Abort)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdAbort@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1M@FBICDPFE@?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?$AA@
	lea	ecx, DWORD PTR $T123074[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdAbortFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdAbortFn
	lea	eax, DWORD PTR $T123074[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdAbort@@3VCCmd@@A	; cmdAbort
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T123074[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdAbort@@YAXXZ		; `dynamic atexit destructor for 'cmdAbort''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdAbort@@YAXXZ$0:
	lea	ecx, DWORD PTR $T123074[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdAbort@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdAbort@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdAbort@@YAXXZ ENDP				; `dynamic initializer for 'cmdAbort''
PUBLIC	??_C@_1BA@PAODAEAG@?$AAW?$AAA?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BA@PAODAEAG@?$AAW?$AAA?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@PAODAEAG@?$AAW?$AAA?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ DB 'W', 00H
	DB	'A', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdWAStart@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdWAStart@@YAXXZ$0
__ehfuncinfo$??__EcmdWAStart@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdWAStart@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdWAStart@@YAXXZ
text$yc	SEGMENT
$T123084 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdWAStart@@YAXXZ PROC				; `dynamic initializer for 'cmdWAStart'', COMDAT

; 377  : CMD(WAStart)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdWAStart@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1BA@PAODAEAG@?$AAW?$AAA?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
	lea	ecx, DWORD PTR $T123084[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdWAStartFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdWAStartFn
	lea	eax, DWORD PTR $T123084[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdWAStart@@3VCCmd@@A	; cmdWAStart
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T123084[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdWAStart@@YAXXZ		; `dynamic atexit destructor for 'cmdWAStart''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdWAStart@@YAXXZ$0:
	lea	ecx, DWORD PTR $T123084[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdWAStart@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdWAStart@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdWAStart@@YAXXZ ENDP				; `dynamic initializer for 'cmdWAStart''
PUBLIC	??_C@_1O@CPOAKDMI@?$AAW?$AAA?$AAS?$AAt?$AAo?$AAp?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1O@CPOAKDMI@?$AAW?$AAA?$AAS?$AAt?$AAo?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1O@CPOAKDMI@?$AAW?$AAA?$AAS?$AAt?$AAo?$AAp?$AA?$AA@ DB 'W', 00H, 'A'
	DB	00H, 'S', 00H, 't', 00H, 'o', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdWAStop@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdWAStop@@YAXXZ$0
__ehfuncinfo$??__EcmdWAStop@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdWAStop@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdWAStop@@YAXXZ
text$yc	SEGMENT
$T123094 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdWAStop@@YAXXZ PROC				; `dynamic initializer for 'cmdWAStop'', COMDAT

; 406  : CMD(WAStop)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdWAStop@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1O@CPOAKDMI@?$AAW?$AAA?$AAS?$AAt?$AAo?$AAp?$AA?$AA@
	lea	ecx, DWORD PTR $T123094[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdWAStopFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdWAStopFn
	lea	eax, DWORD PTR $T123094[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdWAStop@@3VCCmd@@A	; cmdWAStop
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T123094[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdWAStop@@YAXXZ		; `dynamic atexit destructor for 'cmdWAStop''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdWAStop@@YAXXZ$0:
	lea	ecx, DWORD PTR $T123094[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdWAStop@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdWAStop@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdWAStop@@YAXXZ ENDP				; `dynamic initializer for 'cmdWAStop''
PUBLIC	??_C@_1O@IGEIGNPG@?$AAW?$AAA?$AAP?$AAr?$AAe?$AAv?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1O@IGEIGNPG@?$AAW?$AAA?$AAP?$AAr?$AAe?$AAv?$AA?$AA@
CONST	SEGMENT
??_C@_1O@IGEIGNPG@?$AAW?$AAA?$AAP?$AAr?$AAe?$AAv?$AA?$AA@ DB 'W', 00H, 'A'
	DB	00H, 'P', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdWAPrev@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdWAPrev@@YAXXZ$0
__ehfuncinfo$??__EcmdWAPrev@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdWAPrev@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdWAPrev@@YAXXZ
text$yc	SEGMENT
$T123104 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdWAPrev@@YAXXZ PROC				; `dynamic initializer for 'cmdWAPrev'', COMDAT

; 419  : CMD(WAPrev)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdWAPrev@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1O@IGEIGNPG@?$AAW?$AAA?$AAP?$AAr?$AAe?$AAv?$AA?$AA@
	lea	ecx, DWORD PTR $T123104[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdWAPrevFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdWAPrevFn
	lea	eax, DWORD PTR $T123104[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdWAPrev@@3VCCmd@@A	; cmdWAPrev
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T123104[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdWAPrev@@YAXXZ		; `dynamic atexit destructor for 'cmdWAPrev''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdWAPrev@@YAXXZ$0:
	lea	ecx, DWORD PTR $T123104[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdWAPrev@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdWAPrev@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdWAPrev@@YAXXZ ENDP				; `dynamic initializer for 'cmdWAPrev''
PUBLIC	??_C@_1O@NMBADNFB@?$AAW?$AAA?$AAN?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1O@NMBADNFB@?$AAW?$AAA?$AAN?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1O@NMBADNFB@?$AAW?$AAA?$AAN?$AAe?$AAx?$AAt?$AA?$AA@ DB 'W', 00H, 'A'
	DB	00H, 'N', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdWANext@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdWANext@@YAXXZ$0
__ehfuncinfo$??__EcmdWANext@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdWANext@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdWANext@@YAXXZ
text$yc	SEGMENT
$T123114 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdWANext@@YAXXZ PROC				; `dynamic initializer for 'cmdWANext'', COMDAT

; 432  : CMD(WANext)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdWANext@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1O@NMBADNFB@?$AAW?$AAA?$AAN?$AAe?$AAx?$AAt?$AA?$AA@
	lea	ecx, DWORD PTR $T123114[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdWANextFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdWANextFn
	lea	eax, DWORD PTR $T123114[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdWANext@@3VCCmd@@A	; cmdWANext
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T123114[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdWANext@@YAXXZ		; `dynamic atexit destructor for 'cmdWANext''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdWANext@@YAXXZ$0:
	lea	ecx, DWORD PTR $T123114[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdWANext@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdWANext@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdWANext@@YAXXZ ENDP				; `dynamic initializer for 'cmdWANext''
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fg_aTextureFilteringNames@@YAXXZ
text$yd	SEGMENT
??__Fg_aTextureFilteringNames@@YAXXZ PROC		; `dynamic atexit destructor for 'g_aTextureFilteringNames'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	10					; 0000000aH
	push	32					; 00000020H
	push	OFFSET _g_aTextureFilteringNames
	call	??_M@YGXPAXIHP6EX0@Z@Z
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fg_aTextureFilteringNames@@YAXXZ ENDP		; `dynamic atexit destructor for 'g_aTextureFilteringNames''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__Fkey_debugEvents@@YAXXZ
text$yd	SEGMENT
??__Fkey_debugEvents@@YAXXZ PROC			; `dynamic atexit destructor for 'key_debugEvents'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?key_debugEvents@@3V?$CCvar@_N_N@@A ; key_debugEvents
	call	??1?$CCvar@_N_N@@UAE@XZ			; CCvar<bool,bool>::~CCvar<bool,bool>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fkey_debugEvents@@YAXXZ ENDP			; `dynamic atexit destructor for 'key_debugEvents''
text$yd	ENDS
EXTRN	__imp_??1CCmd@@UAE@XZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FcmdCrash@@YAXXZ
text$yd	SEGMENT
??__FcmdCrash@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdCrash'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdCrash@@3VCCmd@@A	; cmdCrash
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdCrash@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdCrash''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FcmdCrashSTL@@YAXXZ
text$yd	SEGMENT
??__FcmdCrashSTL@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdCrashSTL'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdCrashSTL@@3VCCmd@@A	; cmdCrashSTL
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdCrashSTL@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdCrashSTL''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FcmdInfiniteLoop@@YAXXZ
text$yd	SEGMENT
??__FcmdInfiniteLoop@@YAXXZ PROC			; `dynamic atexit destructor for 'cmdInfiniteLoop'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdInfiniteLoop@@3VCCmd@@A	; cmdInfiniteLoop
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdInfiniteLoop@@YAXXZ ENDP			; `dynamic atexit destructor for 'cmdInfiniteLoop''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FcmdAbort@@YAXXZ
text$yd	SEGMENT
??__FcmdAbort@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdAbort'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdAbort@@3VCCmd@@A	; cmdAbort
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdAbort@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdAbort''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FcmdWAStart@@YAXXZ
text$yd	SEGMENT
??__FcmdWAStart@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdWAStart'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdWAStart@@3VCCmd@@A	; cmdWAStart
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdWAStart@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdWAStart''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FcmdWAStop@@YAXXZ
text$yd	SEGMENT
??__FcmdWAStop@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdWAStop'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdWAStop@@3VCCmd@@A	; cmdWAStop
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdWAStop@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdWAStop''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FcmdWAPrev@@YAXXZ
text$yd	SEGMENT
??__FcmdWAPrev@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdWAPrev'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdWAPrev@@3VCCmd@@A	; cmdWAPrev
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdWAPrev@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdWAPrev''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FcmdWANext@@YAXXZ
text$yd	SEGMENT
??__FcmdWANext@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdWANext'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdWANext@@3VCCmd@@A	; cmdWANext
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdWANext@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdWANext''
text$yd	ENDS
PUBLIC	?cmdWANext@@3VCCmd@@A				; cmdWANext
PUBLIC	?cmdWAPrev@@3VCCmd@@A				; cmdWAPrev
PUBLIC	?cmdWAStop@@3VCCmd@@A				; cmdWAStop
PUBLIC	?cmdWAStart@@3VCCmd@@A				; cmdWAStart
PUBLIC	?cmdAbort@@3VCCmd@@A				; cmdAbort
PUBLIC	?cmdInfiniteLoop@@3VCCmd@@A			; cmdInfiniteLoop
PUBLIC	?cmdCrashSTL@@3VCCmd@@A				; cmdCrashSTL
PUBLIC	?cmdCrash@@3VCCmd@@A				; cmdCrash
PUBLIC	?key_debugEvents@@3V?$CCvar@_N_N@@A		; key_debugEvents
_BSS	SEGMENT
?cmdWANext@@3VCCmd@@A DB 034H DUP (?)			; cmdWANext
?cmdWAPrev@@3VCCmd@@A DB 034H DUP (?)			; cmdWAPrev
?cmdWAStop@@3VCCmd@@A DB 034H DUP (?)			; cmdWAStop
?cmdWAStart@@3VCCmd@@A DB 034H DUP (?)			; cmdWAStart
?cmdAbort@@3VCCmd@@A DB 034H DUP (?)			; cmdAbort
?cmdInfiniteLoop@@3VCCmd@@A DB 034H DUP (?)		; cmdInfiniteLoop
?cmdCrashSTL@@3VCCmd@@A DB 034H DUP (?)			; cmdCrashSTL
?cmdCrash@@3VCCmd@@A DB 034H DUP (?)			; cmdCrash
?key_debugEvents@@3V?$CCvar@_N_N@@A DB 0114H DUP (?)	; key_debugEvents
_g_aTextureFilteringNames DB 0140H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_g_aTextureFilteringNames$initializer$ DD FLAT:??__Eg_aTextureFilteringNames@@YAXXZ
_key_debugEvents$initializer$ DD FLAT:??__Ekey_debugEvents@@YAXXZ
_cmdCrash$initializer$ DD FLAT:??__EcmdCrash@@YAXXZ
_cmdCrashSTL$initializer$ DD FLAT:??__EcmdCrashSTL@@YAXXZ
_cmdInfiniteLoop$initializer$ DD FLAT:??__EcmdInfiniteLoop@@YAXXZ
_cmdAbort$initializer$ DD FLAT:??__EcmdAbort@@YAXXZ
_cmdWAStart$initializer$ DD FLAT:??__EcmdWAStart@@YAXXZ
_cmdWAStop$initializer$ DD FLAT:??__EcmdWAStop@@YAXXZ
_cmdWAPrev$initializer$ DD FLAT:??__EcmdWAPrev@@YAXXZ
_cmdWANext$initializer$ DD FLAT:??__EcmdWANext@@YAXXZ
CRT$XCU	ENDS
END
