; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\code\hon\src\shell\misc_cmds.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
PUBLIC	??6CConsole@@QAEAAVCConsoleStream@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsole::operator<<
PUBLIC	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@		; `string'
PUBLIC	?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdEchoFn
EXTRN	__imp_?ConcatinateArgs@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@ABV12@@Z:PROC
EXTRN	__imp_?g_pConsole@@3PAVCConsole@@A:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
; File c:\code\hon\src\shell\misc_cmds.cpp
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$1
__ehfuncinfo$?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
tv83 = -148						; size = 4
tv68 = -144						; size = 4
$T98355 = -140						; size = 32
$T98356 = -108						; size = 32
__$EHRec$ = -12						; size = 12
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdEchoFn, COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 29   : 	Console << ConcatinateArgs(vArgList) << newl;

	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	lea	ecx, DWORD PTR $T98355[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	lea	ecx, DWORD PTR $T98355[ebp]
	push	ecx
	mov	edx, DWORD PTR _vArgList$[ebp]
	push	edx
	lea	eax, DWORD PTR $T98356[ebp]
	push	eax
	call	DWORD PTR __imp_?ConcatinateArgs@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@ABV12@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv83[ebp]
	push	edx
	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	??6CConsole@@QAEAAVCConsoleStream@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T98356[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T98355[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 30   : 	return true;

	mov	al, 1

; 31   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$0:
	lea	ecx, DWORD PTR $T98355[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$1:
	lea	ecx, DWORD PTR $T98356[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdEchoFn
PUBLIC	?cmdListModsFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdListModsFn
EXTRN	__imp_?ListMods@CFileManager@@QAEXXZ:PROC
EXTRN	__imp_?pFileManager@@3PAVCFileManager@@A:DWORD
; Function compile flags: /Odtp /ZI
;	COMDAT ?cmdListModsFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdListModsFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdListModsFn, COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 39   : 	FileManager.ListMods();

	mov	eax, DWORD PTR __imp_?pFileManager@@3PAVCFileManager@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?ListMods@CFileManager@@QAEXXZ

; 40   : 	return true;

	mov	al, 1

; 41   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cmdListModsFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdListModsFn
_TEXT	ENDS
PUBLIC	??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator[]
PUBLIC	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
PUBLIC	?cmdPushModFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdPushModFn
EXTRN	__imp_?PushMod@CFileManager@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?cmdPushModFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdPushModFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdPushModFn, COMDAT

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 49   : 	if (vArgList.size() < 1)

	mov	ecx, DWORD PTR _vArgList$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	cmp	eax, 1
	jae	SHORT $LN1@cmdPushMod

; 50   : 		return false;

	xor	al, al
	jmp	SHORT $LN2@cmdPushMod
$LN1@cmdPushMod:

; 51   : 
; 52   : 	FileManager.PushMod(vArgList[0]);

	push	0
	mov	ecx, DWORD PTR _vArgList$[ebp]
	call	??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator[]
	push	eax
	mov	eax, DWORD PTR __imp_?pFileManager@@3PAVCFileManager@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?PushMod@CFileManager@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z

; 53   : 	return true;

	mov	al, 1
$LN2@cmdPushMod:

; 54   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?cmdPushModFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdPushModFn
_TEXT	ENDS
PUBLIC	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z	; CConsole::operator<<
PUBLIC	??_C@_1CM@MPJFMEDL@?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AA?5?$AAs?$AAa?$AAv?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??B?$CCvar@HH@@QBEHXZ				; CCvar<int,int>::operator int
PUBLIC	??_C@_17HGCFFOJO@?$AAj?$AAp?$AAg?$AA?$AA@	; `string'
PUBLIC	??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; operator==
PUBLIC	??_C@_17KCICBAJG@?$AAp?$AAn?$AAg?$AA?$AA@	; `string'
PUBLIC	??_C@_1CG@MHIKOBDH@?$AA?$HO?$AA?1?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAs?$AA?1?$AAs?$AAh?$AAo?$AAt?$AA?$AA@ ; `string'
PUBLIC	??B?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	__$ArrayPad$
PUBLIC	?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; actScreenshotFn
EXTRN	__imp_??1CBitmap@@QAE@XZ:PROC
EXTRN	__imp_?WriteJPEG@CBitmap@@QAE_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@H@Z:PROC
EXTRN	__imp_?WritePNG@CBitmap@@QAE_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
EXTRN	__imp_?GetFrameBuffer@CVid@@QAEXAAVCBitmap@@@Z:PROC
EXTRN	__imp_?pVid@@3PAVCVid@@A:DWORD
EXTRN	__imp_??0CBitmap@@QAE@XZ:PROC
EXTRN	__imp_?GetNextFileIncrement@CFileManager@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HABV23@0H@Z:PROC
;	COMDAT ??_C@_1CM@MPJFMEDL@?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AA?5?$AAs?$AAa?$AAv?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@MPJFMEDL@?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AA?5?$AAs?$AAa?$AAv?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?3?$AA?5?$AA?$AA@ DB 'S'
	DB	00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, 's', 00H
	DB	'h', 00H, 'o', 00H, 't', 00H, ' ', 00H, 's', 00H, 'a', 00H, 'v'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ':', 00H
	DB	' ', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17HGCFFOJO@?$AAj?$AAp?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_17HGCFFOJO@?$AAj?$AAp?$AAg?$AA?$AA@ DB 'j', 00H, 'p', 00H, 'g', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_17KCICBAJG@?$AAp?$AAn?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_17KCICBAJG@?$AAp?$AAn?$AAg?$AA?$AA@ DB 'p', 00H, 'n', 00H, 'g', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@MHIKOBDH@?$AA?$HO?$AA?1?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAs?$AA?1?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@MHIKOBDH@?$AA?$HO?$AA?1?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAs?$AA?1?$AAs?$AAh?$AAo?$AAt?$AA?$AA@ DB '~'
	DB	00H, '/', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e', 00H
	DB	'n', 00H, 's', 00H, 'h', 00H, 'o', 00H, 't', 00H, 's', 00H, '/'
	DB	00H, 's', 00H, 'h', 00H, 'o', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$2
	DD	04H
	DD	FLAT:__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$3
	DD	05H
	DD	FLAT:__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$5
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
$T98377 = -288						; size = 32
$T98378 = -256						; size = 32
$T98379 = -221						; size = 1
$T98380 = -220						; size = 32
$T98381 = -185						; size = 1
$T98382 = -184						; size = 32
_screenshot$ = -88					; size = 40
_sFilename$ = -48					; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fValue$ = 8						; size = 4
_fDelta$ = 12						; size = 4
_v2Cursor$ = 16						; size = 4
_sParam$ = 20						; size = 4
?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; actScreenshotFn, COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 276				; 00000114H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 62   : 	tstring sFilename(FileManager.GetNextFileIncrement(4, _T("~/screenshots/shot"), host_screenshotFormat));

	lea	eax, DWORD PTR $T98377[ebp]
	push	eax
	mov	ecx, OFFSET ?host_screenshotFormat@@3V?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@A ; host_screenshotFormat
	call	??B?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	OFFSET ??_C@_1CG@MHIKOBDH@?$AA?$HO?$AA?1?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAs?$AA?1?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
	lea	ecx, DWORD PTR $T98378[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	0
	lea	ecx, DWORD PTR $T98377[ebp]
	push	ecx
	lea	edx, DWORD PTR $T98378[ebp]
	push	edx
	push	4
	lea	eax, DWORD PTR _sFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?pFileManager@@3PAVCFileManager@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetNextFileIncrement@CFileManager@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HABV23@0H@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T98378[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T98377[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 63   : 
; 64   : 	CBitmap screenshot;

	lea	ecx, DWORD PTR _screenshot$[ebp]
	call	DWORD PTR __imp_??0CBitmap@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 65   : 	Vid.GetFrameBuffer(screenshot);

	lea	eax, DWORD PTR _screenshot$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?pVid@@3PAVCVid@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetFrameBuffer@CVid@@QAEXAAVCBitmap@@@Z

; 66   : 	if (host_screenshotFormat == _T("png"))

	push	OFFSET ??_C@_17KCICBAJG@?$AAp?$AAn?$AAg?$AA?$AA@
	lea	ecx, DWORD PTR $T98380[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	eax, DWORD PTR $T98380[ebp]
	push	eax
	push	OFFSET ?host_screenshotFormat@@3V?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@A ; host_screenshotFormat
	call	??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; operator==
	add	esp, 8
	mov	BYTE PTR $T98379[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T98380[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	movzx	ecx, BYTE PTR $T98379[ebp]
	test	ecx, ecx
	je	SHORT $LN4@actScreens

; 67   : 		screenshot.WritePNG(sFilename);

	lea	eax, DWORD PTR _sFilename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _screenshot$[ebp]
	call	DWORD PTR __imp_?WritePNG@CBitmap@@QAE_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	jmp	$LN3@actScreens
$LN4@actScreens:

; 68   : 	else if (host_screenshotFormat == _T("jpg"))

	push	OFFSET ??_C@_17HGCFFOJO@?$AAj?$AAp?$AAg?$AA?$AA@
	lea	ecx, DWORD PTR $T98382[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	eax, DWORD PTR $T98382[ebp]
	push	eax
	push	OFFSET ?host_screenshotFormat@@3V?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@A ; host_screenshotFormat
	call	??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; operator==
	add	esp, 8
	mov	BYTE PTR $T98381[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T98382[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	movzx	ecx, BYTE PTR $T98381[ebp]
	test	ecx, ecx
	je	SHORT $LN2@actScreens

; 69   : 		screenshot.WriteJPEG(sFilename, host_screenshotQuality);

	mov	ecx, OFFSET ?host_screenshotQuality@@3V?$CCvar@HH@@A ; host_screenshotQuality
	call	??B?$CCvar@HH@@QBEHXZ			; CCvar<int,int>::operator int
	push	eax
	lea	eax, DWORD PTR _sFilename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _screenshot$[ebp]
	call	DWORD PTR __imp_?WriteJPEG@CBitmap@@QAE_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@H@Z

; 70   : 	else

	jmp	SHORT $LN3@actScreens
$LN2@actScreens:

; 71   : 		return;

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _screenshot$[ebp]
	call	DWORD PTR __imp_??1CBitmap@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sFilename$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	jmp	SHORT $LN5@actScreens
$LN3@actScreens:

; 72   : 
; 73   : 	Console << _T("Screenshot saved to: ") << sFilename << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	lea	ecx, DWORD PTR _sFilename$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@MPJFMEDL@?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AA?5?$AAs?$AAa?$AAv?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?3?$AA?5?$AA?$AA@
	mov	edx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [edx]
	call	??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ; CConsole::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<

; 74   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _screenshot$[ebp]
	call	DWORD PTR __imp_??1CBitmap@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sFilename$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@actScreens:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$0:
	lea	ecx, DWORD PTR $T98377[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$1:
	lea	ecx, DWORD PTR $T98378[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$2:
	lea	ecx, DWORD PTR _sFilename$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$3:
	lea	ecx, DWORD PTR _screenshot$[ebp]
	jmp	DWORD PTR __imp_??1CBitmap@@QAE@XZ
__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$4:
	lea	ecx, DWORD PTR $T98380[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$5:
	lea	ecx, DWORD PTR $T98382[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-292]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; actScreenshotFn
PUBLIC	?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdSystemErrorFn
EXTRN	__imp_?Error@CSystem@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
EXTRN	__imp_?K2System@@3AAVCSystem@@A:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$1
__ehfuncinfo$?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
_TEXT	SEGMENT
tv78 = -148						; size = 4
tv67 = -144						; size = 4
$T98397 = -140						; size = 32
$T98398 = -108						; size = 32
__$EHRec$ = -12						; size = 12
_pElem$ = 8						; size = 4
_vArgList$ = 12						; size = 4
?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z PROC ; cmdSystemErrorFn, COMDAT

; 81   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 82   : 	K2System.Error(ConcatinateArgs(vArgList));

	push	OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
	lea	ecx, DWORD PTR $T98397[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T98397[ebp]
	push	eax
	mov	ecx, DWORD PTR _vArgList$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T98398[ebp]
	push	edx
	call	DWORD PTR __imp_?ConcatinateArgs@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@ABV12@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv67[ebp], eax
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv78[ebp]
	push	ecx
	mov	edx, DWORD PTR __imp_?K2System@@3AAVCSystem@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?Error@CSystem@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T98398[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T98397[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 83   : 	return true;

	mov	al, 1

; 84   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$0:
	lea	ecx, DWORD PTR $T98397[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z$1:
	lea	ecx, DWORD PTR $T98398[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ENDP ; cmdSystemErrorFn
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\c_cvar.h
;	COMDAT ??B?$CCvar@HH@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CCvar@HH@@QBEHXZ PROC				; CCvar<int,int>::operator int, COMDAT
; _this$ = ecx

; 354  : 					operator T() const							{ return m_Value; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CCvar@HH@@QBEHXZ ENDP				; CCvar<int,int>::operator int
_TEXT	ENDS
PUBLIC	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::AddOutputHistory
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\c_console.h
;	COMDAT ??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 213  : 	CConsoleStream&	operator<<(const wstring &s)		{ AddOutputHistory(s); return *this; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::AddOutputHistory
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CConsoleStream::operator<<
_TEXT	ENDS
EXTRN	__imp_?AddOutputHistoryT@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sLine$ = 8						; size = 4
?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CConsoleStream::AddOutputHistory, COMDAT
; _this$ = ecx

; 177  : 	void			AddOutputHistory(const wstring &sLine)		{ AddOutputHistoryT(WStringToTString(sLine)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?AddOutputHistoryT@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CConsoleStream::AddOutputHistory
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ PROC ; CConsole::GetNewl, COMDAT
; _this$ = ecx

; 324  : 	const tstring&			GetNewl() const							{ return m_newl; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 204				; 000000ccH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ENDP ; CConsole::GetNewl
_TEXT	ENDS
PUBLIC	??6CConsoleStream@@QAEAAV0@PB_W@Z		; CConsoleStream::operator<<
; Function compile flags: /Odtp /ZI
;	COMDAT ??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sz$ = 8						; size = 4
??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z PROC		; CConsole::operator<<, COMDAT
; _this$ = ecx

; 368  : 	CConsoleStream&			operator<<(const TCHAR *sz)				{ return (*m_pDefaultStream) << sz; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??6CConsole@@QAEAAVCConsoleStream@@PB_W@Z ENDP		; CConsole::operator<<
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??6CConsoleStream@@QAEAAV0@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6CConsoleStream@@QAEAAV0@PB_W@Z$0
__ehfuncinfo$??6CConsoleStream@@QAEAAV0@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??6CConsoleStream@@QAEAAV0@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@PB_W@Z
_TEXT	SEGMENT
$T98419 = -112						; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sz$ = 8						; size = 4
??6CConsoleStream@@QAEAAV0@PB_W@Z PROC			; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 211  : 	CConsoleStream&	operator<<(const wchar_t *sz)		{ AddOutputHistory(sz); return *this; }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??6CConsoleStream@@QAEAAV0@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T98419[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T98419[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::AddOutputHistory
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T98419[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6CConsoleStream@@QAEAAV0@PB_W@Z$0:
	lea	ecx, DWORD PTR $T98419[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??6CConsoleStream@@QAEAAV0@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??6CConsoleStream@@QAEAAV0@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??6CConsoleStream@@QAEAAV0@PB_W@Z ENDP			; CConsoleStream::operator<<
; Function compile flags: /Odtp /ZI
;	COMDAT ??6CConsole@@QAEAAVCConsoleStream@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??6CConsole@@QAEAAVCConsoleStream@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CConsole::operator<<, COMDAT
; _this$ = ecx

; 369  : 	CConsoleStream&			operator<<(const tstring &s)			{ return (*m_pDefaultStream) << s; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??6CConsole@@QAEAAVCConsoleStream@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CConsole::operator<<
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\c_cvar.h
;	COMDAT ??B?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
_TEXT	SEGMENT
$T98432 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 411  : 					operator tstring() const				{ return m_Value; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T98432[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 332				; 0000014cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR $T98432[ebp]
	or	ecx, 1
	mov	DWORD PTR $T98432[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??$?8_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$0
__ehfuncinfo$??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
tv75 = -120						; size = 4
tv76 = -116						; size = 4
$T98436 = -109						; size = 1
$T98437 = -108						; size = 32
__$EHRec$ = -12						; size = 12
_var$ = 8						; size = 4
_str$ = 12						; size = 4
??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; operator==, COMDAT

; 1217 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1218 : 	return var.GetString() == str;

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T98437[ebp]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR tv76[ebp], eax
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR tv75[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv75[ebp]
	push	ecx
	call	??$?8_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 8
	mov	BYTE PTR $T98436[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T98437[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	al, BYTE PTR $T98436[ebp]

; 1219 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$0:
	lea	ecx, DWORD PTR $T98437[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??8@YA_NABV?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; operator==
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size, COMDAT
; _this$ = ecx

; 702  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 703  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@size
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@size
$LN3@size:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+8]
	sar	eax, 5
	mov	DWORD PTR tv70[ebp], eax
$LN4@size:
	mov	eax, DWORD PTR tv70[ebp]

; 704  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
_TEXT	ENDS
PUBLIC	??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BPK@NJIFPGEO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ ; `string'
PUBLIC	??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
;	COMDAT ??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'P', 00H, 'o', 00H, 's', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '('
	DB	00H, ')', 00H, '"', 00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BPK@NJIFPGEO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@
CONST	SEGMENT
??_C@_1BPK@NJIFPGEO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i'
	DB	00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, '_', 00H, 't', 00H, ',', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't'
	DB	00H, 's', 00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, '_', 00H, 't', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H
	DB	'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'A'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, '_', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 'K', 00H, '2', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H
	DB	'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '_', 00H, 't', 00H, ',', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, '_', 00H, 't', 00H, '>', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 'w', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '_', 00H, 't', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H
	DB	'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
CONST	SEGMENT
??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ DB '('
	DB	00H, '"', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, ' ', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H
	DB	'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u'
	DB	00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ',', 00H, ' '
	DB	00H, '0', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '8', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e'
	DB	00H, '\', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@I@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator[], COMDAT
; _this$ = ecx

; 736  : 		{	// subscript nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 737  : 
; 738  :  #if _HAS_ITERATOR_DEBUGGING
; 739  : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@operator

; 740  : 			{
; 741  : 			_DEBUG_ERROR("vector subscript out of range");

	push	741					; 000002e5H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH

; 742  : 			_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	742					; 000002e6H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	push	0
	push	742					; 000002e6H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1BPK@NJIFPGEO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 743  : 			}
; 744  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 745  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator
	xor	eax, eax
	jne	SHORT $LN6@operator
	push	OFFSET ??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	745					; 000002e9H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	745					; 000002e9H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1BPK@NJIFPGEO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN1@operator:

; 746  : 
; 747  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]

; 748  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@I@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::~_String_val<wchar_t,K2StringAllocator<wchar_t> >
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy
PUBLIC	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
PUBLIC	??0?$K2StringAllocator@_W@@QAE@XZ		; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z$1
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
tv87 = -92						; size = 4
tv86 = -88						; size = 4
$T98455 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 650  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T98455[ebp], esp
	call	??0?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv87[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 651  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 652  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 653  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
PUBLIC	?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
PUBLIC	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
;	COMDAT ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB DD 0ffffffffH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 720  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 721  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 722  : 		assign(_Right, 0, npos);

	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 723  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 904  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 905  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 906  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??1?$K2StringAllocator@_W@@QAE@XZ		; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>
EXTRN	__imp_??1_String_base@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ PROC ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::~_String_val<wchar_t,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ ENDP ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::~_String_val<wchar_t,K2StringAllocator<wchar_t> >
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::erase
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
EXTRN	__imp_?_Xran@_String_base@std@@SAXXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1038 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1039 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1040 : 			_String_base::_Xran();	// _Roff off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN5@assign:

; 1041 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1042 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1043 : 			_Num = _Count;	// trim _Num to size

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
$LN4@assign:

; 1044 : 
; 1045 : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1046 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
	push	eax
	mov	ecx, DWORD PTR __Roff$[ebp]
	add	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::erase
	mov	edx, DWORD PTR __Roff$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1047 : 		else if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1048 : 			{	// make room and assign new stuff
; 1049 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Roff$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	push	eax
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H

; 1050 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN2@assign:

; 1051 : 			}
; 1052 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1053 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
EXTRN	__imp_?length@?$char_traits@_W@std@@SAIPB_W@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1069 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1070 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?length@?$char_traits@_W@std@@SAIPB_W@Z
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 1071 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?deallocate@?$K2StringAllocator@_W@@QAEXPA_WI@Z	; K2StringAllocator<wchar_t>::deallocate
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Ptr$83273 = -8					; size = 4
_this$ = -4						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2066 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2067 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2068 : 			;
; 2069 : 		else if (_BUF_SIZE <= _Myres)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 8
	jb	SHORT $LN3@Tidy

; 2070 : 			{	// copy any leftovers to small buffer and deallocate
; 2071 : 			_Elem *_Ptr = _Bx._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Ptr$83273[ebp], ecx

; 2072 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2073 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$83273[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H
$LN1@Tidy:

; 2074 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$83273[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2StringAllocator@_W@@QAEXPA_WI@Z ; K2StringAllocator<wchar_t>::deallocate
$LN3@Tidy:

; 2075 : 			}
; 2076 : 		_Myres = _BUF_SIZE - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 7

; 2077 : 		_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos

; 2078 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2087 : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2088 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 8
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv70[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv70[ebp]

; 2089 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2092 : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2093 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 8
	jb	SHORT $LN3@Myptr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Myptr@2
$LN3@Myptr@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv70[ebp], eax
$LN4@Myptr@2:
	mov	eax, DWORD PTR tv70[ebp]

; 2094 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$K2StringAllocator@_W@@QAE@ABV0@@Z		; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
EXTRN	__imp_??0_String_base@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z$1
__ehfuncinfo$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z PROC ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 471  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_String_base@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$K2StringAllocator@_W@@QAE@ABV0@@Z	; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Al$[ebp]
	call	??1?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z$0:
	lea	ecx, DWORD PTR __Al$[ebp]
	jmp	??1?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>
__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z ENDP ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 477  : 		{	// copy constructor

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_String_base@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$K2StringAllocator@_W@@QAE@ABV0@@Z	; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>

; 478  : #if defined(_DEBUG)
; 479  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	jne	SHORT $LN2@String_val

; 480  : 			{
; 481  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -3			; fffffffdH
$LN2@String_val:

; 482  : 			}
; 483  : #endif
; 484  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
PUBLIC	?GetInstance@CMemManager@@SAPAV1@XZ		; CMemManager::GetInstance
EXTRN	__imp_??0?$allocator@_W@std@@QAE@XZ:PROC
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2StringAllocator@_W@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$K2StringAllocator@_W@@QAE@XZ PROC			; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>, COMDAT
; _this$ = ecx

; 78   : 	K2StringAllocator()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$allocator@_W@std@@QAE@XZ

; 79   : 	{
; 80   : 		// ensure that the memory manager is initialized.
; 81   : 		CMemManager::GetInstance();

	call	?GetInstance@CMemManager@@SAPAV1@XZ	; CMemManager::GetInstance

; 82   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$K2StringAllocator@_W@@QAE@XZ ENDP			; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
_TEXT	ENDS
PUBLIC	??_C@_1BM@OHEHCOIA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@KJPBGHJA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@LOIDLIIL@?$AAc?$AA?3?$AA?2?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAk?$AA2?$AA?2?$AAc?$AA_?$AAm?$AAe?$AAm?$AAm?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?4@ ; `string'
PUBLIC	?__LINE__Var@?1??GetInstance@CMemManager@@SAPAV2@XZ@4JA@ff9028fa ; `CMemManager::GetInstance'::`2'::__LINE__Var
EXTRN	__imp_?Init@CMemManager@@AAEXXZ:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp_?s_bRequested@CMemManager@@0_NA:BYTE
EXTRN	__imp_?s_pInstance@CMemManager@@0PAV1@A:DWORD
EXTRN	__imp___wassert:PROC
EXTRN	__imp_?s_bReleased@CMemManager@@0_NA:BYTE
;	COMDAT ??_C@_1BM@OHEHCOIA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?$AA@
; File c:\code\hon\src\k2\c_memmanager.h
CONST	SEGMENT
??_C@_1BM@OHEHCOIA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, '_', 00H, 'b', 00H, 'R', 00H, 'e', 00H, 'q', 00H
	DB	'u', 00H, 'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@KJPBGHJA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@KJPBGHJA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, '_', 00H, 'b', 00H, 'R', 00H, 'e', 00H, 'l', 00H
	DB	'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@LOIDLIIL@?$AAc?$AA?3?$AA?2?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAk?$AA2?$AA?2?$AAc?$AA_?$AAm?$AAe?$AAm?$AAm?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?4@
CONST	SEGMENT
??_C@_1EE@LOIDLIIL@?$AAc?$AA?3?$AA?2?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAk?$AA2?$AA?2?$AAc?$AA_?$AAm?$AAe?$AAm?$AAm?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?4@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	'\', 00H, 'h', 00H, 'o', 00H, 'n', 00H, '\', 00H, 's', 00H, 'r'
	DB	00H, 'c', 00H, '\', 00H, 'k', 00H, '2', 00H, '\', 00H, 'c', 00H
	DB	'_', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n'
	DB	00H, 'a', 00H, 'g', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetInstance@CMemManager@@SAPAV2@XZ@4JA@ff9028fa
_DATA	SEGMENT
?__LINE__Var@?1??GetInstance@CMemManager@@SAPAV2@XZ@4JA@ff9028fa DD 0e2H ; `CMemManager::GetInstance'::`2'::__LINE__Var
; Function compile flags: /Odtp /ZI
_DATA	ENDS
;	COMDAT ?GetInstance@CMemManager@@SAPAV1@XZ
_TEXT	SEGMENT
?GetInstance@CMemManager@@SAPAV1@XZ PROC		; CMemManager::GetInstance, COMDAT

; 226  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 227  : 	assert(!s_bReleased);

	mov	eax, DWORD PTR __imp_?s_bReleased@CMemManager@@0_NA
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@GetInstanc
	mov	edx, DWORD PTR ?__LINE__Var@?1??GetInstance@CMemManager@@SAPAV2@XZ@4JA@ff9028fa
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_1EE@LOIDLIIL@?$AAc?$AA?3?$AA?2?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAk?$AA2?$AA?2?$AAc?$AA_?$AAm?$AAe?$AAm?$AAm?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?4@
	push	OFFSET ??_C@_1BK@KJPBGHJA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN4@GetInstanc:

; 228  : 	if (s_pInstance == NULL)

	mov	eax, DWORD PTR __imp_?s_pInstance@CMemManager@@0PAV1@A
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@GetInstanc

; 229  : 	{
; 230  : 		assert(!s_bRequested);

	mov	eax, DWORD PTR __imp_?s_bRequested@CMemManager@@0_NA
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@GetInstanc
	mov	edx, DWORD PTR ?__LINE__Var@?1??GetInstance@CMemManager@@SAPAV2@XZ@4JA@ff9028fa
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_1EE@LOIDLIIL@?$AAc?$AA?3?$AA?2?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAk?$AA2?$AA?2?$AAc?$AA_?$AAm?$AAe?$AAm?$AAm?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?4@
	push	OFFSET ??_C@_1BM@OHEHCOIA@?$AA?$CB?$AAs?$AA_?$AAb?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
$LN5@GetInstanc:

; 231  : 		s_bRequested = true;

	mov	eax, DWORD PTR __imp_?s_bRequested@CMemManager@@0_NA
	mov	BYTE PTR [eax], 1

; 232  : 		s_pInstance = (CMemManager*)malloc(sizeof(CMemManager));

	push	1
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	ecx, DWORD PTR __imp_?s_pInstance@CMemManager@@0PAV1@A
	mov	DWORD PTR [ecx], eax

; 233  : #ifdef __GNUC__
; 234  : 		g_pMemManager = s_pInstance;
; 235  : #endif
; 236  : 		s_pInstance->Init();

	mov	eax, DWORD PTR __imp_?s_pInstance@CMemManager@@0PAV1@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?Init@CMemManager@@AAEXXZ
$LN1@GetInstanc:

; 237  : 	}
; 238  : 	return s_pInstance;

	mov	eax, DWORD PTR __imp_?s_pInstance@CMemManager@@0PAV1@A
	mov	eax, DWORD PTR [eax]

; 239  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstance@CMemManager@@SAPAV1@XZ ENDP		; CMemManager::GetInstance
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
_TEXT	ENDS
;	COMDAT ??1?$K2StringAllocator@_W@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$K2StringAllocator@_W@@QAE@XZ PROC			; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>, COMDAT
; _this$ = ecx

; 88   : 	~K2StringAllocator() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$K2StringAllocator@_W@@QAE@XZ ENDP			; K2StringAllocator<wchar_t>::~K2StringAllocator<wchar_t>
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Inside
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1056 : 		{	// assign [_Ptr, _Ptr + _Num)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1057 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign@2

; 1058 : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
	jmp	SHORT $LN3@assign@2
$LN2@assign@2:

; 1059 : 
; 1060 : 		if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign@2

; 1061 : 			{	// make room and assign new stuff
; 1062 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	push	eax
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H

; 1063 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN1@assign@2:

; 1064 : 			}
; 1065 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign@2:

; 1066 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$85088 = -8					; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1240 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1241 : 		if (_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN3@erase

; 1242 : 			_String_base::_Xran();	// _Off off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN3@erase:

; 1243 : 		if (_Mysize - _Off < _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN2@erase

; 1244 : 			_Count = _Mysize - _Off;	// trim _Count

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN2@erase:

; 1245 : 		if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@erase

; 1246 : 			{	// move elements down
; 1247 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1248 : 				_Mysize - _Off - _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	sub	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	call	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H

; 1249 : 			size_type _Newsize = _Mysize - _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$85088[ebp], ecx

; 1250 : 			_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$85088[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN1@erase:

; 1251 : 			}
; 1252 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1253 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1636 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1637 : 		return (_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 1638 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
_TEXT	ENDS
EXTRN	__imp_?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T98543 = -70						; size = 2
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2030 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2031 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

	mov	WORD PTR $T98543[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+24], ecx
	lea	edx, DWORD PTR $T98543[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Newsize$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	DWORD PTR __imp_?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
	add	esp, 8

; 2032 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Copy
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size
EXTRN	__imp_?_Xlen@_String_base@std@@SAXXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2036 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2037 : 			if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2038 : 			_String_base::_Xlen();	// result too long

	call	DWORD PTR __imp_?_Xlen@_String_base@std@@SAXXZ
$LN6@Grow:

; 2039 : 		if (_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2040 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2041 : 		else if (_Trim && _Newsize < _BUF_SIZE)

	movzx	eax, BYTE PTR __Trim$[ebp]
	test	eax, eax
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 8
	jae	SHORT $LN3@Grow

; 2042 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2043 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv80[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv80[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv80[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2044 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2045 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN4@Grow:

; 2046 : 		return (0 < _Newsize);	// return true only if more work to do

	xor	eax, eax
	cmp	eax, DWORD PTR __Newsize$[ebp]
	sbb	eax, eax
	neg	eax

; 2047 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
_TEXT	ENDS
EXTRN	__imp_??0?$allocator@_W@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2StringAllocator@_W@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_al$ = 8						; size = 4
??0?$K2StringAllocator@_W@@QAE@ABV0@@Z PROC		; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>, COMDAT
; _this$ = ecx

; 86   : 	K2StringAllocator(const K2StringAllocator &al) : std::allocator<T>(al) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$allocator@_W@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$K2StringAllocator@_W@@QAE@ABV0@@Z ENDP		; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
_TEXT	ENDS
PUBLIC	??_C@_0P@CDENJMCL@ctx_STL_string?$AA@		; `string'
PUBLIC	??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@ ; `string'
EXTRN	__imp_?Deallocate@CMemManager@@SAXPAXPBDW4MemoryType@@1F@Z:PROC
;	COMDAT ??_C@_0P@CDENJMCL@ctx_STL_string?$AA@
CONST	SEGMENT
??_C@_0P@CDENJMCL@ctx_STL_string?$AA@ DB 'ctx_STL_string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
CONST	SEGMENT
??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@ DB 'c:\code\h'
	DB	'on\src\k2\c_memmanager.h', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?deallocate@?$K2StringAllocator@_W@@QAEXPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$K2StringAllocator@_W@@QAEXPA_WI@Z PROC	; K2StringAllocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 98   : 	void	deallocate(pointer _Ptr, size_type)		{ MemManager.Deallocate(_Ptr, "ctx_STL_string"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	162					; 000000a2H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	3
	push	OFFSET ??_C@_0P@CDENJMCL@ctx_STL_string?$AA@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?Deallocate@CMemManager@@SAXPAXPBDW4MemoryType@@1F@Z
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$K2StringAllocator@_W@@QAEXPA_WI@Z ENDP	; K2StringAllocator<wchar_t>::deallocate
_TEXT	ENDS
EXTRN	__imp_?max_size@?$allocator@_W@std@@QBEIXZ:PROC
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -76						; size = 4
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1641 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1642 : 		size_type _Num = _Mybase::_Alval.max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_?max_size@?$allocator@_W@std@@QBEIXZ
	mov	DWORD PTR __Num$[ebp], eax

; 1643 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	eax, DWORD PTR __Num$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv70[ebp], eax
$LN4@max_size:
	mov	eax, DWORD PTR tv70[ebp]

; 1644 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z	; K2StringAllocator<wchar_t>::allocate
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$5
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z
_TEXT	SEGMENT
tv149 = -96						; size = 4
tv148 = -96						; size = 4
__Ptr$ = -28						; size = 4
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2000 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2001 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 7
	mov	DWORD PTR __Newres$[ebp], eax

; 2002 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN6@Copy

; 2003 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2004 : 		else if (_Newres / 3 < _Myres / 2

	jmp	SHORT $LN5@Copy
$LN6@Copy:

; 2005 : 			&& _Myres <= max_size() - _Myres / 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 1
	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	esi, 3
	div	esi
	cmp	eax, ecx
	jae	SHORT $LN5@Copy
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+28]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+28], eax
	ja	SHORT $LN5@Copy

; 2006 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR __Newres$[ebp], ecx
$LN5@Copy:

; 2007 : 		_Elem *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 2008 : 
; 2009 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2010 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z ; K2StringAllocator<wchar_t>::allocate
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN9@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$0:

; 2011 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2012 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2013 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2014 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z ; K2StringAllocator<wchar_t>::allocate
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN11@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$1:

; 2015 : 			_CATCH_ALL
; 2016 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 2017 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2018 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$2
	ret	0
$LN11@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$2:

; 2019 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$3
	ret	0
$LN9@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z$3:

; 2020 : 
; 2021 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2022 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H
$LN1@Copy:

; 2023 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 2024 : 		_Bx._Ptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2025 : 		_Myres = _Newres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 2026 : 		_Eos(_Oldlen);

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN8@Copy:

; 2027 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Copy
PUBLIC	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z		; std::_Debug_pointer<wchar_t>
PUBLIC	??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
;	COMDAT ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '8', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e'
	DB	00H, '\', 00H, 'x', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2050 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2051 : 		_DEBUG_POINTER(_Ptr);

	push	2051					; 00000803H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH

; 2052 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	lea	eax, DWORD PTR [eax+edx*2]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2053 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2054 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2055 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2056 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ; CMemManager::Allocate
PUBLIC	??_C@_04CGFJFPFD@none?$AA@			; `string'
;	COMDAT ??_C@_04CGFJFPFD@none?$AA@
; File c:\code\hon\src\k2\k2_stl_allocator.h
CONST	SEGMENT
??_C@_04CGFJFPFD@none?$AA@ DB 'none', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z PROC	; K2StringAllocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 96   : 	pointer	allocate(size_type _Count)				{ return (pointer)MemManager.Allocate(_Count * sizeof(T), "ctx_STL_string"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	160					; 000000a0H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	2
	push	OFFSET ??_C@_0P@CDENJMCL@ctx_STL_string?$AA@
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 1
	push	eax
	call	?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ; CMemManager::Allocate
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$K2StringAllocator@_W@@QAEPA_WI@Z ENDP	; K2StringAllocator<wchar_t>::allocate
_TEXT	ENDS
EXTRN	__imp_?heap_malloc@MICRO_ALLOCATOR@@YAPAXPAVHeapManager@1@I@Z:PROC
EXTRN	__imp_?m_cMicroHeapManager@CMemManager@@0PAVHeapManager@MICRO_ALLOCATOR@@A:DWORD
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\c_memmanager.h
;	COMDAT ?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z
_TEXT	SEGMENT
_pResult$ = -4						; size = 4
_z$ = 8							; size = 4
_szContext$ = 12					; size = 4
_eMemType$ = 16						; size = 4
_szType$ = 20						; size = 4
_szFile$ = 24						; size = 4
_nLine$ = 28						; size = 2
?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z PROC ; CMemManager::Allocate, COMDAT

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 338  : 	void* pResult;
; 339  : #ifdef K2_USE_MICRO_ALLOCATOR
; 340  : 	pResult = MICRO_ALLOCATOR::heap_malloc(m_cMicroHeapManager, z);

	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?m_cMicroHeapManager@CMemManager@@0PAVHeapManager@MICRO_ALLOCATOR@@A
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp_?heap_malloc@MICRO_ALLOCATOR@@YAPAXPAVHeapManager@1@I@Z
	add	esp, 8
	mov	DWORD PTR _pResult$[ebp], eax

; 341  : #else
; 342  : 	pResult = malloc(z);
; 343  : #endif
; 344  : 
; 345  : #ifdef K2_TRACK_MEM
; 346  : 	if (s_bTrackAllocs)
; 347  : 	{
; 348  : 		if (szContext != NULL)
; 349  : 			TRACK_ALLOC(pResult, (uint)z, eMemType, GetStr(szContext), GetStr(szType), GetStr(szFile), nLine);
; 350  : 	}
; 351  : #endif
; 352  : 	return pResult;

	mov	eax, DWORD PTR _pResult$[ebp]

; 353  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ENDP ; CMemManager::Allocate
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEHABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::compare
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\string
;	COMDAT ??$?8_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z PROC ; std::operator==<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT

; 74   : 	{	// test for string equality

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 75   : 	return (_Left.compare(_Right) == 0);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	call	?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEHABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::compare
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 76   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$?8_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ENDP ; std::operator==<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::compare
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEHABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::compare, COMDAT
; _this$ = ecx

; 1927 : 		{	// compare [0, _Mysize) with _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1928 : 		return (compare(0, _Mysize, _Right._Myptr(), _Right.size()));

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::compare

; 1929 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEHABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::compare
_TEXT	ENDS
EXTRN	__imp_?compare@?$char_traits@_W@std@@SAHPB_W0I@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEHIIPB_WI@Z
_TEXT	SEGMENT
tv88 = -80						; size = 4
tv89 = -76						; size = 4
tv76 = -76						; size = 4
__Ans$ = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEHIIPB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::compare, COMDAT
; _this$ = ecx

; 1960 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1961 : 		_DEBUG_POINTER(_Ptr);

	push	1961					; 000007a9H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	; std::_Debug_pointer<wchar_t>
	add	esp, 12					; 0000000cH

; 1962 : 		if (_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN2@compare

; 1963 : 			_String_base::_Xran();	// _Off off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN2@compare:

; 1964 : 		if (_Mysize - _Off < _N0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR __N0$[ebp]
	jae	SHORT $LN1@compare

; 1965 : 			_N0 = _Mysize - _Off;	// trim _N0 to size

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __N0$[ebp], ecx
$LN1@compare:

; 1966 : 
; 1967 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 1968 : 			_N0 < _Count ? _N0 : _Count);

	mov	eax, DWORD PTR __N0$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@compare
	mov	ecx, DWORD PTR __N0$[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN6@compare
$LN5@compare:
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv76[ebp], edx
$LN6@compare:
	mov	eax, DWORD PTR tv76[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	call	DWORD PTR __imp_?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ans$[ebp], eax

; 1969 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 1970 : 			: _N0 == _Count ? 0 : +1);

	cmp	DWORD PTR __Ans$[ebp], 0
	je	SHORT $LN9@compare
	mov	eax, DWORD PTR __Ans$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN10@compare
$LN9@compare:
	mov	ecx, DWORD PTR __N0$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN7@compare
	mov	DWORD PTR tv88[ebp], -1
	jmp	SHORT $LN8@compare
$LN7@compare:
	mov	edx, DWORD PTR __N0$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	setne	al
	mov	DWORD PTR tv88[ebp], eax
$LN8@compare:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv89[ebp], ecx
$LN10@compare:
	mov	eax, DWORD PTR tv89[ebp]

; 1971 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEHIIPB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::compare
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
$T98597 = -65						; size = 1
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 581  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 582  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

	call	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
	mov	BYTE PTR $T98597[ebp], al
	mov	al, BYTE PTR $T98597[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First1$[ebp]
	push	ecx
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 20					; 00000014H

; 583  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 568  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 569  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 570  : 		return (_Secure);

	mov	al, BYTE PTR __Secure$[ebp]

; 571  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
EXTRN	__imp_?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 590  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
	add	esp, 16					; 00000010H

; 591  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
; File c:\program files\microsoft visual studio 8\vc\include\xutility
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z PROC		; std::_Debug_pointer<wchar_t>, COMDAT

; 1370 : 	{	// test iterator for non-singularity, const pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1371 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 1372 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:

; 1373 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ENDP		; std::_Debug_pointer<wchar_t>
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
$T98606 = -65						; size = 1
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 608  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 609  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

	call	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
	mov	BYTE PTR $T98606[ebp], al
	mov	al, BYTE PTR $T98606[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First1$[ebp]
	push	ecx
	call	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
	add	esp, 20					; 00000014H

; 610  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
EXTRN	__imp_?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 617  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
	add	esp, 16					; 00000010H

; 618  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_C@_1CA@PHJAHMPL@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA3?$AA2?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@COCEDJJA@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA6?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@LFLFHLIG@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA2?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@DACOGBDH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA8?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@KCEAAEH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA6?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@EHOMKBEM@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA4?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@JBLFECFB@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA2?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@FBHJOOD@?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@IFOPMOGB@?$AAB?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_19KLMLHLJG@?$AAN?$AAo?$AAn?$AAe?$AA?$AA@	; `string'
EXTRN	_atexit:PROC
;	COMDAT ??_C@_1CA@PHJAHMPL@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA3?$AA2?$AAx?$AA?$AA@
; File c:\code\hon\src\k2\c_vid.h
CONST	SEGMENT
??_C@_1CA@PHJAHMPL@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA3?$AA2?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '3', 00H, '2'
	DB	00H, 'x', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@COCEDJJA@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA6?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@COCEDJJA@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA6?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '1', 00H, '6'
	DB	00H, 'x', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@LFLFHLIG@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA2?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@LFLFHLIG@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA2?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '1', 00H, '2'
	DB	00H, 'x', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@DACOGBDH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA8?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@DACOGBDH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA8?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '8', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@KCEAAEH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA6?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@KCEAAEH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA6?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '6', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@EHOMKBEM@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA4?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@EHOMKBEM@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA4?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '4', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@JBLFECFB@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA2?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@JBLFECFB@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA2?$AAx?$AA?$AA@ DB 'A'
	DB	00H, 'n', 00H, 'i', 00H, 's', 00H, 'o', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'i', 00H, 'c', 00H, ' ', 00H, '2', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@FBHJOOD@?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@FBHJOOD@?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ DB 'T'
	DB	00H, 'r', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	'a', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@IFOPMOGB@?$AAB?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@IFOPMOGB@?$AAB?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ DB 'B'
	DB	00H, 'i', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'a', 00H
	DB	'r', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19KLMLHLJG@?$AAN?$AAo?$AAn?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19KLMLHLJG@?$AAN?$AAo?$AAn?$AAe?$AA?$AA@ DB 'N', 00H, 'o', 00H, 'n', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??__Eg_aTextureFilteringNames@@YAXXZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??__Eg_aTextureFilteringNames@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??__Eg_aTextureFilteringNames@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$8
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__Eg_aTextureFilteringNames@@YAXXZ
text$yc	SEGMENT
__$EHRec$ = -12						; size = 12
??__Eg_aTextureFilteringNames@@YAXXZ PROC		; `dynamic initializer for 'g_aTextureFilteringNames'', COMDAT

; 34   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__Eg_aTextureFilteringNames@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 35   : 	_T("None"),

	push	OFFSET ??_C@_19KLMLHLJG@?$AAN?$AAo?$AAn?$AAe?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 36   : 	_T("Bilinear"),

	push	OFFSET ??_C@_1BC@IFOPMOGB@?$AAB?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+32
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 37   : 	_T("Trilinear"),

	push	OFFSET ??_C@_1BE@FBHJOOD@?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+64
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 38   : 	_T("Anisotropic 2x"),

	push	OFFSET ??_C@_1BO@JBLFECFB@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA2?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+96
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 39   : 	_T("Anisotropic 4x"),

	push	OFFSET ??_C@_1BO@EHOMKBEM@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA4?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+128
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 40   : 	_T("Anisotropic 6x"),

	push	OFFSET ??_C@_1BO@KCEAAEH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA6?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+160
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 41   : 	_T("Anisotropic 8x"),

	push	OFFSET ??_C@_1BO@DACOGBDH@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA8?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+192
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 42   : 	_T("Anisotropic 12x"),

	push	OFFSET ??_C@_1CA@LFLFHLIG@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA2?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+224
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 43   : 	_T("Anisotropic 16x"),

	push	OFFSET ??_C@_1CA@COCEDJJA@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA1?$AA6?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+256
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 44   : 	_T("Anisotropic 32x")
; 45   : };

	push	OFFSET ??_C@_1CA@PHJAHMPL@?$AAA?$AAn?$AAi?$AAs?$AAo?$AAt?$AAr?$AAo?$AAp?$AAi?$AAc?$AA?5?$AA3?$AA2?$AAx?$AA?$AA@
	mov	ecx, OFFSET _g_aTextureFilteringNames+288
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ??__Fg_aTextureFilteringNames@@YAXXZ ; `dynamic atexit destructor for 'g_aTextureFilteringNames''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$0:
	mov	ecx, OFFSET _g_aTextureFilteringNames
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$1:
	mov	ecx, OFFSET _g_aTextureFilteringNames+32
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$2:
	mov	ecx, OFFSET _g_aTextureFilteringNames+64
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$3:
	mov	ecx, OFFSET _g_aTextureFilteringNames+96
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$4:
	mov	ecx, OFFSET _g_aTextureFilteringNames+128
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$5:
	mov	ecx, OFFSET _g_aTextureFilteringNames+160
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$6:
	mov	ecx, OFFSET _g_aTextureFilteringNames+192
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$7:
	mov	ecx, OFFSET _g_aTextureFilteringNames+224
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Eg_aTextureFilteringNames@@YAXXZ$8:
	mov	ecx, OFFSET _g_aTextureFilteringNames+256
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__Eg_aTextureFilteringNames@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__Eg_aTextureFilteringNames@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__Eg_aTextureFilteringNames@@YAXXZ ENDP		; `dynamic initializer for 'g_aTextureFilteringNames''
PUBLIC	??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
PUBLIC	??_C@_1CM@JMAHCCGN@?$AAh?$AAo?$AAs?$AAt?$AA_?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CM@JMAHCCGN@?$AAh?$AAo?$AAs?$AAt?$AA_?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@
; File c:\code\hon\src\shell\misc_cmds.cpp
CONST	SEGMENT
??_C@_1CM@JMAHCCGN@?$AAh?$AAo?$AAs?$AAt?$AA_?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@ DB 'h'
	DB	00H, 'o', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H, 'c', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, 's', 00H, 'h', 00H, 'o'
	DB	00H, 't', 00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__Ehost_screenshotFormat@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__Ehost_screenshotFormat@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??__Ehost_screenshotFormat@@YAXXZ$1
__ehfuncinfo$??__Ehost_screenshotFormat@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??__Ehost_screenshotFormat@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__Ehost_screenshotFormat@@YAXXZ
text$yc	SEGMENT
$T98630 = -140						; size = 32
$T98631 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__Ehost_screenshotFormat@@YAXXZ PROC			; `dynamic initializer for 'host_screenshotFormat'', COMDAT

; 20   : CVAR_STRINGF(host_screenshotFormat,		"jpg",	CVAR_SAVECONFIG);

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__Ehost_screenshotFormat@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_17HGCFFOJO@?$AAj?$AAp?$AAg?$AA?$AA@
	lea	ecx, DWORD PTR $T98630[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	OFFSET ??_C@_1CM@JMAHCCGN@?$AAh?$AAo?$AAs?$AAt?$AA_?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@
	lea	ecx, DWORD PTR $T98631[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	0
	push	256					; 00000100H
	lea	eax, DWORD PTR $T98630[ebp]
	push	eax
	lea	ecx, DWORD PTR $T98631[ebp]
	push	ecx
	mov	ecx, OFFSET ?host_screenshotFormat@@3V?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@A ; host_screenshotFormat
	call	??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T98631[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T98630[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__Fhost_screenshotFormat@@YAXXZ ; `dynamic atexit destructor for 'host_screenshotFormat''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__Ehost_screenshotFormat@@YAXXZ$0:
	lea	ecx, DWORD PTR $T98630[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??__Ehost_screenshotFormat@@YAXXZ$1:
	lea	ecx, DWORD PTR $T98631[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__Ehost_screenshotFormat@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__Ehost_screenshotFormat@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__Ehost_screenshotFormat@@YAXXZ ENDP			; `dynamic initializer for 'host_screenshotFormat''
PUBLIC	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::push_back
PUBLIC	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??_7?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@6B@ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::`vftable'
PUBLIC	?GetString@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::GetString
PUBLIC	?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Set
PUBLIC	?SetIndex@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::SetIndex
PUBLIC	?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Inc
PUBLIC	?Toggle@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Toggle
PUBLIC	?Reset@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Reset
PUBLIC	?IsDefault@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE_NXZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::IsDefault
PUBLIC	?StoreValue@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::StoreValue
PUBLIC	?RestoreStored@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::RestoreStored
PUBLIC	?GetRangeString@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::GetRangeString
EXTRN	__imp_??1ICvar@@UAE@XZ:PROC
EXTRN	__imp_?DefaultCvar_Cmd@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:PROC
EXTRN	__imp_??0ICvar@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HW4ECvarType@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z:PROC
EXTRN	??_E?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEPAXI@Z:PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::`vector deleting destructor'
EXTRN	?Execute@CConsoleElement@@UAEXABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:PROC ; CConsoleElement::Execute
EXTRN	?Evaluate@CConsoleElement@@UAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:PROC ; CConsoleElement::Evaluate
EXTRN	?Precache@CConsoleElement@@UAE_NABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z:PROC ; CConsoleElement::Precache
;	COMDAT ??_7?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@6B@
; File c:\code\hon\src\k2\c_cvar.h
CONST	SEGMENT
??_7?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@6B@ DD FLAT:??_E?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEPAXI@Z ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::`vftable'
	DD	FLAT:?Execute@CConsoleElement@@UAEXABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	FLAT:?Evaluate@CConsoleElement@@UAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	FLAT:?Precache@CConsoleElement@@UAE_NABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	FLAT:?GetString@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
	DD	FLAT:?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	FLAT:?SetIndex@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	FLAT:?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	FLAT:?Toggle@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ
	DD	FLAT:?Reset@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ
	DD	FLAT:?IsDefault@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE_NXZ
	DD	FLAT:?StoreValue@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ
	DD	FLAT:?RestoreStored@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ
	DD	FLAT:?GetRangeString@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$4
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
_TEXT	SEGMENT
_vArgList$66051 = -36					; size = 20
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sName$ = 8						; size = 4
__Default$ = 12						; size = 4
_iFlags$ = 16						; size = 4
_pfnCmd$ = 20						; size = 4
??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 832  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pfnCmd$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _iFlags$[ebp]
	or	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _sName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0ICvar@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HW4ECvarType@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@6B@
	mov	eax, DWORD PTR __Default$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR __Default$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR __Default$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 833  : 	if (m_bInherentValue)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	test	ecx, ecx
	je	SHORT $LN2@CCvar

; 834  : 	{
; 835  : 		tsvector vArgList; vArgList.push_back(m_sInherentValue);

	lea	ecx, DWORD PTR _vArgList$66051[ebp]
	call	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	lea	ecx, DWORD PTR _vArgList$66051[ebp]
	call	?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::push_back

; 836  : 
; 837  : 		DefaultCvar_Cmd(this, vArgList);

	lea	eax, DWORD PTR _vArgList$66051[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	DWORD PTR __imp_?DefaultCvar_Cmd@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	add	esp, 8

; 838  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _vArgList$66051[ebp]
	call	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
$LN2@CCvar:

; 839  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1ICvar@@UAE@XZ
__unwindfunclet$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$4:
	lea	ecx, DWORD PTR _vArgList$66051[ebp]
	jmp	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
__ehhandler$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@0HP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
PUBLIC	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ PROC ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ENDP ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
EXTRN	__imp_?Modified@ICvar@@QAEXXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?Reset@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Reset, COMDAT
; _this$ = ecx

; 379  : 	void			Reset()									{ if (m_Value == m_Default) return; m_Value = m_Default; Modified(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	push	ecx
	call	??$?8_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Reset
	jmp	SHORT $LN2@Reset
$LN1@Reset:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Modified@ICvar@@QAEXXZ
$LN2@Reset:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Reset
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsDefault@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDefault@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE_NXZ PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::IsDefault, COMDAT
; _this$ = ecx

; 380  : 	bool			IsDefault() const						{ return m_Value == m_Default; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	push	ecx
	call	??$?8_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDefault@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE_NXZ ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::IsDefault
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?StoreValue@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StoreValue@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::StoreValue, COMDAT
; _this$ = ecx

; 383  : 	void			StoreValue()							{ m_Stored = m_Value; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 332				; 0000014cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?StoreValue@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::StoreValue
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?RestoreStored@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RestoreStored@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::RestoreStored, COMDAT
; _this$ = ecx

; 384  : 	void			RestoreStored()							{ m_Value = m_Stored; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 300				; 0000012cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreStored@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::RestoreStored
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetString@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
_TEXT	SEGMENT
$T98667 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetString@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::GetString, COMDAT
; _this$ = ecx

; 386  : 	tstring			GetString() const						{ return m_Value; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T98667[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 332				; 0000014cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR $T98667[ebp]
	or	ecx, 1
	mov	DWORD PTR $T98667[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetString@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::GetString
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetIndex@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_uiIndex$ = 8						; size = 4
_s$ = 12						; size = 4
?SetIndex@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::SetIndex, COMDAT
; _this$ = ecx

; 391  : 	void			SetIndex(uint uiIndex, const tstring &s)	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetIndex@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::SetIndex
_TEXT	ENDS
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?GetRangeString@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
_TEXT	SEGMENT
$T98674 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetRangeString@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::GetRangeString, COMDAT
; _this$ = ecx

; 397  : 	tstring			GetRangeString() const					{ return _T(""); }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T98674[ebp], 0
	push	OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T98674[ebp]
	or	eax, 1
	mov	DWORD PTR $T98674[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetRangeString@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::GetRangeString
_TEXT	ENDS
PUBLIC	??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEPAXI@Z PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEPAXI@Z ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ$2
__ehfuncinfo$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 377  : 	~CCvar() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1ICvar@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1ICvar@@UAE@XZ
__unwindfunclet$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
PUBLIC	??$?9_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$0
__ehfuncinfo$?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
$T98693 = -117						; size = 1
_String$ = -52						; size = 32
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Set, COMDAT
; _this$ = ecx

; 1069 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1070 : 	tstring String;

	push	1
	lea	ecx, DWORD PTR $T98693[ebp]
	call	??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
	mov	al, BYTE PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _String$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1071 : 
; 1072 : 	String = s;

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR _String$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=

; 1073 : 
; 1074 : 	if (s != m_Value)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 332				; 0000014cH
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	??$?9_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Set

; 1075 : 	{
; 1076 : 		m_Value = s;

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=

; 1077 : 		Modified();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Modified@ICvar@@QAEXXZ
$LN1@Set:

; 1078 : 	}
; 1079 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _String$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$0:
	lea	ecx, DWORD PTR _String$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Set@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Set
PUBLIC	??6CConsoleStream@@QAEAAV0@PBD@Z		; CConsoleStream::operator<<
PUBLIC	??_C@_0BM@JCOAHNPG@Inc?5called?5on?5a?5string?5cvar?$AA@ ; `string'
PUBLIC	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z ; XtoW
PUBLIC	?AtoF@@YAMABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; AtoF
PUBLIC	__$ArrayPad$
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BM@JCOAHNPG@Inc?5called?5on?5a?5string?5cvar?$AA@
CONST	SEGMENT
??_C@_0BM@JCOAHNPG@Inc?5called?5on?5a?5string?5cvar?$AA@ DB 'Inc called o'
	DB	'n a string cvar', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$1
__ehfuncinfo$?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
tv142 = -172						; size = 4
tv65 = -168						; size = 4
tv155 = -164						; size = 4
tv173 = -160						; size = 8
$T98704 = -149						; size = 1
$T98705 = -148						; size = 32
_sValue$ = -52						; size = 32
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Inc, COMDAT
; _this$ = ecx

; 1156 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1157 : 	tstring sValue;

	push	1
	lea	ecx, DWORD PTR $T98704[ebp]
	call	??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
	mov	al, BYTE PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _sValue$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1158 : 
; 1159 : 	sValue = XtoA(AtoF(m_Value) + AtoF(s));

	push	4
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 332				; 0000014cH
	push	eax
	call	?AtoF@@YAMABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; AtoF
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	fstp	QWORD PTR tv173[ebp]
	call	?AtoF@@YAMABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; AtoF
	add	esp, 4
	fadd	QWORD PTR tv173[ebp]
	fstp	DWORD PTR tv155[ebp]
	fld	DWORD PTR tv155[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T98705[ebp]
	push	edx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z ; XtoW
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv142[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sValue$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T98705[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >

; 1160 : 	Console.Perf << "Inc called on a string cvar" << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	push	OFFSET ??_C@_0BM@JCOAHNPG@Inc?5called?5on?5a?5string?5cvar?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 760				; 000002f8H
	call	??6CConsoleStream@@QAEAAV0@PBD@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<

; 1161 : 
; 1162 : 	if (sValue != m_Value)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 332				; 0000014cH
	push	eax
	lea	ecx, DWORD PTR _sValue$[ebp]
	push	ecx
	call	??$?9_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Inc

; 1163 : 	{
; 1164 : 		m_Value = sValue;

	lea	eax, DWORD PTR _sValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=

; 1165 : 		Modified();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Modified@ICvar@@QAEXXZ
$LN1@Inc:

; 1166 : 	}
; 1167 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sValue$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$0:
	lea	ecx, DWORD PTR _sValue$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z$1:
	lea	ecx, DWORD PTR $T98705[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Inc@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Inc
PUBLIC	__$ArrayPad$
EXTRN	__imp_?FormatFloat@@YAXNHIHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
;	COMDAT xdata$x
; File c:\code\hon\src\k2\xtoa.h
xdata$x	SEGMENT
__unwindtable$?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z$0
__ehfuncinfo$?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z
_TEXT	SEGMENT
$T98718 = -117						; size = 1
$T98721 = -116						; size = 4
_s$ = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
_flags$ = 16						; size = 4
_width$ = 20						; size = 4
_precision$ = 24					; size = 4
?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z PROC ; XtoW, COMDAT

; 142  : inline wstring	XtoW(float f, int flags = 0, int width = 0, int precision = XTOA_DEFAULT_FLOAT_PRECISION)	{ wstring s; FormatFloat(f, flags, width, precision, s); return s; }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T98721[ebp], 0
	push	1
	lea	ecx, DWORD PTR $T98718[ebp]
	call	??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
	mov	al, BYTE PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _precision$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	fld	DWORD PTR _f$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp_?FormatFloat@@YAXNHIHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	add	esp, 24					; 00000018H
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR $T98721[ebp]
	or	ecx, 1
	mov	DWORD PTR $T98721[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z$1:
	mov	eax, DWORD PTR $T98721[ebp]
	and	eax, 1
	je	$LN5@XtoW
	and	DWORD PTR $T98721[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@XtoW:
	ret	0
__ehhandler$?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@MHHH@Z ENDP ; XtoW
PUBLIC	?WTOF@@YANABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; WTOF
; Function compile flags: /Odtp /ZI
;	COMDAT ?AtoF@@YAMABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
tv70 = -68						; size = 4
_s$ = 8							; size = 4
?AtoF@@YAMABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; AtoF, COMDAT

; 208  : inline float				AtoF(const wstring &s)	{ return float(WTOF(s)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?WTOF@@YANABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; WTOF
	add	esp, 4
	fstp	DWORD PTR tv70[ebp]
	fld	DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AtoF@@YAMABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; AtoF
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::c_str
EXTRN	__imp___wtof:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?WTOF@@YANABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?WTOF@@YANABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; WTOF, COMDAT

; 69   : inline double WTOF(const wstring &s) { return _wtof(s.c_str()); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR _s$[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::c_str
	push	eax
	call	DWORD PTR __imp___wtof
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?WTOF@@YANABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; WTOF
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
PUBLIC	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::AddOutputHistory
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
;	COMDAT xdata$x
; File c:\code\hon\src\k2\c_console.h
xdata$x	SEGMENT
__unwindtable$??6CConsoleStream@@QAEAAV0@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6CConsoleStream@@QAEAAV0@PBD@Z$0
__ehfuncinfo$??6CConsoleStream@@QAEAAV0@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??6CConsoleStream@@QAEAAV0@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
$T98735 = -112						; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sz$ = 8						; size = 4
??6CConsoleStream@@QAEAAV0@PBD@Z PROC			; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 210  : 	CConsoleStream&	operator<<(const char *sz)			{ AddOutputHistory(sz); return *this; }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??6CConsoleStream@@QAEAAV0@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T98735[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T98735[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ; CConsoleStream::AddOutputHistory
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T98735[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6CConsoleStream@@QAEAAV0@PBD@Z$0:
	lea	ecx, DWORD PTR $T98735[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
__ehhandler$??6CConsoleStream@@QAEAAV0@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??6CConsoleStream@@QAEAAV0@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??6CConsoleStream@@QAEAAV0@PBD@Z ENDP			; CConsoleStream::operator<<
EXTRN	__imp_?SingleToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@2@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z$0
__ehfuncinfo$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z
_TEXT	SEGMENT
tv72 = -120						; size = 4
tv73 = -116						; size = 4
$T98745 = -112						; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sLine$ = 8						; size = 4
?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z PROC ; CConsoleStream::AddOutputHistory, COMDAT
; _this$ = ecx

; 176  : 	void			AddOutputHistory(const string &sLine)		{ AddOutputHistoryT(StringToTString(sLine)); }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sLine$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T98745[ebp]
	push	ecx
	call	DWORD PTR __imp_?SingleToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@2@@Z
	add	esp, 8
	mov	DWORD PTR tv73[ebp], eax
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv72[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?AddOutputHistoryT@CConsoleStream@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T98745[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z$0:
	lea	ecx, DWORD PTR $T98745[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddOutputHistory@CConsoleStream@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@@Z ENDP ; CConsoleStream::AddOutputHistory
PUBLIC	??_C@_0BP@FLHAAMFJ@Toggle?5called?5on?5a?5string?5cvar?$AA@ ; `string'
;	COMDAT ??_C@_0BP@FLHAAMFJ@Toggle?5called?5on?5a?5string?5cvar?$AA@
; File c:\code\hon\src\k2\c_cvar.h
CONST	SEGMENT
??_C@_0BP@FLHAAMFJ@Toggle?5called?5on?5a?5string?5cvar?$AA@ DB 'Toggle ca'
	DB	'lled on a string cvar', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?Toggle@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Toggle@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ PROC ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Toggle, COMDAT
; _this$ = ecx

; 1182 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1183 : 	// Do nothing by default...
; 1184 : 	Console.Perf << "Toggle called on a string cvar" << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	push	OFFSET ??_C@_0BP@FLHAAMFJ@Toggle?5called?5on?5a?5string?5cvar?$AA@
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 760				; 000002f8H
	call	??6CConsoleStream@@QAEAAV0@PBD@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<

; 1185 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Toggle@?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAEXXZ ENDP ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::Toggle
_TEXT	ENDS
PUBLIC	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl.h
;	COMDAT ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ PROC ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 96   : 	vector()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >

; 97   : 		//: _Mybase()
; 98   : 	{
; 99   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ENDP ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Tidy
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 545  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 546  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Tidy

; 547  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::insert
PUBLIC	?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::end
PUBLIC	?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill
PUBLIC	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range
PUBLIC	?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::capacity
; Function compile flags: /Odtp /ZI
;	COMDAT ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
_TEXT	SEGMENT
tv135 = -92						; size = 4
tv134 = -88						; size = 4
$T98769 = -84						; size = 4
$T98770 = -80						; size = 12
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::push_back, COMDAT
; _this$ = ecx

; 786  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 787  : 		if (size() < capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::capacity
	cmp	esi, eax
	jae	SHORT $LN2@push_back

; 788  : 
; 789  :  #if _HAS_ITERATOR_DEBUGGING
; 790  : 			{ // room at end, construct it there
; 791  : 			_Orphan_range(_Mylast, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range

; 792  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 793  : 			}
; 794  : 
; 795  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 796  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 797  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 798  : 
; 799  : 		else

	jmp	SHORT $LN3@push_back
$LN2@push_back:

; 800  : 			insert(end(), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T98769[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::end
	mov	DWORD PTR tv134[ebp], eax
	lea	edx, DWORD PTR $T98770[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::insert
	mov	DWORD PTR tv135[ebp], eax
	lea	ecx, DWORD PTR $T98770[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN3@push_back:

; 801  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::push_back
_TEXT	ENDS
PUBLIC	??1?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::~_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??1_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::~_Iterator_base
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ PROC ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::~_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::~_Iterator_base
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ ENDP ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::~_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
_TEXT	ENDS
PUBLIC	?_Orphan_me@_Iterator_base@std@@QAEXXZ		; std::_Iterator_base::_Orphan_me
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::~_Iterator_base, COMDAT
; _this$ = ecx

; 148  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 150  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 151  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$??1_Iterator_base@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::~_Iterator_base
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '8', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e'
	DB	00H, '\', 00H, 'x', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'l', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Orphan_me@_Iterator_base@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$8754 = -8					; size = 4
_this$ = -4						; size = 4
?_Orphan_me@_Iterator_base@std@@QAEXXZ PROC		; std::_Iterator_base::_Orphan_me, COMDAT
; _this$ = ecx

; 169  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		if (_Mycont != 0 && _Mycont->_Myfirstiter != _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], -3			; fffffffdH
	je	SHORT $LN5@Orphan_me

; 171  : 			{	// adopted, remove self from list
; 172  : 			_Iterator_base **_Pnext =
; 173  : 				(_Iterator_base **)&_Mycont->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$8754[ebp], ecx
$LN3@Orphan_me:

; 174  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$8754[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Orphan_me
	mov	eax, DWORD PTR __Pnext$8754[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me

; 175  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$8754[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$8754[ebp], ecx
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:

; 176  : 
; 177  : 			if (*_Pnext == 0)

	mov	eax, DWORD PTR __Pnext$8754[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@Orphan_me

; 178  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	push	178					; 000000b2H
	push	OFFSET ??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN1@Orphan_me:

; 179  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$8754[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 180  : 			_Mycont = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Orphan_me:

; 181  : 			}
; 182  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base@std@@QAEXXZ ENDP		; std::_Iterator_base::_Orphan_me
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ
_TEXT	SEGMENT
$T98796 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::end, COMDAT
; _this$ = ecx

; 637  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T98796[ebp], 0

; 638  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	mov	eax, DWORD PTR $T98796[ebp]
	or	eax, 1
	mov	DWORD PTR $T98796[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 639  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::end
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z$1
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z
_TEXT	SEGMENT
tv87 = -92						; size = 4
tv86 = -88						; size = 4
$T98800 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Hdi$ = 8						; size = 1
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT
; _this$ = ecx

; 574  : 		{	// construct empty string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T98800[ebp], esp
	call	??0?$K2StringAllocator@_W@@QAE@XZ	; K2StringAllocator<wchar_t>::K2StringAllocator<wchar_t>
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@_WV?$K2StringAllocator@_W@@@std@@IAE@V?$K2StringAllocator@_W@@@Z ; std::_String_val<wchar_t,K2StringAllocator<wchar_t> >::_String_val<wchar_t,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv87[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 575  : 		if (!_Hdi._Value)

	movzx	eax, BYTE PTR __Hdi$[ebp]
	test	eax, eax
	jne	SHORT $LN1@basic_stri

; 576  : 			{
; 577  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -3			; fffffffdH
$LN1@basic_stri:

; 578  : 			}
; 579  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Tidy

; 580  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@_WV?$K2StringAllocator@_W@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 914  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 915  : 		return (assign(_Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 916  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1621 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1622 : 		return (_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr

; 1623 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::c_str
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 1
??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it, COMDAT
; _this$ = ecx

; 554  : 		explicit _Has_debug_it(bool _Val): _Value(_Val) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR __Val$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ ; std::_String_val<char,K2StringAllocator<char> >::~_String_val<char,K2StringAllocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy
PUBLIC	??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >
PUBLIC	??0?$K2StringAllocator@D@@QAE@XZ		; K2StringAllocator<char>::K2StringAllocator<char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z
_TEXT	SEGMENT
tv87 = -92						; size = 4
tv86 = -88						; size = 4
$T98817 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >, COMDAT
; _this$ = ecx

; 650  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T98817[ebp], esp
	call	??0?$K2StringAllocator@D@@QAE@XZ	; K2StringAllocator<char>::K2StringAllocator<char>
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >
	mov	DWORD PTR tv87[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 651  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy

; 652  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign

; 653  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >, COMDAT
; _this$ = ecx

; 904  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 905  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy

; 906  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::~basic_string<char,std::char_traits<char>,K2StringAllocator<char> >
PUBLIC	??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
EXTRN	__imp_??1_Container_base@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ PROC ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_Container_base@std@@QAE@XZ
__ehhandler$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::~_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??1?$K2StringAllocator@D@@QAE@XZ		; K2StringAllocator<char>::~K2StringAllocator<char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ PROC ; std::_String_val<char,K2StringAllocator<char> >::~_String_val<char,K2StringAllocator<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$K2StringAllocator@D@@QAE@XZ	; K2StringAllocator<char>::~K2StringAllocator<char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@DV?$K2StringAllocator@D@@@std@@QAE@XZ ENDP ; std::_String_val<char,K2StringAllocator<char> >::~_String_val<char,K2StringAllocator<char> >
PUBLIC	?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE_NI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Buy
PUBLIC	??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$1
__ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -92						; size = 4
tv83 = -88						; size = 4
$T98857 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 457  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T98857[ebp], esp
	call	??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	mov	DWORD PTR tv84[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 458  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE_NI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Buy

; 459  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::capacity, COMDAT
; _this$ = ecx

; 621  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+8]
	sar	eax, 5
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 623  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::capacity
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+
PUBLIC	?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Insert_n
PUBLIC	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??G?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@1@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-
PUBLIC	?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::begin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$3
__ehfuncinfo$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
_TEXT	SEGMENT
tv141 = -128						; size = 4
tv155 = -124						; size = 4
tv149 = -124						; size = 4
tv157 = -120						; size = 4
tv147 = -120						; size = 4
tv76 = -120						; size = 4
$T98872 = -116						; size = 12
$T98875 = -104						; size = 4
$T98876 = -100						; size = 12
$T98878 = -88						; size = 4
__Off$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__Val$ = 24						; size = 4
?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::insert, COMDAT
; _this$ = ecx

; 852  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T98878[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 853  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	test	eax, eax
	jne	SHORT $LN3@insert
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@insert
$LN3@insert:
	lea	eax, DWORD PTR $T98872[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::begin
	mov	DWORD PTR tv155[ebp], eax
	mov	ecx, DWORD PTR tv155[ebp]
	mov	DWORD PTR tv141[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T98878[ebp]
	or	edx, 1
	mov	DWORD PTR $T98878[ebp], edx
	mov	eax, DWORD PTR tv141[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??G?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@1@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-
	mov	DWORD PTR tv76[ebp], eax
$LN4@insert:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR __Off$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T98878[ebp]
	and	edx, 1
	je	SHORT $LN8@insert
	and	DWORD PTR $T98878[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T98872[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN8@insert:

; 854  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T98875[ebp], esp
	lea	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv147[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Insert_n

; 855  : 		return (begin() + _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T98876[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::begin
	mov	DWORD PTR tv157[ebp], eax
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv149[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv149[ebp]
	call	??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+
	mov	ecx, DWORD PTR $T98878[ebp]
	or	ecx, 2
	mov	DWORD PTR $T98878[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T98876[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 856  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$1:
	mov	eax, DWORD PTR $T98878[ebp]
	and	eax, 1
	je	$LN7@insert
	and	DWORD PTR $T98878[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T98872[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN7@insert:
	ret	0
__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$3:
	lea	ecx, DWORD PTR $T98876[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__unwindfunclet$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$4:
	mov	eax, DWORD PTR $T98878[ebp]
	and	eax, 2
	je	$LN12@insert
	and	DWORD PTR $T98878[ebp], -3		; fffffffdH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN12@insert:
	ret	0
__ehhandler$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?insert@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@V32@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::insert
; Function compile flags: /Odtp /ZI
;	COMDAT ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ
_TEXT	SEGMENT
$T98895 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::begin, COMDAT
; _this$ = ecx

; 627  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T98895[ebp], 0

; 628  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	mov	eax, DWORD PTR $T98895[ebp]
	or	eax, 1
	mov	DWORD PTR $T98895[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 629  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::begin
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z$0
__ehfuncinfo$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
$T98901 = -96						; size = 4
__Tmp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+, COMDAT
; _this$ = ecx

; 367  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T98901[ebp], 0

; 368  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 369  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T98901[ebp]
	or	ecx, 1
	mov	DWORD PTR $T98901[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 370  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__unwindfunclet$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z$1:
	mov	eax, DWORD PTR $T98901[ebp]
	and	eax, 1
	je	$LN5@operator@2
	and	DWORD PTR $T98901[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN5@operator@2:
	ret	0
__ehhandler$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??H?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@ABU01@@Z ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??0_Iterator_base@std@@QAE@ABV01@@Z		; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@ABU01@@Z PROC ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@ABV01@@Z	; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@ABU01@@Z ENDP ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
_TEXT	ENDS
PUBLIC	??4_Iterator_base@std@@QAEAAV01@ABV01@@Z	; std::_Iterator_base::operator=
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??0_Iterator_base@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base@std@@QAE@ABV01@@Z PROC		; std::_Iterator_base::_Iterator_base, COMDAT
; _this$ = ecx

; 132  : 		{	// copy an iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 133  : 		*this = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base@std@@QAEAAV01@ABV01@@Z ; std::_Iterator_base::operator=

; 134  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base@std@@QAE@ABV01@@Z ENDP		; std::_Iterator_base::_Iterator_base
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z$0
__ehfuncinfo$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Lock$8739 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base@std@@QAEAAV01@ABV01@@Z PROC		; std::_Iterator_base::operator=, COMDAT
; _this$ = ecx

; 137  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 		if (_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@operator@3

; 139  : 			{	// change parentage
; 140  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$8739[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 141  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 142  : 			_Adopt(_Right._Mycont);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt

; 143  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$8739[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN1@operator@3:

; 144  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 145  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z$0:
	lea	ecx, DWORD PTR __Lock$8739[ebp]
	jmp	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base@std@@QAEAAV01@ABV01@@Z ENDP		; std::_Iterator_base::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z$0
__ehfuncinfo$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
_TEXT	SEGMENT
__Lock$8746 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z PROC ; std::_Iterator_base::_Adopt, COMDAT
; _this$ = ecx

; 154  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		if (_Mycont != _Parent)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Parent$[ebp]
	je	SHORT $LN3@Adopt

; 156  : 			{	// change parentage
; 157  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$8746[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 158  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 159  : 			if (_Parent != 0 && _Parent->_Myfirstiter != _IGNORE_MYITERLIST)

	cmp	DWORD PTR __Parent$[ebp], 0
	je	SHORT $LN1@Adopt
	mov	eax, DWORD PTR __Parent$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	je	SHORT $LN1@Adopt

; 160  : 				{	// switch to new parent
; 161  : 				_Mynextiter = _Parent->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 162  : 				((_Container_base *)_Parent)->_Myfirstiter = this;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@Adopt:

; 163  : 				}
; 164  : 			_Mycont = _Parent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent$[ebp]
	mov	DWORD PTR [eax], ecx

; 165  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$8746[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN3@Adopt:

; 166  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$8746[ebp]
	jmp	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ENDP ; std::_Iterator_base::_Adopt
PUBLIC	?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocate
PUBLIC	?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Xlen
PUBLIC	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE_NI@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Buy, COMDAT
; _this$ = ecx

; 1066 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1067 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1068 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1069 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1070 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1071 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Xlen

; 1072 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1073 : 			{	// nonempty array, allocate storage
; 1074 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1075 : 			_Mylast = _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1076 : 			_Myend = _Myfirst + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
$LN3@Buy:

; 1077 : 			}
; 1078 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1079 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE_NI@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Buy
_TEXT	ENDS
PUBLIC	?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate
PUBLIC	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy
EXTRN	__imp_?_Orphan_all@_Container_base@std@@QBEXXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1087 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1088 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Tidy@2

; 1089 : 			{	// something to free, destroy and deallocate it
; 1090 : 
; 1091 :  #if _HAS_ITERATOR_DEBUGGING
; 1092 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base@std@@QBEXXZ

; 1093 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1094 : 
; 1095 : 			_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy

; 1096 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 5
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate
$LN1@Tidy@2:

; 1097 : 			}
; 1098 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1099 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1082 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1083 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 12					; 0000000cH

; 1084 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IABV12@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; stdext::unchecked_uninitialized_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill, COMDAT
; _this$ = ecx

; 1207 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1208 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IABV12@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; stdext::unchecked_uninitialized_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 16					; 00000010H

; 1209 : 		return (_Ptr + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Ptr$[ebp]

; 1210 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z
_TEXT	SEGMENT
__Pnext$ = -12						; size = 4
__Lock$ = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1229 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1230 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 1231 : 		const_iterator **_Pnext = (const_iterator **)&this->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Pnext$[ebp], eax
$LN5@Orphan_ran:

; 1232 : 		while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1233 : 			if ((*_Pnext)->_Myptr < _First || _Last < (*_Pnext)->_Myptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:

; 1234 : 				_Pnext = (const_iterator **)&(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1235 : 			else

	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:

; 1236 : 				{	// orphan the iterator
; 1237 : 				(*_Pnext)->_Mycont = 0;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0

; 1238 : 				*_Pnext = (const_iterator *)(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN1@Orphan_ran:

; 1239 : 				}

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1240 : 		}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
_TEXT	ENDS
;	COMDAT ??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ PROC ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 128  : 	~K2VectorAllocator() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ENDP ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
_TEXT	ENDS
PUBLIC	??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@		; `string'
;	COMDAT ??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@
CONST	SEGMENT
??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@ DB 'ctx_STL_vector', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z PROC ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate, COMDAT
; _this$ = ecx

; 138  : 	void	deallocate(pointer _Ptr, size_type)		{ MemManager.Deallocate(_Ptr, "ctx_STL_vector"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	162					; 000000a2H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	3
	push	OFFSET ??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?Deallocate@CMemManager@@SAXPAXPBDW4MemoryType@@1F@Z
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ENDP ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1032 : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1033 : 		return (assign(_Right, 0, npos));

	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign

; 1034 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
EXTRN	__imp_?length@?$char_traits@D@std@@SAIPBD@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign, COMDAT
; _this$ = ecx

; 1069 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1070 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?length@?$char_traits@D@std@@SAIPBD@Z
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign

; 1071 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
PUBLIC	?deallocate@?$K2StringAllocator@D@@QAEXPADI@Z	; K2StringAllocator<char>::deallocate
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Ptr$83466 = -8					; size = 4
_this$ = -4						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2066 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2067 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy@3
	jmp	SHORT $LN3@Tidy@3
$LN4@Tidy@3:

; 2068 : 			;
; 2069 : 		else if (_BUF_SIZE <= _Myres)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 16			; 00000010H
	jb	SHORT $LN3@Tidy@3

; 2070 : 			{	// copy any leftovers to small buffer and deallocate
; 2071 : 			_Elem *_Ptr = _Bx._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Ptr$83466[ebp], ecx

; 2072 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy@3

; 2073 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$83466[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 16					; 00000010H
$LN1@Tidy@3:

; 2074 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$83466[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2StringAllocator@D@@QAEXPADI@Z ; K2StringAllocator<char>::deallocate
$LN3@Tidy@3:

; 2075 : 			}
; 2076 : 		_Myres = _BUF_SIZE - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 15			; 0000000fH

; 2077 : 		_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos

; 2078 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$K2StringAllocator@D@@QAE@ABV0@@Z		; K2StringAllocator<char>::K2StringAllocator<char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z$1
__ehfuncinfo$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z PROC ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >, COMDAT
; _this$ = ecx

; 471  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_String_base@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$K2StringAllocator@D@@QAE@ABV0@@Z	; K2StringAllocator<char>::K2StringAllocator<char>

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Al$[ebp]
	call	??1?$K2StringAllocator@D@@QAE@XZ	; K2StringAllocator<char>::~K2StringAllocator<char>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z$0:
	lea	ecx, DWORD PTR __Al$[ebp]
	jmp	??1?$K2StringAllocator@D@@QAE@XZ	; K2StringAllocator<char>::~K2StringAllocator<char>
__unwindfunclet$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_String_base@std@@QAE@XZ
__ehhandler$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@DV?$K2StringAllocator@D@@@std@@IAE@V?$K2StringAllocator@D@@@Z ENDP ; std::_String_val<char,K2StringAllocator<char> >::_String_val<char,K2StringAllocator<char> >
EXTRN	__imp_??0?$allocator@D@std@@QAE@XZ:PROC
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2StringAllocator@D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$K2StringAllocator@D@@QAE@XZ PROC			; K2StringAllocator<char>::K2StringAllocator<char>, COMDAT
; _this$ = ecx

; 78   : 	K2StringAllocator()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$allocator@D@std@@QAE@XZ

; 79   : 	{
; 80   : 		// ensure that the memory manager is initialized.
; 81   : 		CMemManager::GetInstance();

	call	?GetInstance@CMemManager@@SAPAV1@XZ	; CMemManager::GetInstance

; 82   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$K2StringAllocator@D@@QAE@XZ ENDP			; K2StringAllocator<char>::K2StringAllocator<char>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$K2StringAllocator@D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$K2StringAllocator@D@@QAE@XZ PROC			; K2StringAllocator<char>::~K2StringAllocator<char>, COMDAT
; _this$ = ecx

; 88   : 	~K2StringAllocator() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$K2StringAllocator@D@@QAE@XZ ENDP			; K2StringAllocator<char>::~K2StringAllocator<char>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 308  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >

; 309  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=
; Function compile flags: /Odtp /ZI
;	COMDAT ??Y?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=, COMDAT
; _this$ = ecx

; 361  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=

; 363  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 364  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size, COMDAT
; _this$ = ecx

; 707  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 708  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::max_size

; 709  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00@Z ; stdext::_Unchecked_move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ; std::fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
PUBLIC	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
CONST	SEGMENT
??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 's', 00H, 'e', 00H, 'r', 00H, 't', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$2
__catchsym$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$6
	DD	04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$7
__unwindtable$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$5
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
_TEXT	SEGMENT
tv266 = -140						; size = 4
tv129 = -140						; size = 4
tv74 = -140						; size = 4
__Oldend$84888 = -72					; size = 4
__Ptr$84868 = -68					; size = 4
__Newvec$84867 = -64					; size = 4
__Capacity$ = -60					; size = 4
__Tmp$ = -56						; size = 32
_this$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 12
__Count$ = 20						; size = 4
__Val$ = 24						; size = 4
?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Insert_n, COMDAT
; _this$ = ecx

; 1117 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1118 : 
; 1119 :  #if _HAS_ITERATOR_DEBUGGING
; 1120 : 		if (_Where._Mycont != this
; 1121 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)

	mov	eax, DWORD PTR __Where$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN13@Insert_n
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN13@Insert_n
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Where$[ebp+8]
	jae	SHORT $LN14@Insert_n
$LN13@Insert_n:

; 1122 : 			_DEBUG_ERROR("vector insert iterator outside range");

	push	1122					; 00000462H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN14@Insert_n:

; 1123 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1124 : 
; 1125 : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1126 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1127 : 
; 1128 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN12@Insert_n
	jmp	$LN11@Insert_n
$LN12@Insert_n:

; 1129 : 			;
; 1130 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size
	sub	eax, esi
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN10@Insert_n

; 1131 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Xlen
	jmp	$LN11@Insert_n
$LN10@Insert_n:

; 1132 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN8@Insert_n

; 1133 : 			{	// not enough room, reallocate
; 1134 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1135 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	esi, DWORD PTR __Capacity$[ebp]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::max_size
	sub	eax, esi
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv129[ebp], eax
$LN18@Insert_n:
	mov	ecx, DWORD PTR tv129[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1136 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN7@Insert_n

; 1137 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN7@Insert_n:

; 1138 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocate
	mov	DWORD PTR __Newvec$84867[ebp], eax

; 1139 : 			pointer _Ptr = _Newvec;

	mov	eax, DWORD PTR __Newvec$84867[ebp]
	mov	DWORD PTR __Ptr$84868[ebp], eax

; 1140 : 
; 1141 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 1142 : 			_Ptr = _Umove(_Myfirst, _VEC_ITER_BASE(_Where),
; 1143 : 				_Newvec);	// copy prefix

	mov	eax, DWORD PTR __Newvec$84867[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR __Ptr$84868[ebp], ecx

; 1144 : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$84868[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill
	mov	DWORD PTR tv266[ebp], eax
	mov	eax, DWORD PTR tv266[ebp]
	mov	DWORD PTR __Ptr$84868[ebp], eax

; 1145 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

	mov	eax, DWORD PTR __Ptr$84868[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	jmp	SHORT $LN19@Insert_n
__catch$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$0:

; 1146 : 			_CATCH_ALL
; 1147 : 			_Destroy(_Newvec, _Ptr);

	mov	eax, DWORD PTR __Ptr$84868[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$84867[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy

; 1148 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$84867[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate

; 1149 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1150 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$1
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$1:

; 1151 : 
; 1152 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1153 : 			if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@Insert_n

; 1154 : 				{	// destroy and deallocate old array
; 1155 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy

; 1156 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 5
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::deallocate
$LN5@Insert_n:

; 1157 : 				}
; 1158 : 
; 1159 :  #if _HAS_ITERATOR_DEBUGGING
; 1160 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base@std@@QBEXXZ

; 1161 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1162 : 
; 1163 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Newvec$84867[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 1164 : 			_Mylast = _Newvec + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Newvec$84867[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1165 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$84867[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	$LN11@Insert_n
$LN8@Insert_n:

; 1166 : 			}
; 1167 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR __Where$[ebp+8]
	sar	ecx, 5
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1168 : 			{	// new stuff spills off end
; 1169 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1170 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>

; 1171 : 
; 1172 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 1173 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1174 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR __Where$[ebp+8]
	sar	edx, 5
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@PAV32@IABV32@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Ufill
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$2:

; 1175 : 			_CATCH_ALL
; 1176 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	push	eax
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Destroy

; 1177 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1178 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$3:

; 1179 : 
; 1180 : 			_Mylast += _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 1181 : 
; 1182 :  #if _HAS_ITERATOR_DEBUGGING
; 1183 : 			_Orphan_range(_Where._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range

; 1184 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1185 : 
; 1186 : 			fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1187 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	call	??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ; std::fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH

; 1188 : 			}
; 1189 : 		else

	jmp	SHORT $LN11@Insert_n
$LN3@Insert_n:

; 1190 : 			{	// new stuff can all be assigned
; 1191 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Oldend$84888[ebp], ecx

; 1192 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1193 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Oldend$84888[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR __Oldend$84888[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 1194 : 
; 1195 :  #if _HAS_ITERATOR_DEBUGGING
; 1196 : 			_Orphan_range(_Where._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Orphan_range

; 1197 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1198 : 
; 1199 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1200 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$84888[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR __Oldend$84888[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	call	??$_Unchecked_move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00@Z ; stdext::_Unchecked_move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 12					; 0000000cH

; 1201 : 			fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1202 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	call	??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ; std::fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH
$LN11@Insert_n:

; 1203 : 			}
; 1204 : 		}

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
$LN16@Insert_n:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$4:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@XZ
__unwindfunclet$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z$5:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEXV?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@2@IABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Insert_n
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ
_TEXT	SEGMENT
$T99009 = -152						; size = 44
$T99010 = -108						; size = 32
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Xlen, COMDAT

; 1213 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1214 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T99010[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T99010[ebp]
	push	eax
	lea	ecx, DWORD PTR $T99009[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T99009[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T99010[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1215 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T99010[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-156]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@KAXXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Xlen
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
; File c:\program files\microsoft visual studio 8\vc\include\stdexcept
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 107  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 27   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 28   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 37   : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
; Function compile flags: /Odtp /ZI
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 31   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@

; 32   : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 110  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 111  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@ABV0@@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
EXTRN	__imp_??0_Container_base@std@@QAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z$1
__ehfuncinfo$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z PROC ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 412  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@ABV0@@Z ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >

; 413  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Al$[ebp]
	call	??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z$0:
	lea	ecx, DWORD PTR __Al$[ebp]
	jmp	??1?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
__unwindfunclet$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1_Container_base@std@@QAE@XZ
__ehhandler$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAE@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ENDP ; std::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ PROC ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 118  : 	K2VectorAllocator()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >

; 119  : 	{
; 120  : 		// ensure that the memory manager is initialized.
; 121  : 		CMemManager::GetInstance();

	call	?GetInstance@CMemManager@@SAPAV1@XZ	; CMemManager::GetInstance

; 122  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@XZ ENDP ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z PROC ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocate, COMDAT
; _this$ = ecx

; 136  : 	pointer	allocate(size_type _Count)				{ return (pointer)MemManager.Allocate(_Count * sizeof(T), "ctx_STL_vector"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	160					; 000000a0H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	2
	push	OFFSET ??_C@_0P@HAHLNPOB@ctx_STL_vector?$AA@
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	push	eax
	call	?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ; CMemManager::Allocate
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@I@Z ENDP ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocate
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Grow
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Inside
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign, COMDAT
; _this$ = ecx

; 1056 : 		{	// assign [_Ptr, _Ptr + _Num)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1057 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign@3

; 1058 : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
	jmp	SHORT $LN3@assign@3
$LN2@assign@3:

; 1059 : 
; 1060 : 		if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign@3

; 1061 : 			{	// make room and assign new stuff
; 1062 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	push	eax
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 16					; 00000010H

; 1063 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
$LN1@assign@3:

; 1064 : 			}
; 1065 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign@3:

; 1066 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::erase
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@2IB ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::npos
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::size
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::npos
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign, COMDAT
; _this$ = ecx

; 1038 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1039 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign@4

; 1040 : 			_String_base::_Xran();	// _Roff off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN5@assign@4:

; 1041 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1042 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign@4

; 1043 : 			_Num = _Count;	// trim _Num to size

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
$LN4@assign@4:

; 1044 : 
; 1045 : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign@4

; 1046 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@2IB ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::npos
	push	eax
	mov	ecx, DWORD PTR __Roff$[ebp]
	add	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::erase
	mov	edx, DWORD PTR __Roff$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::erase
	jmp	SHORT $LN2@assign@4
$LN3@assign@4:

; 1047 : 		else if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign@4

; 1048 : 			{	// make room and assign new stuff
; 1049 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	push	eax
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 16					; 00000010H

; 1050 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
$LN2@assign@4:

; 1051 : 			}
; 1052 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1053 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::assign
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IBEPBDXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2092 : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2093 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 16			; 00000010H
	jb	SHORT $LN3@Myptr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Myptr@3
$LN3@Myptr@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv70[ebp], eax
$LN4@Myptr@3:
	mov	eax, DWORD PTR tv70[ebp]

; 2094 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$85182 = -8					; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::erase, COMDAT
; _this$ = ecx

; 1240 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1241 : 		if (_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN3@erase@2

; 1242 : 			_String_base::_Xran();	// _Off off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN3@erase@2:

; 1243 : 		if (_Mysize - _Off < _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN2@erase@2

; 1244 : 			_Count = _Mysize - _Off;	// trim _Count

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN2@erase@2:

; 1245 : 		if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@erase@2

; 1246 : 			{	// move elements down
; 1247 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1248 : 				_Mysize - _Off - _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Off$[ebp]
	sub	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	sub	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	push	eax
	call	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
	add	esp, 16					; 00000010H

; 1249 : 			size_type _Newsize = _Mysize - _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$85182[ebp], ecx

; 1250 : 			_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$85182[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
$LN1@erase@2:

; 1251 : 			}
; 1252 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1253 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::erase
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::size, COMDAT
; _this$ = ecx

; 1636 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1637 : 		return (_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 1638 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::size
_TEXT	ENDS
EXTRN	__imp_?assign@?$char_traits@D@std@@SAXAADABD@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T99080 = -69						; size = 1
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2030 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2031 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T99080[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+24], ecx
	lea	edx, DWORD PTR $T99080[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	DWORD PTR __imp_?assign@?$char_traits@D@std@@SAXAADABD@Z
	add	esp, 8

; 2032 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Copy
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2036 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2037 : 			if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow@2

; 2038 : 			_String_base::_Xlen();	// result too long

	call	DWORD PTR __imp_?_Xlen@_String_base@std@@SAXXZ
$LN6@Grow@2:

; 2039 : 		if (_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow@2

; 2040 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Copy
	jmp	SHORT $LN4@Grow@2
$LN5@Grow@2:

; 2041 : 		else if (_Trim && _Newsize < _BUF_SIZE)

	movzx	eax, BYTE PTR __Trim$[ebp]
	test	eax, eax
	je	SHORT $LN3@Grow@2
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow@2

; 2042 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2043 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN9@Grow@2
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv80[ebp], edx
	jmp	SHORT $LN10@Grow@2
$LN9@Grow@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv80[ebp], ecx
$LN10@Grow@2:
	mov	edx, DWORD PTR tv80[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow@2
$LN3@Grow@2:

; 2044 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow@2

; 2045 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
$LN4@Grow@2:

; 2046 : 		return (0 < _Newsize);	// return true only if more work to do

	xor	eax, eax
	cmp	eax, DWORD PTR __Newsize$[ebp]
	sbb	eax, eax
	neg	eax

; 2047 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Grow
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2087 : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2088 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 16			; 00000010H
	jb	SHORT $LN3@Myptr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Myptr@4
$LN3@Myptr@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv70[ebp], eax
$LN4@Myptr@4:
	mov	eax, DWORD PTR tv70[ebp]

; 2089 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
_TEXT	ENDS
EXTRN	__imp_??0?$allocator@D@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2StringAllocator@D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_al$ = 8						; size = 4
??0?$K2StringAllocator@D@@QAE@ABV0@@Z PROC		; K2StringAllocator<char>::K2StringAllocator<char>, COMDAT
; _this$ = ecx

; 86   : 	K2StringAllocator(const K2StringAllocator &al) : std::allocator<T>(al) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$allocator@D@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$K2StringAllocator@D@@QAE@ABV0@@Z ENDP		; K2StringAllocator<char>::K2StringAllocator<char>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$K2StringAllocator@D@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$K2StringAllocator@D@@QAEXPADI@Z PROC	; K2StringAllocator<char>::deallocate, COMDAT
; _this$ = ecx

; 98   : 	void	deallocate(pointer _Ptr, size_type)		{ MemManager.Deallocate(_Ptr, "ctx_STL_string"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	162					; 000000a2H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	3
	push	OFFSET ??_C@_0P@CDENJMCL@ctx_STL_string?$AA@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?Deallocate@CMemManager@@SAXPAXPBDW4MemoryType@@1F@Z
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$K2StringAllocator@D@@QAEXPADI@Z ENDP	; K2StringAllocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@1@@Z PROC ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-, COMDAT
; _this$ = ecx

; 384  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 385  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??G?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-

; 386  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@1@@Z ENDP ; std::_Vector_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-
_TEXT	ENDS
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CDA@HBPOCOLJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@ ; `string'
PUBLIC	??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CDA@HBPOCOLJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1CDA@HBPOCOLJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b'
	DB	00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, '>'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'A', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
CONST	SEGMENT
??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, '(', 00H, '(', 00H, '_', 00H, 'M'
	DB	00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H
	DB	')', 00H, '_', 00H, 'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H
	DB	'M', 00H, 'y', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H
	DB	't', 00H, 'r', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '(', 00H, '(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'v'
	DB	00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H, ')', 00H, '_', 00H
	DB	'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 't', 00H, ')', 00H, '"', 00H, ','
	DB	00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 69   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 70   : 		{	// construct with pointer _Ptr
; 71   : 		_SCL_SECURE_VALIDATE(_Pvector == NULL || (((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast));

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN2@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	xor	eax, eax
	jne	SHORT $LN5@Vector_con
	push	OFFSET ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@Vector_con
	int	3
$LN5@Vector_con:
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1CDA@HBPOCOLJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@Vector_con:

; 72   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt

; 73   : 		_Myptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 74   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PBV_Container_base@1@@Z ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??_C@_1OO@PBNBABMO@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@ ; `string'
PUBLIC	??_C@_1CBK@IPONBOBN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1DK@LIMPPGHH@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAM?$AAy?$AAc?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1OO@PBNBABMO@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@
CONST	SEGMENT
??_C@_1OO@PBNBABMO@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, ' ', 00H, '+', 00H, ' ', 00H, '_', 00H, 'O', 00H, 'f'
	DB	00H, 'f', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '(', 00H
	DB	'(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, ' ', 00H, '*', 00H, ')', 00H, '(', 00H, 't', 00H, 'h', 00H
	DB	'i', 00H, 's', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y'
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, ')', 00H, ')', 00H
	DB	'-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 't', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'_', 00H, 'M', 00H, 'y', 00H, 'p', 00H, 't', 00H, 'r', 00H, ' '
	DB	00H, '+', 00H, ' ', 00H, '_', 00H, 'O', 00H, 'f', 00H, 'f', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '(', 00H, '(', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c', 00H, ' ', 00H
	DB	'*', 00H, ')', 00H, '(', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's'
	DB	00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, '_', 00H, 'M', 00H, 'y', 00H, 'f', 00H, 'i', 00H, 'r', 00H
	DB	's', 00H, 't', 00H, '"', 00H, ',', 00H, ' ', 00H, '0', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CBK@IPONBOBN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1CBK@IPONBOBN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b'
	DB	00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, '>'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'A', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H
	DB	'=', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@LIMPPGHH@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAM?$AAy?$AAc?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@LIMPPGHH@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAM?$AAy?$AAc?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, '"', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, '"', 00H, ',', 00H, ' ', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=, COMDAT
; _this$ = ecx

; 146  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		_SCL_SECURE_VALIDATE(this->_Mycont != NULL);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator@4
	xor	eax, eax
	jne	SHORT $LN6@operator@4
	push	OFFSET ??_C@_1DK@LIMPPGHH@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAM?$AAy?$AAc?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	147					; 00000093H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN6@operator@4
	int	3
$LN6@operator@4:
	push	0
	push	147					; 00000093H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1CBK@IPONBOBN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN3@operator@4:

; 148  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+12]
	ja	SHORT $LN1@operator@4
	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+8]
	jae	SHORT $LN2@operator@4
$LN1@operator@4:
	xor	eax, eax
	jne	SHORT $LN7@operator@4
	push	OFFSET ??_C@_1OO@PBNBABMO@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@
	push	0
	push	150					; 00000096H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN7@operator@4
	int	3
$LN7@operator@4:

; 149  : 			_Myptr + _Off <= ((_Myvec *)(this->_Mycont))->_Mylast &&
; 150  : 			_Myptr + _Off >= ((_Myvec *)(this->_Mycont))->_Myfirst);

	push	0
	push	150					; 00000096H
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1CBK@IPONBOBN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator@4:

; 151  : 		_Myptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 152  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 153  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator+=
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??0_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ PROC ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HPBV12@ABV12@@std@@QAE@XZ ENDP ; std::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>::_Ranit<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > const &>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::_Iterator_base, COMDAT
; _this$ = ecx

; 127  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 128  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::_Iterator_base
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
;	COMDAT ??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_al$ = 8						; size = 4
??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@ABV0@@Z PROC ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 126  : 	K2VectorAllocator(const K2VectorAllocator &al) : std::allocator<T>(al) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@QAE@ABV0@@Z ENDP ; K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 120  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct default allocator (do nothing)
; 122  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -76						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::max_size, COMDAT
; _this$ = ecx

; 165  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 134217727	; 07ffffffH

; 167  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 168  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::max_size
_TEXT	ENDS
EXTRN	__imp_?max_size@?$allocator@D@std@@QBEIXZ:PROC
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -76						; size = 4
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1641 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1642 : 		size_type _Num = _Mybase::_Alval.max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_?max_size@?$allocator@D@std@@QBEIXZ
	mov	DWORD PTR __Num$[ebp], eax

; 1643 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size@3
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@max_size@3
$LN3@max_size@3:
	mov	eax, DWORD PTR __Num$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv70[ebp], eax
$LN4@max_size@3:
	mov	eax, DWORD PTR tv70[ebp]

; 1644 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$K2StringAllocator@D@@QAEPADI@Z	; K2StringAllocator<char>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$5
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z
_TEXT	SEGMENT
tv149 = -96						; size = 4
tv148 = -96						; size = 4
__Ptr$ = -28						; size = 4
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2000 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2001 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2002 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN6@Copy@2

; 2003 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2004 : 		else if (_Newres / 3 < _Myres / 2

	jmp	SHORT $LN5@Copy@2
$LN6@Copy@2:

; 2005 : 			&& _Myres <= max_size() - _Myres / 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 1
	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	esi, 3
	div	esi
	cmp	eax, ecx
	jae	SHORT $LN5@Copy@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+28]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+28], eax
	ja	SHORT $LN5@Copy@2

; 2006 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR __Newres$[ebp], ecx
$LN5@Copy@2:

; 2007 : 		_Elem *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 2008 : 
; 2009 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2010 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2StringAllocator@D@@QAEPADI@Z ; K2StringAllocator<char>::allocate
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN9@Copy@2
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$0:

; 2011 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2012 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2013 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2014 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$K2StringAllocator@D@@QAEPADI@Z ; K2StringAllocator<char>::allocate
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN11@Copy@2
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$1:

; 2015 : 			_CATCH_ALL
; 2016 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy

; 2017 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2018 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$2
	ret	0
$LN11@Copy@2:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$2:

; 2019 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$3
	ret	0
$LN9@Copy@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z$3:

; 2020 : 
; 2021 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy@2

; 2022 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 16					; 00000010H
$LN1@Copy@2:

; 2023 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Tidy

; 2024 : 		_Bx._Ptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2025 : 		_Myres = _Newres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 2026 : 		_Eos(_Oldlen);

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Eos
$LN8@Copy@2:

; 2027 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Copy
PUBLIC	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z		; std::_Debug_pointer<char>
; Function compile flags: /Odtp /ZI
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2050 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2051 : 		_DEBUG_POINTER(_Ptr);

	push	2051					; 00000803H
	push	OFFSET ??_C@_1HM@LNGKEPMM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH

; 2052 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside@2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside@2
$LN2@Inside@2:

; 2053 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside@2

; 2054 : 		else

	jmp	SHORT $LN4@Inside@2
$LN3@Inside@2:

; 2055 : 			return (true);

	mov	al, 1
$LN4@Inside@2:

; 2056 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$K2StringAllocator@D@@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,K2StringAllocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Compat
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-, COMDAT
; _this$ = ecx

; 173  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 
; 175  :  #if _HAS_ITERATOR_DEBUGGING
; 176  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Compat

; 177  :  #else
; 178  : 		_SCL_SECURE_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);
; 179  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 180  : 
; 181  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 5

; 182  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::operator-
_TEXT	ENDS
PUBLIC	??_C@_1CBC@PGCBIKOD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CBC@PGCBIKOD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1CBC@PGCBIKOD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b'
	DB	00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, '>'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'K', 00H, '2', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'A', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'w'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 'K', 00H, '2', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	'w', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm'
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
CONST	SEGMENT
??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ DB '('
	DB	00H, '"', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, ' ', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H
	DB	'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'A', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, '"', 00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Compat, COMDAT
; _this$ = ecx

; 235  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 		if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Compat
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN3@Compat
$LN1@Compat:

; 237  : 			{
; 238  : 			_DEBUG_ERROR("vector iterators incompatible");

	push	238					; 000000eeH
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH

; 239  : 			_SCL_SECURE_INVALID_ARGUMENT;

	xor	eax, eax
	jne	SHORT $LN5@Compat
	push	OFFSET ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@Compat
	int	3
$LN5@Compat:
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1HK@HNILGGDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1CBC@PGCBIKOD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat:

; 240  : 			}
; 241  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Compat
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 124  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 		{	// construct by copying (do nothing)
; 126  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_stl_allocator.h
_TEXT	ENDS
;	COMDAT ?allocate@?$K2StringAllocator@D@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$K2StringAllocator@D@@QAEPADI@Z PROC		; K2StringAllocator<char>::allocate, COMDAT
; _this$ = ecx

; 96   : 	pointer	allocate(size_type _Count)				{ return (pointer)MemManager.Allocate(_Count * sizeof(T), "ctx_STL_string"); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	160					; 000000a0H
	push	OFFSET ??_C@_0CC@PDHCCDLE@c?3?2code?2hon?2src?2k2?2c_memmanager?4@
	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	2
	push	OFFSET ??_C@_0P@CDENJMCL@ctx_STL_string?$AA@
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	?Allocate@CMemManager@@SAPAXIPBDW4MemoryType@@00F@Z ; CMemManager::Allocate
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$K2StringAllocator@D@@QAEPADI@Z ENDP		; K2StringAllocator<char>::allocate
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		; std::_Debug_pointer<char>, COMDAT

; 1370 : 	{	// test iterator for non-singularity, const pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1371 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@2

; 1372 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN2@Debug_poin@2:

; 1373 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ENDP		; std::_Debug_pointer<char>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\string
_TEXT	ENDS
;	COMDAT ??$?9_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z PROC ; std::operator!=<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT

; 104  : 	{	// test for string inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 105  : 	return (!(_Left == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$?8_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 8
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 106  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$?9_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ENDP ; std::operator!=<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
$T99166 = -65						; size = 1
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 581  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 582  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

	call	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
	mov	BYTE PTR $T99166[ebp], al
	mov	al, BYTE PTR $T99166[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First1$[ebp]
	push	ecx
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 20					; 00000014H

; 583  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 568  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 569  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 570  : 		return (_Secure);

	mov	al, BYTE PTR __Secure$[ebp]

; 571  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
EXTRN	__imp_?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 590  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
	add	esp, 16					; 00000010H

; 591  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Odtp /ZI
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
$T99173 = -65						; size = 1
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 608  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 609  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

	call	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
	mov	BYTE PTR $T99173[ebp], al
	mov	al, BYTE PTR $T99173[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First1$[ebp]
	push	ecx
	call	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
	add	esp, 20					; 00000014H

; 610  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
EXTRN	__imp_?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 617  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
	add	esp, 16					; 00000010H

; 618  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
_TEXT	SEGMENT
$T99178 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z PROC ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 225  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 226  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 8
	mov	BYTE PTR $T99178[ebp], al
	mov	dl, BYTE PTR $T99178[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 16					; 00000010H

; 227  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ENDP ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z PROC ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 1329 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1330 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1331 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1332 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ENDP ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 233  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 234  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 235  : 		_Al.destroy(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 236  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??$_Destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
;	COMDAT ?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy, COMDAT
; _this$ = ecx

; 160  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 4

; 162  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IABV12@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
_TEXT	SEGMENT
$T99187 = -66						; size = 1
$T99188 = -65						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IABV12@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 914  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 915  : 		_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 916  : 			_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T99187[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 8
	mov	BYTE PTR $T99188[ebp], al
	mov	al, BYTE PTR $T99187[ebp]
	push	eax
	mov	cl, BYTE PTR $T99188[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 24					; 00000018H

; 917  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IABV12@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 390  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 391  : 
; 392  :  #if _HAS_ITERATOR_DEBUGGING
; 393  : //	if (_Count < 0)
; 394  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 395  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 396  : 
; 397  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 398  : 
; 399  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:

; 400  : 	for (; 0 < _Count; --_Count, ++_First)

	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], ecx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 401  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::construct
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:

; 402  : 	_CATCH_ALL

	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:
	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:

; 403  : 	for (; _Next != _First; ++_Next)

	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_fil:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 404  : 		_Al.destroy(_Next);

	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy
	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 405  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 406  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 407  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@IABV10@AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,unsigned int,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z ; std::_Construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::construct, COMDAT
; _this$ = ecx

; 155  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z ; std::_Construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 8

; 157  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::construct
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z$0
__ehfuncinfo$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z
_TEXT	SEGMENT
tv74 = -92						; size = 4
$T99208 = -88						; size = 4
$T99209 = -84						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z PROC ; std::_Construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 51   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 52   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 53   : 	::new (_Vptr) _T1(_Val);

	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	push	32					; 00000020H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T99209[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T99209[ebp], 0
	je	SHORT $LN3@Construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T99209[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Construct
$LN3@Construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Construct:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T99208[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 54   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T99209[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@@Z ENDP ; std::_Construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 65   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; stdext::_Unchecked_uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT
; _this$ = ecx

; 1109 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1110 : 		{	// move initializing [_First, _Last), using allocator
; 1111 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1112 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ; stdext::_Unchecked_uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 16					; 00000010H

; 1113 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@1@PAV21@00@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Move_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z
_TEXT	SEGMENT
$T99227 = -66						; size = 1
$T99228 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z PROC ; stdext::_Unchecked_uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 843  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 844  : 		return (_STD _Uninit_move(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 845  : 			_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T99227[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Move_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	mov	BYTE PTR $T99228[ebp], al
	mov	dl, BYTE PTR $T99227[ebp]
	push	edx
	mov	al, BYTE PTR $T99228[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	add	esp, 24					; 00000018H

; 846  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z PROC ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 1009 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1010 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1011 : 		return _Checked_base(_It, _Base_tag);

	mov	al, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 8

; 1012 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ENDP ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z PROC ; std::_Move_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 1046 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1047 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1048 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1049 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ENDP ; std::_Move_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 992  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 993  : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 994  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
PUBLIC	??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??_C@_1HK@DFAOKDK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_1HK@DFAOKDK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
; File c:\program files\microsoft visual studio 8\vc\include\memory
CONST	SEGMENT
??_C@_1HK@DFAOKDK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '8', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e'
	DB	00H, '\', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H
	DB	'y', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T99238 = -125						; size = 1
$T99239 = -124						; size = 4
__Val$ = -56						; size = 32
__Next$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >, COMDAT

; 213  : 	{	// use swap to instead of the copy constructor

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 214  : 	_DEBUG_RANGE(_First, _Last);

	push	214					; 000000d6H
	push	OFFSET ??_C@_1HK@DFAOKDK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 16					; 00000010H

; 215  : 	_DEBUG_POINTER(_Dest);

	push	215					; 000000d7H
	push	OFFSET ??_C@_1HK@DFAOKDK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH

; 216  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 217  : 	// empty value used in the construction
; 218  : 	typename _Alloc::value_type _Val;

	push	1
	lea	ecx, DWORD PTR $T99238[ebp]
	call	??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
	mov	al, BYTE PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Val$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 219  : 
; 220  : 	_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1
	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 221  : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov

; 222  : 		{
; 223  : 		_Al.construct(_Dest, _Val);

	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@ABV32@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::construct

; 224  : 		_STD swap(*_Dest, *_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 8

; 225  : 		}

	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:

; 226  : 	_CATCH_ALL

	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$0:
	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 227  : 	for (; _Next != _Dest; ++_Next)

	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov

; 228  : 		_Al.destroy(_Next);

	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::destroy
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 229  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 230  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, __tryend$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
__tryend$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 231  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T99239[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Val$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T99239[ebp]
$LN9@Uninit_mov:

; 232  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	lea	ecx, DWORD PTR __Val$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00AAV?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
PUBLIC	??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z
_TEXT	SEGMENT
$T99256 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z PROC ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 1405 : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1406 : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T99256[ebp]
	push	ecx
	call	??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 20					; 00000014H

; 1407 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z ENDP ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z PROC ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 1377 : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1378 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@3

; 1379 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN2@Debug_poin@3:

; 1380 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z ENDP ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
_TEXT	ENDS
PUBLIC	?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::swap
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z PROC ; std::swap<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT

; 2123 : 	{	// swap _Left and _Right strings

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2124 : 	_Left.swap(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	call	?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::swap

; 2125 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ENDP ; std::swap<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z PROC ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 798  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 799  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 800  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 801  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ENDP ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 1393 : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1394 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang

; 1395 : 		{	// check for non-null pointers, valid range
; 1396 : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH

; 1397 : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH

; 1398 : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang

; 1399 : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:

; 1400 : 		}
; 1401 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z	; std::operator==<wchar_t,wchar_t>
PUBLIC	__$ArrayPad$
EXTRN	__imp_?_Swap_all@_Container_base@std@@QBEXAAV12@@Z:PROC
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z$0
__ehfuncinfo$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Tmp$96548 = -76					; size = 32
__Tres$96546 = -44					; size = 4
__Tlen$96545 = -40					; size = 4
__Tbx$96544 = -36					; size = 16
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::swap, COMDAT
; _this$ = ecx

; 1700 : 		{	// exchange contents with _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1701 : 		if (_Mybase::_Alval == _Right._Alval)

	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN2@swap

; 1702 : 			{	// same allocator, swap control information
; 1703 : 
; 1704 :  #if _HAS_ITERATOR_DEBUGGING
; 1705 : 			this->_Swap_all(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Swap_all@_Container_base@std@@QBEXAAV12@@Z

; 1706 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1707 : 
; 1708 : 			_Bxty _Tbx = _Bx;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tbx$96544[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tbx$96544[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Tbx$96544[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR __Tbx$96544[ebp+12], edx

; 1709 : 			_Bx = _Right._Bx, _Right._Bx = _Tbx;

	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR __Tbx$96544[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tbx$96544[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tbx$96544[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tbx$96544[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 1710 : 
; 1711 : 			size_type _Tlen = _Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Tlen$96545[ebp], ecx

; 1712 : 			_Mysize = _Right._Mysize, _Right._Mysize = _Tlen;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Tlen$96545[ebp]
	mov	DWORD PTR [eax+24], ecx

; 1713 : 
; 1714 : 			size_type _Tres = _Myres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR __Tres$96546[ebp], ecx

; 1715 : 			_Myres = _Right._Myres, _Right._Myres = _Tres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Tres$96546[ebp]
	mov	DWORD PTR [eax+28], ecx

; 1716 : 			}
; 1717 : 		else

	jmp	SHORT $LN3@swap
$LN2@swap:

; 1718 : 			{	// different allocator, do multiple assigns
; 1719 : 			_Myt _Tmp = *this; *this = _Right, _Right = _Tmp;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$96548[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	lea	ecx, DWORD PTR __Tmp$96548[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=

; 1720 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Tmp$96548[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN3@swap:

; 1721 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z$0:
	lea	ecx, DWORD PTR __Tmp$96548[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEXAAV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::swap
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z PROC		; std::operator==<wchar_t,wchar_t>, COMDAT

; 175  : 	{	// test for allocator equality (always true)

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 176  : 	return (true);

	mov	al, 1

; 177  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ENDP		; std::operator==<wchar_t,wchar_t>
_TEXT	ENDS
PUBLIC	??$_Fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ; std::_Fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z PROC ; std::fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 2976 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2977 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ; std::_Fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	add	esp, 12					; 0000000cH

; 2978 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ENDP ; std::fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z PROC ; std::_Fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 2946 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2947 : 	_DEBUG_RANGE(_First, _Last);

	push	2947					; 00000b83H
	push	OFFSET ??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Fill
$LN2@Fill:

; 2948 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill

; 2949 : 		*_First = _Val;

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator=
	jmp	SHORT $LN2@Fill
$LN4@Fill:

; 2950 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0ABV10@@Z ENDP ; std::_Fill<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
PUBLIC	??$_Iter_random@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::_Iter_random<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Unchecked_move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00@Z
_TEXT	SEGMENT
$T99283 = -67						; size = 1
$T99284 = -66						; size = 1
$T99285 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00@Z PROC ; stdext::_Unchecked_move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 3497 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 3498 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3499 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T99283[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ; std::_Move_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	mov	BYTE PTR $T99284[ebp], al
	mov	dl, BYTE PTR $T99283[ebp]
	push	edx
	mov	al, BYTE PTR $T99284[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T99285[ebp]
	push	eax
	call	??$_Iter_random@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::_Iter_random<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 12					; 0000000cH
	mov	cl, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 24					; 00000018H

; 3500 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@stdext@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@00@Z ENDP ; stdext::_Unchecked_move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z PROC ; std::_Iter_random<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 839  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 840  : 	typename _Iter_random_helper<
; 841  : 		iterator_traits<_Iter1>::iterator_category, 
; 842  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 843  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 844  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ENDP ; std::_Iter_random<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::forward_iterator_tag>
; Function compile flags: /Odtp /ZI
;	COMDAT ??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T99290 = -70						; size = 1
$T99291 = -69						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
__Move_cat$ = 24					; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>, COMDAT

; 2567 : 	{	// use swap to instead of the copy constructor

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 2568 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2569 : 	_BidIt2 _Result = _Dest - (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 5
	shl	eax, 5
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2570 : 	_Move_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2571 : 		forward_iterator_tag(), _Move_cat, _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T99290[ebp], al
	mov	cl, BYTE PTR $T99290[ebp]
	push	ecx
	mov	dl, BYTE PTR __Move_cat$[ebp]
	push	edx
	mov	al, BYTE PTR $T99291[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2572 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2573 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::forward_iterator_tag>, COMDAT

; 2555 : 	{	// use swap instead of the copy constructor

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 2556 : 	_DEBUG_RANGE(_First, _Last);

	push	2556					; 000009fcH
	push	OFFSET ??_C@_1HO@NAKOAEEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *>
	add	esp, 16					; 00000010H
$LN2@Move_backw:

; 2557 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Move_backw

; 2558 : 		_STD swap(*--_Dest, *--_Last);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR __Last$[ebp], eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, 32					; 00000020H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$swap@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 8
	jmp	SHORT $LN2@Move_backw
$LN1@Move_backw:

; 2559 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2560 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??_G?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEPAXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z PROC ; std::_Destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >, COMDAT

; 59   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_G?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEPAXI@Z

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@@Z ENDP ; std::_Destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEPAXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEPAXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z ; CCvar<int,int>::CCvar<int,int>
PUBLIC	??_C@_1CO@PLPOEIIE@?$AAh?$AAo?$AAs?$AAt?$AA_?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAQ?$AAu?$AAa?$AAl?$AAi?$AAt?$AAy?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CO@PLPOEIIE@?$AAh?$AAo?$AAs?$AAt?$AA_?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAQ?$AAu?$AAa?$AAl?$AAi?$AAt?$AAy?$AA?$AA@
; File c:\code\hon\src\shell\misc_cmds.cpp
CONST	SEGMENT
??_C@_1CO@PLPOEIIE@?$AAh?$AAo?$AAs?$AAt?$AA_?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAQ?$AAu?$AAa?$AAl?$AAi?$AAt?$AAy?$AA?$AA@ DB 'h'
	DB	00H, 'o', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H, 'c', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, 's', 00H, 'h', 00H, 'o'
	DB	00H, 't', 00H, 'Q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__Ehost_screenshotQuality@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__Ehost_screenshotQuality@@YAXXZ$0
__ehfuncinfo$??__Ehost_screenshotQuality@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__Ehost_screenshotQuality@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__Ehost_screenshotQuality@@YAXXZ
text$yc	SEGMENT
$T99300 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__Ehost_screenshotQuality@@YAXXZ PROC			; `dynamic initializer for 'host_screenshotQuality'', COMDAT

; 21   : CVAR_INTF	(host_screenshotQuality,	90,		CVAR_SAVECONFIG);

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__Ehost_screenshotQuality@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1CO@PLPOEIIE@?$AAh?$AAo?$AAs?$AAt?$AA_?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AAQ?$AAu?$AAa?$AAl?$AAi?$AAt?$AAy?$AA?$AA@
	lea	ecx, DWORD PTR $T99300[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	256					; 00000100H
	push	90					; 0000005aH
	lea	eax, DWORD PTR $T99300[ebp]
	push	eax
	mov	ecx, OFFSET ?host_screenshotQuality@@3V?$CCvar@HH@@A ; host_screenshotQuality
	call	??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z ; CCvar<int,int>::CCvar<int,int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T99300[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__Fhost_screenshotQuality@@YAXXZ ; `dynamic atexit destructor for 'host_screenshotQuality''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__Ehost_screenshotQuality@@YAXXZ$0:
	lea	ecx, DWORD PTR $T99300[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__Ehost_screenshotQuality@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__Ehost_screenshotQuality@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__Ehost_screenshotQuality@@YAXXZ ENDP			; `dynamic initializer for 'host_screenshotQuality''
PUBLIC	??_7?$CCvar@HH@@6B@				; CCvar<int,int>::`vftable'
PUBLIC	?GetString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CCvar<int,int>::GetString
PUBLIC	?Set@?$CCvar@HH@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CCvar<int,int>::Set
PUBLIC	?SetIndex@?$CCvar@HH@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CCvar<int,int>::SetIndex
PUBLIC	?Inc@?$CCvar@HH@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CCvar<int,int>::Inc
PUBLIC	?Toggle@?$CCvar@HH@@UAEXXZ			; CCvar<int,int>::Toggle
PUBLIC	?Reset@?$CCvar@HH@@UAEXXZ			; CCvar<int,int>::Reset
PUBLIC	?IsDefault@?$CCvar@HH@@UBE_NXZ			; CCvar<int,int>::IsDefault
PUBLIC	?StoreValue@?$CCvar@HH@@UAEXXZ			; CCvar<int,int>::StoreValue
PUBLIC	?RestoreStored@?$CCvar@HH@@UAEXXZ		; CCvar<int,int>::RestoreStored
PUBLIC	?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CCvar<int,int>::GetRangeString
EXTRN	??_E?$CCvar@HH@@UAEPAXI@Z:PROC			; CCvar<int,int>::`vector deleting destructor'
;	COMDAT ??_7?$CCvar@HH@@6B@
; File c:\code\hon\src\k2\c_cvar.h
CONST	SEGMENT
??_7?$CCvar@HH@@6B@ DD FLAT:??_E?$CCvar@HH@@UAEPAXI@Z	; CCvar<int,int>::`vftable'
	DD	FLAT:?Execute@CConsoleElement@@UAEXABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	FLAT:?Evaluate@CConsoleElement@@UAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	FLAT:?Precache@CConsoleElement@@UAE_NABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	DD	FLAT:?GetString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
	DD	FLAT:?Set@?$CCvar@HH@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	FLAT:?SetIndex@?$CCvar@HH@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	FLAT:?Inc@?$CCvar@HH@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	DD	FLAT:?Toggle@?$CCvar@HH@@UAEXXZ
	DD	FLAT:?Reset@?$CCvar@HH@@UAEXXZ
	DD	FLAT:?IsDefault@?$CCvar@HH@@UBE_NXZ
	DD	FLAT:?StoreValue@?$CCvar@HH@@UAEXXZ
	DD	FLAT:?RestoreStored@?$CCvar@HH@@UAEXXZ
	DD	FLAT:?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$1
__ehfuncinfo$??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
_TEXT	SEGMENT
_vArgList2$65729 = -36					; size = 20
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sName$ = 8						; size = 4
__Default$ = 12						; size = 4
_iFlags$ = 16						; size = 4
_pfnCmd$ = 20						; size = 4
??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z PROC ; CCvar<int,int>::CCvar<int,int>, COMDAT
; _this$ = ecx

; 725  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pfnCmd$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _iFlags$[ebp]
	or	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _sName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0ICvar@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HW4ECvarType@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CCvar@HH@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Default$[ebp]
	mov	DWORD PTR [eax+268], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Default$[ebp]
	mov	DWORD PTR [eax+272], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Default$[ebp]
	mov	DWORD PTR [eax+276], ecx

; 726  : 	if (m_bInherentValue)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	test	ecx, ecx
	je	SHORT $LN2@CCvar@2

; 727  : 	{
; 728  : 		tsvector vArgList2; vArgList2.push_back(m_sInherentValue);

	lea	ecx, DWORD PTR _vArgList2$65729[ebp]
	call	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ ; vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	lea	ecx, DWORD PTR _vArgList2$65729[ebp]
	call	?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,K2VectorAllocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > > >::push_back

; 729  : 		DefaultCvar_Cmd(this, vArgList2);

	lea	eax, DWORD PTR _vArgList2$65729[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	DWORD PTR __imp_?DefaultCvar_Cmd@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z
	add	esp, 8

; 730  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _vArgList2$65729[ebp]
	call	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
$LN2@CCvar@2:

; 731  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1ICvar@@UAE@XZ
__unwindfunclet$??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z$1:
	lea	ecx, DWORD PTR _vArgList2$65729[ebp]
	jmp	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@QAE@XZ
__ehhandler$??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CCvar@HH@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHP6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z@Z ENDP ; CCvar<int,int>::CCvar<int,int>
PUBLIC	??1?$CCvar@HH@@UAE@XZ				; CCvar<int,int>::~CCvar<int,int>
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CCvar@HH@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CCvar@HH@@UAEPAXI@Z PROC				; CCvar<int,int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CCvar@HH@@UAE@XZ			; CCvar<int,int>::~CCvar<int,int>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CCvar@HH@@UAEPAXI@Z ENDP				; CCvar<int,int>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??6CConsoleStream@@QAEAAV0@H@Z			; CConsoleStream::operator<<
PUBLIC	??_C@_15ELOONFKJ@?$AA?3?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_1EA@JIGDADHL@?$AA?5?$AAi?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AAi?$AAn?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$FL?$AA?$AA@ ; `string'
PUBLIC	??_C@_15JOGBDECP@?$AA?0?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@		; `string'
PUBLIC	?AtoX@@YAAAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AAH@Z ; AtoX
;	COMDAT ??_C@_15ELOONFKJ@?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_15ELOONFKJ@?$AA?3?$AA?5?$AA?$AA@ DB ':', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@JIGDADHL@?$AA?5?$AAi?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AAi?$AAn?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$FL?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@JIGDADHL@?$AA?5?$AAi?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AAi?$AAn?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$FL?$AA?$AA@ DB ' '
	DB	00H, 'i', 00H, 's', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'i', 00H, 'n', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, ' ', 00H, '[', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15JOGBDECP@?$AA?0?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_15JOGBDECP@?$AA?0?$AA?5?$AA?$AA@ DB ',', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@
CONST	SEGMENT
??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@ DB ']', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?Set@?$CCvar@HH@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_Value$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?Set@?$CCvar@HH@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CCvar<int,int>::Set, COMDAT
; _this$ = ecx

; 980  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 981  : 	int Value;
; 982  : 
; 983  : 	AtoX(s, Value);

	lea	eax, DWORD PTR _Value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?AtoX@@YAAAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AAH@Z ; AtoX
	add	esp, 8

; 984  : 
; 985  : 	if ((m_iFlags & CVAR_VALUERANGE) && (Value < m_RangeMin || Value > m_RangeMax))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, 1024				; 00000400H
	je	$LN4@Set@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	cmp	ecx, DWORD PTR [eax+280]
	jl	SHORT $LN3@Set@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	cmp	ecx, DWORD PTR [eax+284]
	jle	$LN4@Set@2
$LN3@Set@2:

; 986  : 		Console.Warn << m_sName << _T(": ")
; 987  : 			<< s << _T(" isn't within the valid range [") << m_RangeMin << _T(", ") << m_RangeMax << _T("]") << newl;

	mov	eax, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetNewl@CConsole@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ; CConsole::GetNewl
	push	eax
	push	OFFSET ??_C@_13OHNMPHJM@?$AA?$FN?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	push	edx
	push	OFFSET ??_C@_15JOGBDECP@?$AA?0?$AA?5?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	push	OFFSET ??_C@_1EA@JIGDADHL@?$AA?5?$AAi?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AAi?$AAn?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?$FL?$AA?$AA@
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	push	OFFSET ??_C@_15ELOONFKJ@?$AA?3?$AA?5?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __imp_?g_pConsole@@3PAVCConsole@@A
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 460				; 000001ccH
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@H@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@H@Z		; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@PB_W@Z	; CConsoleStream::operator<<
	mov	ecx, eax
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	jmp	SHORT $LN5@Set@2
$LN4@Set@2:

; 988  : 	else if (m_Value != Value)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	cmp	ecx, DWORD PTR _Value$[ebp]
	je	SHORT $LN5@Set@2

; 989  : 	{
; 990  : 		m_Value = Value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	mov	DWORD PTR [eax+272], ecx

; 991  : 		Modified();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Modified@ICvar@@QAEXXZ
$LN5@Set@2:

; 992  : 	}
; 993  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@?$CCvar@HH@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CCvar<int,int>::Set
_TEXT	ENDS
EXTRN	__imp___wtoi:PROC
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\xtoa.h
;	COMDAT ?AtoX@@YAAAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AAH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_i$ = 12						; size = 4
?AtoX@@YAAAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AAH@Z PROC ; AtoX, COMDAT

; 183  : inline int&		AtoX(const wstring &s, int &i)			{ i = _wtoi(s.c_str()); return i; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR _s$[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::c_str
	push	eax
	call	DWORD PTR __imp___wtoi
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _i$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AtoX@@YAAAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@AAH@Z ENDP ; AtoX
_TEXT	ENDS
PUBLIC	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; XtoW
;	COMDAT xdata$x
; File c:\code\hon\src\k2\c_console.h
xdata$x	SEGMENT
__unwindtable$??6CConsoleStream@@QAEAAV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6CConsoleStream@@QAEAAV0@H@Z$0
__ehfuncinfo$??6CConsoleStream@@QAEAAV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??6CConsoleStream@@QAEAAV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??6CConsoleStream@@QAEAAV0@H@Z
_TEXT	SEGMENT
tv75 = -120						; size = 4
tv76 = -116						; size = 4
$T99326 = -112						; size = 32
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_i$ = 8							; size = 4
??6CConsoleStream@@QAEAAV0@H@Z PROC			; CConsoleStream::operator<<, COMDAT
; _this$ = ecx

; 217  : 	CConsoleStream&	operator<<(int i)					{ *this << XtoA(i); return *this; }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??6CConsoleStream@@QAEAAV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	10					; 0000000aH
	push	0
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T99326[ebp]
	push	ecx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; XtoW
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv76[ebp], eax
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR tv75[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??6CConsoleStream@@QAEAAV0@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; CConsoleStream::operator<<
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T99326[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6CConsoleStream@@QAEAAV0@H@Z$0:
	lea	ecx, DWORD PTR $T99326[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??6CConsoleStream@@QAEAAV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??6CConsoleStream@@QAEAAV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??6CConsoleStream@@QAEAAV0@H@Z ENDP			; CConsoleStream::operator<<
PUBLIC	??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; _ItoW<int>
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\xtoa.h
;	COMDAT ?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z
_TEXT	SEGMENT
$T99337 = -68						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
_flags$ = 16						; size = 4
_width$ = 20						; size = 4
_base$ = 24						; size = 4
?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z PROC ; XtoW, COMDAT

; 117  : inline wstring	XtoW(int i, int flags = 0, int width = 0, int base = 10)				{ return _ItoW(i, flags, width, base); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR $T99337[ebp], 0
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; _ItoW<int>
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR $T99337[ebp]
	or	edx, 1
	mov	DWORD PTR $T99337[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ENDP ; XtoW
_TEXT	ENDS
PUBLIC	?AtoI@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; AtoI
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\c_cvar.h
;	COMDAT ?Inc@?$CCvar@HH@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_Value$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?Inc@?$CCvar@HH@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CCvar<int,int>::Inc, COMDAT
; _this$ = ecx

; 1127 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1128 : 	int Value;
; 1129 : 
; 1130 : 	Value = AtoI(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?AtoI@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; AtoI
	add	esp, 4
	mov	DWORD PTR _Value$[ebp], eax

; 1131 : 
; 1132 : 	if (Value)

	cmp	DWORD PTR _Value$[ebp], 0
	je	SHORT $LN2@Inc@2

; 1133 : 	{
; 1134 : 		m_Value += AtoI(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?AtoI@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; AtoI
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+272]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 1135 : 		Modified();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Modified@ICvar@@QAEXXZ
$LN2@Inc@2:

; 1136 : 	}
; 1137 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Inc@?$CCvar@HH@@UAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CCvar<int,int>::Inc
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\xtoa.h
_TEXT	ENDS
;	COMDAT ?AtoI@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?AtoI@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; AtoI, COMDAT

; 201  : inline int					AtoI(const wstring &s)	{ return _wtoi(s.c_str()); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, DWORD PTR _s$[ebp]
	call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::c_str
	push	eax
	call	DWORD PTR __imp___wtoi
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AtoI@@YAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; AtoI
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\c_cvar.h
_TEXT	ENDS
;	COMDAT ?Toggle@?$CCvar@HH@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Toggle@?$CCvar@HH@@UAEXXZ PROC				; CCvar<int,int>::Toggle, COMDAT
; _this$ = ecx

; 1173 : template <> inline void	CCvar<int>::Toggle()	{ m_Value = m_Value ? 0 : 1; Modified(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+272], 0
	sete	cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Modified@ICvar@@QAEXXZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Toggle@?$CCvar@HH@@UAEXXZ ENDP				; CCvar<int,int>::Toggle
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1?$CCvar@HH@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CCvar@HH@@UAE@XZ PROC				; CCvar<int,int>::~CCvar<int,int>, COMDAT
; _this$ = ecx

; 306  : 	~CCvar() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CCvar@HH@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1ICvar@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CCvar@HH@@UAE@XZ ENDP				; CCvar<int,int>::~CCvar<int,int>
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?Reset@?$CCvar@HH@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@?$CCvar@HH@@UAEXXZ PROC				; CCvar<int,int>::Reset, COMDAT
; _this$ = ecx

; 308  : 	void			Reset()										{ if (m_Value == m_Default) return; m_Value = m_Default; Modified(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+272]
	cmp	edx, DWORD PTR [ecx+268]
	jne	SHORT $LN1@Reset@2
	jmp	SHORT $LN2@Reset@2
$LN1@Reset@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	mov	DWORD PTR [eax+272], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Modified@ICvar@@QAEXXZ
$LN2@Reset@2:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@?$CCvar@HH@@UAEXXZ ENDP				; CCvar<int,int>::Reset
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsDefault@?$CCvar@HH@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDefault@?$CCvar@HH@@UBE_NXZ PROC			; CCvar<int,int>::IsDefault, COMDAT
; _this$ = ecx

; 309  : 	bool			IsDefault() const							{ return m_Value == m_Default; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+272]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+268]
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDefault@?$CCvar@HH@@UBE_NXZ ENDP			; CCvar<int,int>::IsDefault
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?StoreValue@?$CCvar@HH@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StoreValue@?$CCvar@HH@@UAEXXZ PROC			; CCvar<int,int>::StoreValue, COMDAT
; _this$ = ecx

; 312  : 	void			StoreValue()								{ m_Stored = m_Value; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR [eax+276], edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?StoreValue@?$CCvar@HH@@UAEXXZ ENDP			; CCvar<int,int>::StoreValue
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?RestoreStored@?$CCvar@HH@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RestoreStored@?$CCvar@HH@@UAEXXZ PROC			; CCvar<int,int>::RestoreStored, COMDAT
; _this$ = ecx

; 313  : 	void			RestoreStored()								{ m_Value = m_Stored; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	mov	DWORD PTR [eax+272], edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreStored@?$CCvar@HH@@UAEXXZ ENDP			; CCvar<int,int>::RestoreStored
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
_TEXT	SEGMENT
$T99359 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ PROC ; CCvar<int,int>::GetString, COMDAT
; _this$ = ecx

; 315  : 	tstring			GetString() const							{ return XtoA(m_Value); }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T99359[ebp], 0
	push	10					; 0000000aH
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; XtoW
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR $T99359[ebp]
	or	eax, 1
	mov	DWORD PTR $T99359[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ENDP ; CCvar<int,int>::GetString
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetIndex@?$CCvar@HH@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_uiIndex$ = 8						; size = 4
_s$ = 12						; size = 4
?SetIndex@?$CCvar@HH@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z PROC ; CCvar<int,int>::SetIndex, COMDAT
; _this$ = ecx

; 321  : 	void			SetIndex(uint uiIndex, const tstring &s)	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetIndex@?$CCvar@HH@@UAEXIABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ENDP ; CCvar<int,int>::SetIndex
_TEXT	ENDS
PUBLIC	??$ABS@H@@YAHH@Z				; ABS<int>
PUBLIC	__$ArrayPad$
EXTRN	__imp_?FormatInt@@YAX_KHIH_WAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z:PROC
;	COMDAT xdata$x
; File c:\code\hon\src\k2\xtoa.h
xdata$x	SEGMENT
__unwindtable$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z$0
__ehfuncinfo$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z
_TEXT	SEGMENT
$T99366 = -117						; size = 1
$T99369 = -116						; size = 4
_sReturn$ = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
_flags$ = 16						; size = 4
_width$ = 20						; size = 4
_base$ = 24						; size = 4
??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z PROC ; _ItoW<int>, COMDAT

; 86   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T99369[ebp], 0

; 87   : 	wstring sReturn;

	push	1
	lea	ecx, DWORD PTR $T99366[ebp]
	call	??0_Has_debug_it@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Has_debug_it::_Has_debug_it
	mov	al, BYTE PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _sReturn$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@U_Has_debug_it@01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 88   : 	FormatInt(ABS(i), flags, width, base, (i < 0) ? L'-' : 0, sReturn);

	lea	eax, DWORD PTR _sReturn$[ebp]
	push	eax
	xor	ecx, ecx
	cmp	DWORD PTR _i$[ebp], 0
	setge	cl
	sub	ecx, 1
	and	ecx, 45					; 0000002dH
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	call	??$ABS@H@@YAHH@Z			; ABS<int>
	add	esp, 4
	cdq
	push	edx
	push	eax
	call	DWORD PTR __imp_?FormatInt@@YAX_KHIH_WAAV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z
	add	esp, 28					; 0000001cH

; 89   : 	return sReturn;

	lea	eax, DWORD PTR _sReturn$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	ecx, DWORD PTR $T99369[ebp]
	or	ecx, 1
	mov	DWORD PTR $T99369[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sReturn$[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 90   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z$0:
	lea	ecx, DWORD PTR _sReturn$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z$1:
	mov	eax, DWORD PTR $T99369[ebp]
	and	eax, 1
	je	$LN5@ItoW
	and	DWORD PTR $T99369[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@ItoW:
	ret	0
__ehhandler$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_ItoW@H@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ENDP ; _ItoW<int>
; Function compile flags: /Odtp /ZI
; File c:\code\hon\src\k2\k2_mathlib.h
;	COMDAT ??$ABS@H@@YAHH@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_x$ = 8							; size = 4
??$ABS@H@@YAHH@Z PROC					; ABS<int>, COMDAT

; 241  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 242  : 	return x < 0 ? -x : x;

	cmp	DWORD PTR _x$[ebp], 0
	jge	SHORT $LN3@ABS
	mov	eax, DWORD PTR _x$[ebp]
	neg	eax
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@ABS
$LN3@ABS:
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv66[ebp], ecx
$LN4@ABS:
	mov	eax, DWORD PTR tv66[ebp]

; 243  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$ABS@H@@YAHH@Z ENDP					; ABS<int>
_TEXT	ENDS
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@	; `string'
PUBLIC	??_C@_15FOBPOKEL@?$AA?$FN?$AA?5?$AA?$AA@	; `string'
;	COMDAT ??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@
; File c:\code\hon\src\k2\c_cvar.h
CONST	SEGMENT
??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@ DB ' ', 00H, '[', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15FOBPOKEL@?$AA?$FN?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_15FOBPOKEL@?$AA?$FN?$AA?5?$AA?$AA@ DB ']', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$4
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
_TEXT	SEGMENT
tv153 = -284						; size = 4
tv161 = -280						; size = 4
tv151 = -276						; size = 4
tv160 = -272						; size = 4
tv149 = -268						; size = 4
tv159 = -264						; size = 4
tv147 = -260						; size = 4
tv67 = -256						; size = 4
tv145 = -252						; size = 4
tv141 = -248						; size = 4
$T99383 = -244						; size = 32
$T99384 = -212						; size = 32
$T99385 = -180						; size = 32
$T99386 = -148						; size = 32
$T99387 = -116						; size = 32
$T99394 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ PROC ; CCvar<int,int>::GetRangeString, COMDAT
; _this$ = ecx

; 947  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T99394[ebp], 0

; 948  : 	if (m_iFlags & CVAR_VALUERANGE)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, 1024				; 00000400H
	je	$LN1@GetRangeSt

; 949  : 		return _T(" [") + XtoA(m_RangeMin) + _T(", ") + XtoA(m_RangeMax) + _T("] ");

	push	OFFSET ??_C@_15FOBPOKEL@?$AA?$FN?$AA?5?$AA?$AA@
	push	10					; 0000000aH
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	lea	edx, DWORD PTR $T99383[ebp]
	push	edx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; XtoW
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv141[ebp], eax
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR tv145[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv145[ebp]
	push	ecx
	push	OFFSET ??_C@_15JOGBDECP@?$AA?0?$AA?5?$AA?$AA@
	push	10					; 0000000aH
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+280]
	push	eax
	lea	ecx, DWORD PTR $T99384[ebp]
	push	ecx
	call	?XtoW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@HHHH@Z ; XtoW
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv67[ebp], eax
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR tv147[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv147[ebp]
	push	eax
	push	OFFSET ??_C@_15FFJNNDMJ@?$AA?5?$AA?$FL?$AA?$AA@
	lea	ecx, DWORD PTR $T99385[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv159[ebp], eax
	mov	edx, DWORD PTR tv159[ebp]
	mov	DWORD PTR tv149[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	lea	ecx, DWORD PTR $T99386[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv160[ebp], eax
	mov	edx, DWORD PTR tv160[ebp]
	mov	DWORD PTR tv151[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv151[ebp]
	push	eax
	lea	ecx, DWORD PTR $T99387[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv161[ebp], eax
	mov	edx, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv153[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv153[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR $T99394[ebp]
	or	edx, 1
	mov	DWORD PTR $T99394[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T99387[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T99386[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T99385[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T99384[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T99383[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@GetRangeSt
$LN1@GetRangeSt:

; 950  : 
; 951  : 	return _T("");

	push	OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T99394[ebp]
	or	eax, 1
	mov	DWORD PTR $T99394[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@GetRangeSt:

; 952  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$0:
	lea	ecx, DWORD PTR $T99383[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$1:
	lea	ecx, DWORD PTR $T99384[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$2:
	lea	ecx, DWORD PTR $T99385[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$3:
	lea	ecx, DWORD PTR $T99386[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ$4:
	lea	ecx, DWORD PTR $T99387[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-288]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetRangeString@?$CCvar@HH@@UBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@XZ ENDP ; CCvar<int,int>::GetRangeString
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\string
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z
_TEXT	SEGMENT
tv77 = -120						; size = 4
tv82 = -116						; size = 4
$T99404 = -112						; size = 32
$T99407 = -80						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT

; 34   : 	{	// return NTCS + string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T99407[ebp], 0

; 35   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T99404[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv82[ebp], eax
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv77[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv77[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T99407[ebp]
	or	eax, 1
	mov	DWORD PTR $T99407[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T99404[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 36   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z$0:
	lea	ecx, DWORD PTR $T99404[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z$1:
	mov	eax, DWORD PTR $T99407[ebp]
	and	eax, 1
	je	$LN5@operator@5
	and	DWORD PTR $T99407[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@operator@5:
	ret	0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@PB_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 929  : 		{	// append _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 930  : 		return (append(_Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append

; 931  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 944  : 		{	// append _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 945  : 		return (append(_Right, 0, npos));

	mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append

; 946  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 950  : 		{	// append _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 951  : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@append

; 952  : 			_String_base::_Xran();	// _Roff off end

	call	DWORD PTR __imp_?_Xran@_String_base@std@@SAXXZ
$LN5@append:

; 953  : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 954  : 		if (_Num < _Count)

	mov	eax, DWORD PTR __Num$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@append

; 955  : 			_Count = _Num;	// trim _Count to size

	mov	eax, DWORD PTR __Num$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN4@append:

; 956  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@2IB ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::npos
	sub	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN2@append
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+24]
	jae	SHORT $LN3@append
$LN2@append:

; 957  : 			_String_base::_Xlen();	// result too long

	call	DWORD PTR __imp_?_Xlen@_String_base@std@@SAXXZ
$LN3@append:

; 958  : 
; 959  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@append

; 960  : 			{	// make room and append new stuff
; 961  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 962  : 				_Right._Myptr() + _Roff, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Roff$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+28]
	sub	edx, DWORD PTR [ecx+24]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H

; 963  : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN1@append:

; 964  : 			}
; 965  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 966  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\string
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
tv77 = -120						; size = 4
tv82 = -116						; size = 4
$T99423 = -112						; size = 32
$T99426 = -80						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT

; 54   : 	{	// return string + NTCS

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T99426[ebp], 0

; 55   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T99423[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv82[ebp], eax
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv77[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv77[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T99426[ebp]
	or	eax, 1
	mov	DWORD PTR $T99426[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T99423[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 56   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z$0:
	lea	ecx, DWORD PTR $T99423[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z$1:
	mov	eax, DWORD PTR $T99426[ebp]
	and	eax, 1
	je	$LN5@operator@6
	and	DWORD PTR $T99426[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@operator@6:
	ret	0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 934  : 		{	// append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 935  : 		return (append(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append

; 936  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 985  : 		{	// append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 986  : 		return (append(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_?length@?$char_traits@_W@std@@SAIPB_W@Z
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append

; 987  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 969  : 		{	// append [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 970  : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@append@2

; 971  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
	jmp	$LN5@append@2
$LN4@append@2:

; 972  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

	mov	eax, DWORD PTR _this$[ebp]
	or	ecx, -1
	sub	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN2@append@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+24]
	jae	SHORT $LN3@append@2
$LN2@append@2:

; 973  : 			_String_base::_Xlen();	// result too long

	call	DWORD PTR __imp_?_Xlen@_String_base@std@@SAXXZ
$LN3@append@2:

; 974  : 
; 975  : 		size_type _Num;
; 976  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@append@2

; 977  : 			{	// make room and append new stuff
; 978  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	sub	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Myptr
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
	add	esp, 16					; 00000010H

; 979  : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::_Eos
$LN1@append@2:

; 980  : 			}
; 981  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN5@append@2:

; 982  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::append
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\string
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z
_TEXT	SEGMENT
tv77 = -120						; size = 4
tv82 = -116						; size = 4
$T99442 = -112						; size = 32
$T99445 = -80						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >, COMDAT

; 24   : 	{	// return string + string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T99445[ebp], 0

; 25   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T99442[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR tv82[ebp], eax
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv77[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv77[ebp]
	call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR $T99445[ebp]
	or	eax, 1
	mov	DWORD PTR $T99445[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T99442[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 26   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z$0:
	lea	ecx, DWORD PTR $T99442[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z$1:
	mov	eax, DWORD PTR $T99445[ebp]
	and	eax, 1
	je	$LN5@operator@7
	and	DWORD PTR $T99445[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
$LN5@operator@7:
	ret	0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@0@ABV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
PUBLIC	??_C@_19LNGAJGFH@?$AAE?$AAc?$AAh?$AAo?$AA?$AA@	; `string'
EXTRN	__imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z:PROC
;	COMDAT ??_C@_19LNGAJGFH@?$AAE?$AAc?$AAh?$AAo?$AA?$AA@
; File c:\code\hon\src\shell\misc_cmds.cpp
CONST	SEGMENT
??_C@_19LNGAJGFH@?$AAE?$AAc?$AAh?$AAo?$AA?$AA@ DB 'E', 00H, 'c', 00H, 'h', 00H
	DB	'o', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdEcho@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdEcho@@YAXXZ$0
__ehfuncinfo$??__EcmdEcho@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdEcho@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdEcho@@YAXXZ
text$yc	SEGMENT
$T99455 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdEcho@@YAXXZ PROC				; `dynamic initializer for 'cmdEcho'', COMDAT

; 27   : CMD(Echo)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdEcho@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_19LNGAJGFH@?$AAE?$AAc?$AAh?$AAo?$AA?$AA@
	lea	ecx, DWORD PTR $T99455[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdEchoFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdEchoFn
	lea	eax, DWORD PTR $T99455[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdEcho@@3VCCmd@@A		; cmdEcho
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T99455[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdEcho@@YAXXZ		; `dynamic atexit destructor for 'cmdEcho''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdEcho@@YAXXZ$0:
	lea	ecx, DWORD PTR $T99455[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdEcho@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdEcho@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdEcho@@YAXXZ ENDP				; `dynamic initializer for 'cmdEcho''
PUBLIC	??_C@_1BC@ODIIOKKN@?$AAL?$AAi?$AAs?$AAt?$AAM?$AAo?$AAd?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BC@ODIIOKKN@?$AAL?$AAi?$AAs?$AAt?$AAM?$AAo?$AAd?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@ODIIOKKN@?$AAL?$AAi?$AAs?$AAt?$AAM?$AAo?$AAd?$AAs?$AA?$AA@ DB 'L'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, 'M', 00H, 'o', 00H, 'd', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdListMods@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdListMods@@YAXXZ$0
__ehfuncinfo$??__EcmdListMods@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdListMods@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdListMods@@YAXXZ
text$yc	SEGMENT
$T99465 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdListMods@@YAXXZ PROC				; `dynamic initializer for 'cmdListMods'', COMDAT

; 37   : CMD(ListMods)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdListMods@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1BC@ODIIOKKN@?$AAL?$AAi?$AAs?$AAt?$AAM?$AAo?$AAd?$AAs?$AA?$AA@
	lea	ecx, DWORD PTR $T99465[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdListModsFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdListModsFn
	lea	eax, DWORD PTR $T99465[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdListMods@@3VCCmd@@A	; cmdListMods
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T99465[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdListMods@@YAXXZ		; `dynamic atexit destructor for 'cmdListMods''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdListMods@@YAXXZ$0:
	lea	ecx, DWORD PTR $T99465[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdListMods@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdListMods@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdListMods@@YAXXZ ENDP				; `dynamic initializer for 'cmdListMods''
PUBLIC	??_C@_1BA@NLELLMIB@?$AAP?$AAu?$AAs?$AAh?$AAM?$AAo?$AAd?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BA@NLELLMIB@?$AAP?$AAu?$AAs?$AAh?$AAM?$AAo?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@NLELLMIB@?$AAP?$AAu?$AAs?$AAh?$AAM?$AAo?$AAd?$AA?$AA@ DB 'P', 00H
	DB	'u', 00H, 's', 00H, 'h', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdPushMod@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdPushMod@@YAXXZ$0
__ehfuncinfo$??__EcmdPushMod@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdPushMod@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdPushMod@@YAXXZ
text$yc	SEGMENT
$T99475 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdPushMod@@YAXXZ PROC				; `dynamic initializer for 'cmdPushMod'', COMDAT

; 47   : CMD(PushMod)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdPushMod@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1BA@NLELLMIB@?$AAP?$AAu?$AAs?$AAh?$AAM?$AAo?$AAd?$AA?$AA@
	lea	ecx, DWORD PTR $T99475[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdPushModFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdPushModFn
	lea	eax, DWORD PTR $T99475[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdPushMod@@3VCCmd@@A	; cmdPushMod
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T99475[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdPushMod@@YAXXZ		; `dynamic atexit destructor for 'cmdPushMod''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdPushMod@@YAXXZ$0:
	lea	ecx, DWORD PTR $T99475[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdPushMod@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdPushMod@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdPushMod@@YAXXZ ENDP				; `dynamic initializer for 'cmdPushMod''
PUBLIC	??_C@_1BG@MIIMMJNH@?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AA?$AA@ ; `string'
EXTRN	__imp_??0CAction@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@W4EActionType@@P6AXMMABV?$CVec2@M@@0@ZH@Z:PROC
;	COMDAT ??_C@_1BG@MIIMMJNH@?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@MIIMMJNH@?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AA?$AA@ DB 'S'
	DB	00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, 's', 00H
	DB	'h', 00H, 'o', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EactScreenshot@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EactScreenshot@@YAXXZ$0
__ehfuncinfo$??__EactScreenshot@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EactScreenshot@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EactScreenshot@@YAXXZ
text$yc	SEGMENT
$T99485 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EactScreenshot@@YAXXZ PROC				; `dynamic initializer for 'actScreenshot'', COMDAT

; 60   : ACTION_IMPULSE(Screenshot)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EactScreenshot@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1BG@MIIMMJNH@?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
	lea	ecx, DWORD PTR $T99485[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	1
	push	OFFSET ?actScreenshotFn@@YAXMMABV?$CVec2@M@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@Z ; actScreenshotFn
	push	2
	lea	eax, DWORD PTR $T99485[ebp]
	push	eax
	mov	ecx, OFFSET ?actScreenshot@@3VCAction@@A ; actScreenshot
	call	DWORD PTR __imp_??0CAction@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@W4EActionType@@P6AXMMABV?$CVec2@M@@0@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T99485[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FactScreenshot@@YAXXZ	; `dynamic atexit destructor for 'actScreenshot''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EactScreenshot@@YAXXZ$0:
	lea	ecx, DWORD PTR $T99485[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EactScreenshot@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EactScreenshot@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EactScreenshot@@YAXXZ ENDP				; `dynamic initializer for 'actScreenshot''
PUBLIC	??_C@_1BI@EONDIMJF@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BI@EONDIMJF@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@EONDIMJF@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AA@ DB 'S'
	DB	00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'E', 00H
	DB	'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__EcmdSystemError@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EcmdSystemError@@YAXXZ$0
__ehfuncinfo$??__EcmdSystemError@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EcmdSystemError@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??__EcmdSystemError@@YAXXZ
text$yc	SEGMENT
$T99495 = -108						; size = 32
__$EHRec$ = -12						; size = 12
??__EcmdSystemError@@YAXXZ PROC				; `dynamic initializer for 'cmdSystemError'', COMDAT

; 80   : CMD(SystemError)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EcmdSystemError@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??_C@_1BI@EONDIMJF@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AA@
	lea	ecx, DWORD PTR $T99495[ebp]
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	push	OFFSET ?cmdSystemErrorFn@@YA_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@Z ; cmdSystemErrorFn
	lea	eax, DWORD PTR $T99495[ebp]
	push	eax
	mov	ecx, OFFSET ?cmdSystemError@@3VCCmd@@A	; cmdSystemError
	call	DWORD PTR __imp_??0CCmd@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@P6A_NPAVCConsoleElement@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V?$K2VectorAllocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@@@@@@ZH@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T99495[ebp]
	call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	OFFSET ??__FcmdSystemError@@YAXXZ	; `dynamic atexit destructor for 'cmdSystemError''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EcmdSystemError@@YAXXZ$0:
	lea	ecx, DWORD PTR $T99495[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
__ehhandler$??__EcmdSystemError@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EcmdSystemError@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EcmdSystemError@@YAXXZ ENDP				; `dynamic initializer for 'cmdSystemError''
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??__Fg_aTextureFilteringNames@@YAXXZ
text$yd	SEGMENT
??__Fg_aTextureFilteringNames@@YAXXZ PROC		; `dynamic atexit destructor for 'g_aTextureFilteringNames'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET ??1?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >
	push	10					; 0000000aH
	push	32					; 00000020H
	push	OFFSET _g_aTextureFilteringNames
	call	??_M@YGXPAXIHP6EX0@Z@Z
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fg_aTextureFilteringNames@@YAXXZ ENDP		; `dynamic atexit destructor for 'g_aTextureFilteringNames''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__Fhost_screenshotFormat@@YAXXZ
text$yd	SEGMENT
??__Fhost_screenshotFormat@@YAXXZ PROC			; `dynamic atexit destructor for 'host_screenshotFormat'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?host_screenshotFormat@@3V?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@A ; host_screenshotFormat
	call	??1?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@UAE@XZ ; CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >::~CCvar<std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,K2StringAllocator<wchar_t> > >
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fhost_screenshotFormat@@YAXXZ ENDP			; `dynamic atexit destructor for 'host_screenshotFormat''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__Fhost_screenshotQuality@@YAXXZ
text$yd	SEGMENT
??__Fhost_screenshotQuality@@YAXXZ PROC			; `dynamic atexit destructor for 'host_screenshotQuality'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?host_screenshotQuality@@3V?$CCvar@HH@@A ; host_screenshotQuality
	call	??1?$CCvar@HH@@UAE@XZ			; CCvar<int,int>::~CCvar<int,int>
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fhost_screenshotQuality@@YAXXZ ENDP			; `dynamic atexit destructor for 'host_screenshotQuality''
text$yd	ENDS
EXTRN	__imp_??1CCmd@@UAE@XZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FcmdEcho@@YAXXZ
text$yd	SEGMENT
??__FcmdEcho@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdEcho'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdEcho@@3VCCmd@@A		; cmdEcho
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdEcho@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdEcho''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FcmdListMods@@YAXXZ
text$yd	SEGMENT
??__FcmdListMods@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdListMods'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdListMods@@3VCCmd@@A	; cmdListMods
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdListMods@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdListMods''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FcmdPushMod@@YAXXZ
text$yd	SEGMENT
??__FcmdPushMod@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdPushMod'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdPushMod@@3VCCmd@@A	; cmdPushMod
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdPushMod@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdPushMod''
text$yd	ENDS
EXTRN	__imp_??1CAction@@UAE@XZ:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ??__FactScreenshot@@YAXXZ
text$yd	SEGMENT
??__FactScreenshot@@YAXXZ PROC				; `dynamic atexit destructor for 'actScreenshot'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?actScreenshot@@3VCAction@@A ; actScreenshot
	call	DWORD PTR __imp_??1CAction@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FactScreenshot@@YAXXZ ENDP				; `dynamic atexit destructor for 'actScreenshot''
; Function compile flags: /Odtp /ZI
text$yd	ENDS
;	COMDAT ??__FcmdSystemError@@YAXXZ
text$yd	SEGMENT
??__FcmdSystemError@@YAXXZ PROC				; `dynamic atexit destructor for 'cmdSystemError'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET ?cmdSystemError@@3VCCmd@@A	; cmdSystemError
	call	DWORD PTR __imp_??1CCmd@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcmdSystemError@@YAXXZ ENDP				; `dynamic atexit destructor for 'cmdSystemError''
text$yd	ENDS
PUBLIC	?cmdSystemError@@3VCCmd@@A			; cmdSystemError
PUBLIC	?actScreenshot@@3VCAction@@A			; actScreenshot
PUBLIC	?cmdPushMod@@3VCCmd@@A				; cmdPushMod
PUBLIC	?cmdListMods@@3VCCmd@@A				; cmdListMods
PUBLIC	?cmdEcho@@3VCCmd@@A				; cmdEcho
PUBLIC	?host_screenshotQuality@@3V?$CCvar@HH@@A	; host_screenshotQuality
PUBLIC	?host_screenshotFormat@@3V?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@A ; host_screenshotFormat
_BSS	SEGMENT
?cmdSystemError@@3VCCmd@@A DB 034H DUP (?)		; cmdSystemError
?actScreenshot@@3VCAction@@A DB 030H DUP (?)		; actScreenshot
?cmdPushMod@@3VCCmd@@A DB 034H DUP (?)			; cmdPushMod
?cmdListMods@@3VCCmd@@A DB 034H DUP (?)			; cmdListMods
?cmdEcho@@3VCCmd@@A DB 034H DUP (?)			; cmdEcho
?host_screenshotQuality@@3V?$CCvar@HH@@A DB 0120H DUP (?) ; host_screenshotQuality
?host_screenshotFormat@@3V?$CCvar@V?$basic_string@_WU?$char_traits@_W@std@@V?$K2StringAllocator@_W@@@std@@V12@@@A DB 016cH DUP (?) ; host_screenshotFormat
_g_aTextureFilteringNames DB 0140H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_g_aTextureFilteringNames$initializer$ DD FLAT:??__Eg_aTextureFilteringNames@@YAXXZ
_host_screenshotFormat$initializer$ DD FLAT:??__Ehost_screenshotFormat@@YAXXZ
_host_screenshotQuality$initializer$ DD FLAT:??__Ehost_screenshotQuality@@YAXXZ
_cmdEcho$initializer$ DD FLAT:??__EcmdEcho@@YAXXZ
_cmdListMods$initializer$ DD FLAT:??__EcmdListMods@@YAXXZ
_cmdPushMod$initializer$ DD FLAT:??__EcmdPushMod@@YAXXZ
_actScreenshot$initializer$ DD FLAT:??__EactScreenshot@@YAXXZ
_cmdSystemError$initializer$ DD FLAT:??__EcmdSystemError@@YAXXZ
CRT$XCU	ENDS
END
